// –ü—Ä–æ—Å—Ç–æ–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—ã—à—å –∏ touch —Å–æ–±—ã—Ç–∏—è

class PanningController {
  constructor() {
    this.isPanning = false;
    this.lastX = 0;
    this.lastY = 0;
    this.isZooming = false;
    this.initialDistance = 0;
    this.initialScale = 1;
    this.currentScale = 1;
    this.zoomCenter = { x: 0, y: 0 };
    
    this.init();
  }

  init() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
    document.addEventListener('mousedown', (e) => {
      this.isPanning = true;
      this.lastX = e.clientX;
      this.lastY = e.clientY;
    });

    document.addEventListener('mousemove', (e) => {
      if (this.isPanning) {
        const deltaX = e.clientX - this.lastX;
        const deltaY = e.clientY - this.lastY;
        window.scrollBy(-deltaX, -deltaY);
        this.lastX = e.clientX;
        this.lastY = e.clientY;
        e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
      }
    });

    document.addEventListener('mouseup', () => {
      this.isPanning = false;
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ touch
    document.addEventListener('touchstart', (e) => {
      if (e.touches.length === 1) {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.isPanning = true;
        this.isZooming = false;
        this.lastX = e.touches[0].clientX;
        this.lastY = e.touches[0].clientY;
        console.log('üëÜ –ù–∞—á–∞—Ç–æ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
      } else if (e.touches.length === 2) {
        // –î–≤–æ–π–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.isZooming = true;
        this.isPanning = false;
        
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        
        this.initialDistance = this.getDistance(touch1, touch2);
        this.initialScale = this.currentScale;
        
        // –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        this.zoomCenter = {
          x: (touch1.clientX + touch2.clientX) / 2,
          y: (touch1.clientY + touch2.clientY) / 2
        };
        
        console.log('ü§è –ù–∞—á–∞—Ç–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ');
        e.preventDefault();
      }
    });

    document.addEventListener('touchmove', (e) => {
      if (this.isPanning && e.touches.length === 1) {
        // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        const deltaX = e.touches[0].clientX - this.lastX;
        const deltaY = e.touches[0].clientY - this.lastY;
        window.scrollBy(-deltaX, -deltaY);
        this.lastX = e.touches[0].clientX;
        this.lastY = e.touches[0].clientY;
        e.preventDefault();
      } else if (this.isZooming && e.touches.length === 2) {
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        const touch1 = e.touches[0];
        const touch2 = e.touches[1];
        
        const currentDistance = this.getDistance(touch1, touch2);
        const scale = currentDistance / this.initialDistance;
        this.currentScale = this.initialScale * scale;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.currentScale = Math.max(0.5, Math.min(3, this.currentScale));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ canvas
        const canvas = document.querySelector('canvas');
        if (canvas) {
          canvas.style.transform = `scale(${this.currentScale})`;
          canvas.style.transformOrigin = `${this.zoomCenter.x}px ${this.zoomCenter.y}px`;
        }
        
        e.preventDefault();
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–≤–æ–π–Ω–æ–π —Ç–∞–ø)
    let lastTap = 0;
    document.addEventListener('touchend', (e) => {
      if (e.touches.length === 0) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –≤—Å–µ—Ö –ø–∞–ª—å—Ü–µ–≤
        this.isPanning = false;
        this.isZooming = false;
        
        const now = Date.now();
        if (now - lastTap < 300) {
          // –î–≤–æ–π–Ω–æ–π —Ç–∞–ø - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
          this.resetZoom();
        }
        lastTap = now;
      }
    });
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
  getDistance(touch1, touch2) {
    const dx = touch1.clientX - touch2.clientX;
    const dy = touch1.clientY - touch2.clientY;
    return Math.sqrt(dx * dx + dy * dy);
  }


  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  disable() {
    this.isPanning = false;
    this.isZooming = false;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  enable() {
    // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∞
  resetZoom() {
    this.currentScale = 1;
    this.isZooming = false;
    this.isPanning = false;
    const canvas = document.querySelector('canvas');
    if (canvas) {
      canvas.style.transform = 'scale(1)';
      canvas.style.transformOrigin = 'center center';
    }
    console.log('üîÑ –ú–∞—Å—à—Ç–∞–± —Å–±—Ä–æ—à–µ–Ω, –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
  getCurrentScale() {
    return this.currentScale;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
export { PanningController };

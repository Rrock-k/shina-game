#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
 * –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤—ã–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∞
function clearScreen() {
    console.clear();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function printHeader() {
    console.log('\n' + '='.repeat(60));
    console.log('üéÆ –ö–ê–†–¢–ê –®–ò–ù–´ - –ú–ï–ù–ï–î–ñ–ï–† –°–ö–†–ò–ü–¢–û–í');
    console.log('='.repeat(60));
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç: ${path.basename(process.cwd())}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('='.repeat(60) + '\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é
function printMenu() {
    console.log('üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:');
    console.log();
    console.log('1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É (npm start)');
    console.log('2. üîß –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ dev —Ä–µ–∂–∏–º–µ (npm run dev)');
    console.log('3. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã (npm test)');
    console.log('4. üì¶ –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ (npm run collect)');
    console.log('5. üìö –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ (npm run collect-full)');
    console.log('6. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞');
    console.log('7. üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
    console.log('8. ‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É');
    console.log('0. üö™ –í—ã—Ö–æ–¥');
    console.log();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function startGame() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    console.log('='.repeat(40));
    try {
        execSync('npm start', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ dev —Ä–µ–∂–∏–º–µ
function startDev() {
    console.log('üîß –ó–∞–ø—É—Å–∫ –≤ dev —Ä–µ–∂–∏–º–µ...');
    console.log('='.repeat(40));
    try {
        execSync('npm run dev', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ dev —Ä–µ–∂–∏–º–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function runTests() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
    console.log('='.repeat(40));
    try {
        execSync('npm test', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±–æ—Ä–∞
function collectQuick() {
    console.log('üì¶ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±–æ—Ä–∞...');
    console.log('='.repeat(40));
    try {
        execSync('npm run collect', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±–æ—Ä–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞
function collectFull() {
    console.log('üìö –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞...');
    console.log('='.repeat(40));
    try {
        execSync('npm run collect-full', { stdio: 'inherit' });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function showStats() {
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ï–ö–¢–ê:');
    console.log('='.repeat(40));
    
    try {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        console.log('\nüìÅ –§–∞–π–ª—ã –ø–æ —Ç–∏–ø–∞–º:');
        const jsFiles = execSync('find . -name "*.js" -type f | wc -l', { encoding: 'utf8' }).trim();
        const htmlFiles = execSync('find . -name "*.html" -type f | wc -l', { encoding: 'utf8' }).trim();
        const cssFiles = execSync('find . -name "*.css" -type f | wc -l', { encoding: 'utf8' }).trim();
        const mdFiles = execSync('find . -name "*.md" -type f | wc -l', { encoding: 'utf8' }).trim();
        const jsonFiles = execSync('find . -name "*.json" -type f | wc -l', { encoding: 'utf8' }).trim();
        
        console.log(`  JavaScript: ${jsFiles}`);
        console.log(`  HTML: ${htmlFiles}`);
        console.log(`  CSS: ${cssFiles}`);
        console.log(`  Markdown: ${mdFiles}`);
        console.log(`  JSON: ${jsonFiles}`);
        
        // –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        console.log('\nüìè –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞:');
        const size = execSync('du -sh . --exclude=node_modules --exclude=.git 2>/dev/null | cut -f1', { encoding: 'utf8' }).trim();
        console.log(`  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${size}`);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
        try {
            const lastCommits = execSync('git log --oneline -5', { encoding: 'utf8' }).trim();
            console.log(lastCommits);
        } catch (error) {
            console.log('  Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
    }
    
    console.log('\n' + '='.repeat(40));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanup() {
    console.log('üßπ –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í:');
    console.log('='.repeat(40));
    
    const filesToRemove = [
        'repository-content.txt',
        'test-*.html',
        'test-*.js',
        'monitor-*.js'
    ];
    
    let removedCount = 0;
    
    for (const pattern of filesToRemove) {
        try {
            const files = execSync(`find . -name "${pattern}" -type f`, { encoding: 'utf8' }).trim();
            if (files) {
                const fileList = files.split('\n');
                for (const file of fileList) {
                    if (file) {
                        fs.unlinkSync(file);
                        console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω: ${file}`);
                        removedCount++;
                    }
                }
            }
        } catch (error) {
            // –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
    try {
        execSync('pkill -f "python3 -m http.server"', { stdio: 'ignore' });
        console.log('  üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã HTTP —Å–µ—Ä–≤–µ—Ä—ã');
    } catch (error) {
        // –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }
    
    console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${removedCount}`);
    console.log('='.repeat(40));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    console.log('‚ùì –°–ü–†–ê–í–ö–ê –ü–û –£–¢–ò–õ–ò–¢–ê–ú:');
    console.log('='.repeat(40));
    console.log();
    console.log('üì¶ –°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤:');
    console.log('  npm run collect      - –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä (–∏—Å–∫–ª—é—á–∞–µ—Ç node_modules, .git)');
    console.log('  npm run collect-full - –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä (—Å —É—á–µ—Ç–æ–º .gitignore)');
    console.log();
    console.log('üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã:');
    console.log('  npm start            - –ó–∞–ø—É—Å–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º');
    console.log('  npm run dev          - –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log();
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:');
    console.log('  npm test             - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
    console.log();
    console.log('üîß –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤:');
    console.log('  node scripts/collect/quick-collect.cjs');
    console.log('  node scripts/collect/collect-files.cjs');
    console.log('  node scripts/collect/manage.cjs');
    console.log();
    console.log('='.repeat(40));
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
function main() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    function showMenu() {
        clearScreen();
        printHeader();
        printMenu();
        
        rl.question('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-8): ', (answer) => {
            const choice = answer.trim();
            
            switch (choice) {
                case '1':
                    startGame();
                    break;
                case '2':
                    startDev();
                    break;
                case '3':
                    runTests();
                    break;
                case '4':
                    collectQuick();
                    break;
                case '5':
                    collectFull();
                    break;
                case '6':
                    showStats();
                    break;
                case '7':
                    cleanup();
                    break;
                case '8':
                    showHelp();
                    break;
                case '0':
                    console.log('\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                    rl.close();
                    return;
                default:
                    console.log('\n‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
            
            console.log('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
            rl.question('', () => {
                showMenu();
            });
        });
    }
    
    showMenu();
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = { main };

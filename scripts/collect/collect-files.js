#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
 * –ò—Å–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ .gitignore
 */

// –ß–∏—Ç–∞–µ–º .gitignore –∏ –ø–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª–∞
function parseGitignore(gitignorePath) {
    if (!fs.existsSync(gitignorePath)) {
        return [];
    }
    
    const content = fs.readFileSync(gitignorePath, 'utf8');
    const rules = content.split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'))
        .map(line => {
            // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª—ç—à –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
            if (line.startsWith('/')) {
                line = line.substring(1);
            }
            return line;
        });
    
    return rules;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
function shouldIgnore(filePath, gitignoreRules) {
    const relativePath = path.relative(process.cwd(), filePath);
    
    for (const rule of gitignoreRules) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å wildcard
        if (rule.includes('*')) {
            const regex = new RegExp('^' + rule.replace(/\*/g, '.*') + '$');
            if (regex.test(relativePath) || regex.test(path.basename(relativePath))) {
                return true;
            }
        } else {
            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º –ø—É—Ç–∏
            if (relativePath === rule || 
                relativePath.startsWith(rule + '/') ||
                relativePath.endsWith('/' + rule) ||
                path.basename(relativePath) === rule) {
                return true;
            }
        }
    }
    
    return false;
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
function collectFiles(dirPath, gitignoreRules, allFiles = []) {
    const items = fs.readdirSync(dirPath);
    
    for (const item of items) {
        const fullPath = path.join(dirPath, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã
            if (!shouldIgnore(fullPath, gitignoreRules)) {
                collectFiles(fullPath, gitignoreRules, allFiles);
            }
        } else if (stat.isFile()) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã
            if (!shouldIgnore(fullPath, gitignoreRules)) {
                allFiles.push(fullPath);
            }
        }
    }
    
    return allFiles;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    const projectRoot = process.cwd();
    const gitignorePath = path.join(projectRoot, '.gitignore');
    const outputPath = path.join(projectRoot, 'repository-content.txt');
    
    console.log('üîç –°–æ–±–∏—Ä–∞—é —Ñ–∞–π–ª—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
    
    // –ü–∞—Ä—Å–∏–º .gitignore
    const gitignoreRules = parseGitignore(gitignorePath);
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${gitignoreRules.length} –ø—Ä–∞–≤–∏–ª –≤ .gitignore`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    const allFiles = collectFiles(projectRoot, gitignoreRules);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    allFiles.sort();
    
    // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    let output = `# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n`;
    output += `# –°–æ–±—Ä–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;
    output += `# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}\n\n`;
    
    for (const filePath of allFiles) {
        const relativePath = path.relative(projectRoot, filePath);
        
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            
            output += `\n${'='.repeat(80)}\n`;
            output += `üìÑ –§–ê–ô–õ: ${relativePath}\n`;
            output += `${'='.repeat(80)}\n\n`;
            output += content;
            output += `\n\n`;
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${relativePath}: ${error.message}`);
            output += `\n${'='.repeat(80)}\n`;
            output += `üìÑ –§–ê–ô–õ: ${relativePath} (–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø)\n`;
            output += `${'='.repeat(80)}\n\n`;
            output += `–û—à–∏–±–∫–∞: ${error.message}\n\n`;
        }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fs.writeFileSync(outputPath, output, 'utf8');
    
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(outputPath).size / 1024).toFixed(2)} KB`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    main();
}

module.exports = { collectFiles, parseGitignore, shouldIgnore };

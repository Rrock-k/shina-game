#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ .gitignore
 */

function collectAllFiles(dir, outputFile) {
    const files = [];
    
    function walkDir(currentPath) {
        const items = fs.readdirSync(currentPath);
        
        for (const item of items) {
            const fullPath = path.join(currentPath, item);
            const stat = fs.statSync(fullPath);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .git, .DS_Store –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (item === 'node_modules' || 
                item === '.git' || 
                item === '.DS_Store' ||
                item === 'repository-content.txt' ||
                item.startsWith('.')) {
                continue;
            }
            
            if (stat.isDirectory()) {
                walkDir(fullPath);
            } else if (stat.isFile()) {
                files.push(fullPath);
            }
        }
    }
    
    walkDir(dir);
    return files;
}

function main() {
    const projectRoot = process.cwd();
    const outputPath = path.join(projectRoot, 'repository-content.txt');
    
    // –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    console.log('\n' + '='.repeat(50));
    console.log('üöÄ –ë–´–°–¢–†–´–ô –°–ë–û–† –§–ê–ô–õ–û–í –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø');
    console.log('='.repeat(50));
    console.log(`üìÅ –ü—Ä–æ–µ–∫—Ç: ${path.basename(projectRoot)}`);
    console.log(`‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`);
    console.log('='.repeat(50) + '\n');
    
    // –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤
    console.log('üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    const allFiles = collectAllFiles(projectRoot);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤\n`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ repository-content.txt...');
    let output = `# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n`;
    output += `# –°–æ–±—Ä–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;
    output += `# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}\n\n`;
    
    let processedFiles = 0;
    let errors = 0;
    
    for (const filePath of allFiles) {
        const relativePath = path.relative(projectRoot, filePath);
        
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            
            output += `\n${'='.repeat(60)}\n`;
            output += `üìÑ ${relativePath}\n`;
            output += `${'='.repeat(60)}\n\n`;
            output += content;
            output += `\n\n`;
            
            processedFiles++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ñ–∞–π–ª–æ–≤
            if (processedFiles % 10 === 0) {
                console.log(`   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedFiles}/${allFiles.length} —Ñ–∞–π–ª–æ–≤`);
            }
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${relativePath}: ${error.message}`);
            errors++;
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    fs.writeFileSync(outputPath, output, 'utf8');
    
    // –ö—Ä–∞—Å–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ –°–ë–û–† –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('='.repeat(50));
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${processedFiles}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(outputPath).size / 1024).toFixed(2)} KB`);
    console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputPath}`);
    console.log('='.repeat(50) + '\n');
}

main();

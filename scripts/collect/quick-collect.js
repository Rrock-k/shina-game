#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ .gitignore
 */

function collectAllFiles(dir, outputFile) {
    const files = [];
    
    function walkDir(currentPath) {
        const items = fs.readdirSync(currentPath);
        
        for (const item of items) {
            const fullPath = path.join(currentPath, item);
            const stat = fs.statSync(fullPath);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules, .git, .DS_Store –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (item === 'node_modules' || 
                item === '.git' || 
                item === '.DS_Store' ||
                item === 'repository-content.txt' ||
                item.startsWith('.')) {
                continue;
            }
            
            if (stat.isDirectory()) {
                walkDir(fullPath);
            } else if (stat.isFile()) {
                files.push(fullPath);
            }
        }
    }
    
    walkDir(dir);
    return files;
}

function main() {
    const projectRoot = process.cwd();
    const outputPath = path.join(projectRoot, 'repository-content.txt');
    
    console.log('üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...');
    
    const allFiles = collectAllFiles(projectRoot);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤`);
    
    let output = `# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è\n`;
    output += `# –°–æ–±—Ä–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n`;
    output += `# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}\n\n`;
    
    for (const filePath of allFiles) {
        const relativePath = path.relative(projectRoot, filePath);
        
        try {
            const content = fs.readFileSync(filePath, 'utf8');
            
            output += `\n${'='.repeat(60)}\n`;
            output += `üìÑ ${relativePath}\n`;
            output += `${'='.repeat(60)}\n\n`;
            output += content;
            output += `\n\n`;
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${relativePath}: ${error.message}`);
        }
    }
    
    fs.writeFileSync(outputPath, output, 'utf8');
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: ${outputPath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${(fs.statSync(outputPath).size / 1024).toFixed(2)} KB`);
}

main();

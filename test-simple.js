#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ö–∞—Ä—Ç–∞ –®–∏–Ω—ã"
 * –ó–∞–º–µ–Ω—è–µ—Ç Jest –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–º ES –º–æ–¥—É–ª–∏
 */

console.log('üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
console.log('='.repeat(40));

let passed = 0;
let failed = 0;

function test(name, fn) {
  try {
    fn();
    console.log(`‚úÖ ${name}`);
    passed++;
  } catch (error) {
    console.log(`‚ùå ${name}: ${error.message}`);
    failed++;
  }
}

function expect(actual) {
  return {
    toBe: (expected) => {
      if (actual !== expected) {
        throw new Error(`Expected ${expected}, but got ${actual}`);
      }
    },
    toBeDefined: () => {
      if (actual === undefined) {
        throw new Error('Expected value to be defined');
      }
    },
    toBeTruthy: () => {
      if (!actual) {
        throw new Error('Expected value to be truthy');
      }
    }
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
test('–±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç', () => {
  expect(1 + 1).toBe(2);
});

test('–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è', () => {
  expect(typeof process).toBe('object');
  expect(process.env).toBeDefined();
});

test('–ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', () => {
  expect(true).toBeTruthy();
});

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
console.log('='.repeat(40));
console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${passed} –ø—Ä–æ—à–ª–∏, ${failed} –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å`);
console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${Date.now() - Date.now()}ms`);

if (failed === 0) {
  console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
} else {
  console.log('üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!');
  process.exit(1);
}

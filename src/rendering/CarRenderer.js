/**
 * CarRenderer - –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –º–∞—à–∏–Ω—ã, –µ—ë –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
class CarRenderer {
  constructor(config, pauseManager) {
    this.config = config;
    this.pauseManager = pauseManager;
    
    // PIXI –æ–±—ä–µ–∫—Ç—ã
    this.car = null;
    this.avatar = null;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    this.carPath = [];
    this.carSegment = 0;
    this.carProgress = 0;
    this._isAtDestination = false;
    this.stayTimer = 0;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    this.BASE_CAR_SPEED = config.BASE_CAR_SPEED || 11.7;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã
   * @param {Object} options - –û–ø—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   * @param {Array} options.carPath - –ü—É—Ç—å –º–∞—à–∏–Ω—ã
   * @param {number} options.currentRouteIndex - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {Object} options.savedCarState - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
   * @param {Function} options.buildCarPath - –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏
   * @param {Function} options.getDestinationCenter - –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param {Function} options.getNearestIntersectionIJ - –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
   * @param {Function} options.getIntersectionCoord - –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
   * @returns {PIXI.Container} –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–∞—à–∏–Ω–æ–π
   */
  createCar(options = {}) {
    this.car = new PIXI.Container();

    // –ö—É–∑–æ–≤ –º–∞—à–∏–Ω—ã
    const body = new PIXI.Graphics();
    body.beginFill(0xff8800).drawRect(-60, -30, 120, 60).endFill();
    this.car.addChild(body);

    // –†–∞–¥–∏–∞—Ç–æ—Ä (–ø–µ—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞) - –í–ü–ï–†–ï–î–ò
    const radiator = new PIXI.Graphics();
    radiator.beginFill(0x333333).drawRect(45, -25, 10, 50).endFill();
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å–∫–∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
    for (let i = 0; i < 5; i++) {
      const line = new PIXI.Graphics();
      line.lineStyle(2, 0x666666);
      line.moveTo(45, -20 + i * 10);
      line.lineTo(55, -20 + i * 10);
      radiator.addChild(line);
    }
    this.car.addChild(radiator);

    // –ü–µ—Ä–µ–¥–Ω–∏–µ —Ñ–∞—Ä—ã - –í–ü–ï–†–ï–î–ò
    const leftHeadlight = new PIXI.Graphics();
    leftHeadlight.beginFill(0xffffaa).drawCircle(50, -20, 8).endFill();
    leftHeadlight.lineStyle(1, 0x333333);
    leftHeadlight.drawCircle(50, -20, 8);
    this.car.addChild(leftHeadlight);

    const rightHeadlight = new PIXI.Graphics();
    rightHeadlight.beginFill(0xffffaa).drawCircle(50, 20, 8).endFill();
    rightHeadlight.lineStyle(1, 0x333333);
    rightHeadlight.drawCircle(50, 20, 8);
    this.car.addChild(rightHeadlight);

    // –ó–∞–¥–Ω–∏–µ —Ñ–∞—Ä—ã - –°–ó–ê–î–ò
    const leftTailLight = new PIXI.Graphics();
    leftTailLight.beginFill(0xff0000).drawCircle(-50, -20, 6).endFill();
    leftTailLight.lineStyle(1, 0x333333);
    leftTailLight.drawCircle(-50, -20, 6);
    this.car.addChild(leftTailLight);

    const rightTailLight = new PIXI.Graphics();
    rightTailLight.beginFill(0xff0000).drawCircle(-50, 20, 6).endFill();
    rightTailLight.lineStyle(1, 0x333333);
    rightTailLight.drawCircle(-50, 20, 6);
    this.car.addChild(rightTailLight);

    // –ö—Ä—ã—à–∞ –º–∞—à–∏–Ω–∫–∏ (–∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∞–≤–∞—Ç–∞—Ä–∫–∏)
    const roof = new PIXI.Graphics();
    roof.beginFill(0xcc6600).drawRect(-30, -30, 60, 60).endFill();
    roof.lineStyle(2, 0x333333);
    roof.drawRect(-30, -30, 60, 60);
    this.car.addChild(roof);

    // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
    this.avatar = PIXI.Sprite.from('/public/shina.jpeg');
    this.avatar.anchor.set(0.5);
    this.avatar.width = 60;
    this.avatar.height = 60;
    this.car.addChild(this.avatar);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–≤–æ—Ç –º–∞—à–∏–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
    // car.position –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ü–µ–Ω—Ç—Ä –º–∞—à–∏–Ω—ã
    this.car.pivot.set(0, 0); // –ø–∏–≤–æ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ
    this.car.position.set(0, 0); // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
    this._isAtDestination = false;
    this.stayTimer = 0;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –º–∞—à–∏–Ω—ã
    if (options.carPath) {
      this.setPath(options.carPath);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É –Ω–∞ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –ø—É—Ç–∏ (–∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–µ)
    if (this.carPath.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0
      const initialRotation = (options.savedCarState && options.savedCarState.direction) || 0;
      this.car.rotation = initialRotation;
      if (this.avatar) {
        this.avatar.rotation = -initialRotation;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –≤ —Ç–æ—á–∫–µ –ø—É—Ç–∏
      const carLength = 120;
      const offsetX = -carLength / 2 * Math.cos(initialRotation);
      const offsetY = -carLength / 2 * Math.sin(initialRotation);
      this.car.position.set(this.carPath[0].x + offsetX, this.carPath[0].y + offsetY);
      console.log('Car starts at:', this.carPath[0], 'with rotation:', initialRotation);
    } else if (options.getDestinationCenter && options.getNearestIntersectionIJ && options.getIntersectionCoord) {
      // Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Ä–æ–≥—É –∫ –¥–æ–º—É
      const housePos = options.getDestinationCenter('house');
      const houseIJ = options.getNearestIntersectionIJ(housePos.x, housePos.y);
      const roadPos = options.getIntersectionCoord(houseIJ.i, houseIJ.j);
      const initialRotation = (options.savedCarState && options.savedCarState.direction) || 0;
      this.car.rotation = initialRotation;
      if (this.avatar) {
        this.avatar.rotation = -initialRotation;
      }
      const carLength = 120;
      const offsetX = -carLength / 2 * Math.cos(initialRotation);
      const offsetY = -carLength / 2 * Math.sin(initialRotation);
      this.car.position.set(roadPos.x + offsetX, roadPos.y + offsetY);
      console.log('Car fallback position:', roadPos, 'with rotation:', initialRotation);
    }

    return this.car;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∏ –∞–Ω–∏–º–∞—Ü–∏—é –º–∞—à–∏–Ω—ã
   * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param {Function} options.checkArrival - –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±—ã—Ç–∏—è
   * @param {Function} options.debugLog - –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param {Function} options.debugLogAlways - –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞)
   * @param {Object} options.carTrafficController - –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   * @param {Object} options.intersectionKeyToTL - –ö–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   * @param {Function} options.getVerticalRoadXs - –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
   * @param {Function} options.getHorizontalRoadYs - –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
   * @param {Function} options.buildCarPath - –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏
   * @param {Function} options.updateLightBeams - –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É—á–µ–π —Å–≤–µ—Ç–∞
   * @param {Object} options.debugInfo - –û–±—ä–µ–∫—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  updateCar(delta, options = {}) {
    const {
      checkArrival,
      debugLog,
      debugLogAlways,
      carTrafficController,
      intersectionKeyToTL,
      getVerticalRoadXs,
      getHorizontalRoadYs,
      buildCarPath,
      updateLightBeams,
      debugInfo
    } = options;

    if (debugInfo) {
      debugInfo.frameCount++;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
    if (this.pauseManager.isPaused()) {
      debugLog('üöó –ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –º–∞—à–∏–Ω–∞ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
    if (this._isAtDestination) {
      debugLog('üöó –ú–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      checkArrival(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      return;
    }

    const speed = this.BASE_CAR_SPEED * this.pauseManager.getSpeedMultiplier() * delta;
    debugLog('üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã', {
      speed: speed.toFixed(2),
      delta: delta.toFixed(3),
      position: `(${this.car.position.x.toFixed(1)}, ${this.car.position.y.toFixed(1)})`,
      rotation: `${(this.car.rotation * 180 / Math.PI).toFixed(1)}¬∞`,
      segment: `${this.carSegment}/${this.carPath.length - 1}`,
      isAtDestination: this._isAtDestination
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—É—Ç—å
    if (this.carPath.length < 2) {
      console.log('No valid path, rebuilding...');
      if (buildCarPath) {
        this.setPath(buildCarPath());
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.carSegment >= this.carPath.length) {
      console.log('Invalid segment, rebuilding path...');
      if (buildCarPath) {
        this.setPath(buildCarPath());
      }
      return;
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ carSegment –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (this.carSegment >= this.carPath.length - 1) {
      // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
      const finalX = this.carPath[this.carPath.length - 1].x;
      const finalY = this.carPath[this.carPath.length - 1].y;
      const carLength = 120;
      const offsetX = -carLength / 2 * Math.cos(this.car.rotation);
      const offsetY = -carLength / 2 * Math.sin(this.car.rotation);
      this.car.position.set(finalX + offsetX, finalY + offsetY);
      checkArrival();
      return;
    }

    let p1 = this.carPath[this.carSegment];
    let p2 = this.carPath[this.carSegment + 1];
    let dx = p2.x - p1.x;
    let dy = p2.y - p1.y;
    let segLen = Math.hypot(dx, dy);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if (segLen < 0.1) {
      this.carSegment++;
      this.carProgress = 0;
      return;
    }

    // üö¶ –ü–†–û–í–ï–†–ö–ê –°–í–ï–¢–û–§–û–†–ê –ü–ï–†–ï–î –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï–ú –ö –ü–ï–†–ï–ö–†–ï–°–¢–ö–£ üö¶
    if (carTrafficController && getVerticalRoadXs && getHorizontalRoadYs) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã
      const carLength = 120;
      const offsetX = carLength / 2 * Math.cos(this.car.rotation);
      const offsetY = carLength / 2 * Math.sin(this.car.rotation);
      const currentPos = {
        x: this.car.position.x + offsetX,
        y: this.car.position.y + offsetY
      };
      const targetIntersection = { x: p2.x, y: p2.y }; // —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
      const roadPositions = { 
        verticalRoadXs: getVerticalRoadXs(), 
        horizontalRoadYs: getHorizontalRoadYs() 
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
      const distanceToIntersection = Math.hypot(currentPos.x - targetIntersection.x, currentPos.y - targetIntersection.y);

      // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
      if (this.carSegment === 0 && this.carProgress < 20) {
        console.log(`üöó DEBUG: segment=${this.carSegment}, progress=${this.carProgress.toFixed(1)}, distance=${distanceToIntersection.toFixed(1)}, carPos=(${this.car.position.x.toFixed(0)},${this.car.position.y.toFixed(0)}), frontPos=(${currentPos.x.toFixed(0)},${currentPos.y.toFixed(0)}) to=(${targetIntersection.x},${targetIntersection.y})`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // 1. –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30-60 –ø–∏–∫—Å–µ–ª–µ–π –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞)
      // 2. –ò –ù–ï —Å—Ç–æ–∏–º –ø—Ä—è–º–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞ 
      if (distanceToIntersection <= 60 && distanceToIntersection > 15) { // –∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
        const trafficCheck = carTrafficController.checkTrafficLights(
          currentPos,
          targetIntersection,
          intersectionKeyToTL,
          roadPositions
        );

        if (!trafficCheck.canMove) {
          // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
          debugLogAlways(`üö¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∞—Å–Ω—ã–º —Å–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ (${targetIntersection.x}, ${targetIntersection.y}), distance=${distanceToIntersection.toFixed(1)}`);
          return; // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º carProgress - –º–∞—à–∏–Ω–∞ —Å—Ç–æ–∏—Ç
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
    this.carProgress += speed;
    debugLog('üöó –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É', {
      segment: this.carSegment,
      progress: this.carProgress.toFixed(1),
      segLen: segLen.toFixed(1),
      speed: speed.toFixed(2)
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –º—ã —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
    if (this.carProgress >= segLen) {
      debugLogAlways('üöó –ó–∞–≤–µ—Ä—à–µ–Ω —Å–µ–≥–º–µ–Ω—Ç', {
        segment: this.carSegment,
        progress: this.carProgress.toFixed(1),
        segLen: segLen.toFixed(1)
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
      this.carProgress = this.carProgress - segLen; // –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
      this.carSegment++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
      if (this.carSegment >= this.carPath.length - 1) {
        const finalX = this.carPath[this.carPath.length - 1].x;
        const finalY = this.carPath[this.carPath.length - 1].y;
        const carLength = 120;
        const offsetX = -carLength / 2 * Math.cos(this.car.rotation);
        const offsetY = -carLength / 2 * Math.sin(this.car.rotation);
        this.car.position.set(finalX + offsetX, finalY + offsetY);
        checkArrival();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      p1 = this.carPath[this.carSegment];
      p2 = this.carPath[this.carSegment + 1];
      dx = p2.x - p1.x;
      dy = p2.y - p1.y;
      segLen = Math.hypot(dx, dy);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ
    const t = segLen > 0 ? Math.min(1, this.carProgress / segLen) : 0;
    const newX = p1.x + dx * t;
    const newY = p1.y + dy * t;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    if (Math.abs(dx) > 0.1 || Math.abs(dy) > 0.1) {
      const targetRotation = Math.atan2(dy, dx);
      const oldRotation = this.car.rotation;
      this.car.rotation = targetRotation;
      if (this.avatar) {
        this.avatar.rotation = -targetRotation;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á–∏ —Å–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ
      if (this.car.leftLightBeam && this.car.rightLightBeam && updateLightBeams && typeof updateLightBeams === 'function') {
        updateLightBeams();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π
      const rotationDiff = Math.abs(targetRotation - oldRotation);
      if (rotationDiff > 0.1) {
        debugLogAlways('üöó –ü–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω—ã', {
          oldRotation: (oldRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          newRotation: (targetRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          diff: (rotationDiff * 180 / Math.PI).toFixed(1) + '¬∞'
        });
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –≤ —Ç–æ—á–∫–µ –ø—É—Ç–∏
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(this.car.rotation);
    const offsetY = -carLength / 2 * Math.sin(this.car.rotation);
    this.car.position.set(newX + offsetX, newY + offsetY);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –º–∞—à–∏–Ω—ã
   * @param {Array} path - –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  setPath(path) {
    this.carPath = path;
    this.carSegment = 0;
    this.carProgress = 0;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–∞—à–∏–Ω—É
   * @returns {PIXI.Container} –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –º–∞—à–∏–Ω–æ–π
   */
  getCar() {
    return this.car;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É
   * @returns {PIXI.Sprite} –°–ø—Ä–∞–π—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  getAvatar() {
    return this.avatar;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–∞—à–∏–Ω—ã
   * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   */
  setPosition(x, y) {
    if (this.car) {
      this.car.position.set(x, y);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω—ã
   * @param {number} rotation - –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
   */
  setRotation(rotation) {
    if (this.car) {
      this.car.rotation = rotation;
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫—É
   * @param {boolean} visible - –í–∏–¥–∏–º–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  setAvatarVisible(visible) {
    if (this.avatar) {
      this.avatar.visible = visible;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è
   * @param {boolean} isAtDestination - –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  setAtDestination(isAtDestination) {
    this._isAtDestination = isAtDestination;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è
   * @returns {boolean} –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  isAtDestination() {
    return this._isAtDestination;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –ø—É—Ç–∏
   * @returns {number} –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  getCurrentSegment() {
    return this.carSegment;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
   * @returns {number} –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
   */
  getProgress() {
    return this.carProgress;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
   * @returns {Array} –ú–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  getPath() {
    return this.carPath;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
   * @param {number} timer - –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
   */
  setStayTimer(timer) {
    this.stayTimer = timer;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
   * @returns {number} –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
   */
  getStayTimer() {
    return this.stayTimer;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
   * @param {number} delta - –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
   */
  updateStayTimer(delta) {
    this.stayTimer += delta;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { CarRenderer };

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ –¥–Ω—è/–Ω–æ—á–∏
export class DayNightManager {
  constructor(PIXI, config, worldRenderer) {
    this.PIXI = PIXI;
    this.config = config;
    this.worldRenderer = worldRenderer; // –ü–æ–ª—É—á–∞–µ–º WorldRenderer –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ—è–º
    this.dayNightMode = 'auto'; // 'auto', 'day', 'night'
    this.isNightMode = false;
    this.cityNightOverlay = null;
    this.currentCityNightAlpha = 0;
    this.nightTransitionSpeed = 0.02;
    
    this.loadSettings();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage
  loadSettings() {
    const savedMode = localStorage.getItem('shina-game-daynight-mode');
    if (savedMode && ['auto', 'day', 'night'].includes(savedMode)) {
      this.dayNightMode = savedMode;
      console.log(`üåÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–∂–∏–º –¥–Ω—è/–Ω–æ—á–∏: ${this.dayNightMode}`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  saveSettings() {
    localStorage.setItem('shina-game-daynight-mode', this.dayNightMode);
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–æ—á–Ω–æ–µ –ª–∏ –≤—Ä–µ–º—è
  isNightTime(gameTime) {
    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (this.dayNightMode === 'night') return true;
    if (this.dayNightMode === 'day') return false;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
    const hour = gameTime.hours;
    // –ù–æ—á—å —Å 20:00 –¥–æ 06:00
    return hour >= 20 || hour < 6;
  }

  // –°–æ–∑–¥–∞—Ç—å –æ–≤–µ—Ä–ª–µ–π –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  createCityNightOverlay() {
    if (this.cityNightOverlay) return this.cityNightOverlay;

    console.log('üåô –°–æ–∑–¥–∞–µ–º –Ω–æ—á–Ω–æ–π –æ–≤–µ—Ä–ª–µ–π...');
    this.cityNightOverlay = new this.PIXI.Container();

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π
    const overlay = new this.PIXI.Graphics();
    overlay.beginFill(0x0d1b69, 0.8); // –±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Å–∏–Ω–∏–π
    overlay.drawRect(0, 0, this.config.WORLD_WIDTH, this.config.WORLD_HEIGHT);
    overlay.endFill();
    this.cityNightOverlay.addChild(overlay);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ–º—É —Å–Ω–∏–∑—É (–∏–º–∏—Ç–∞—Ü–∏—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è)
    const gradient = new this.PIXI.Graphics();
    for (let i = 0; i < 20; i++) {
      const alpha = (1 - i / 20) * 0.3;
      gradient.beginFill(0x2c3e50, alpha);
      gradient.drawRect(0, this.config.WORLD_HEIGHT - i * 10, this.config.WORLD_WIDTH, 10);
      gradient.endFill();
    }
    this.cityNightOverlay.addChild(gradient);

    this.cityNightOverlay.alpha = 0;
    this.cityNightOverlay.zIndex = 400; // –ø–æ–≤–µ—Ä—Ö –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Å–ª–æ–µ–≤, –Ω–æ –ø–æ–¥ –º–∞—à–∏–Ω–æ–π –∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞–º–∏

    return this.cityNightOverlay;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
  updateNightMode(gameTime) {
    const shouldBeNight = this.isNightTime(gameTime);

    if (shouldBeNight !== this.isNightMode) {
      this.isNightMode = shouldBeNight;
      console.log(`üåô ${this.isNightMode ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'} –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º (${gameTime.hours}:${Math.floor(gameTime.minutes).toString().padStart(2, '0')})`);
    }

    if (!this.cityNightOverlay) {
      this.createCityNightOverlay();
    }

    // –ï—Å–ª–∏ –æ–≤–µ—Ä–ª–µ–π —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (this.cityNightOverlay && !this.cityNightOverlay.parent) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º worldRenderer –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ—è–º
      if (this.worldRenderer) {
        const world = this.worldRenderer.getWorldContainer();
        const decorLayer = this.worldRenderer.getDecorLayer();
        const trafficLightsLayer = this.worldRenderer.getTrafficLightsLayer();
        
        if (world) {
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–≤–µ—Ä–ª–µ–π –ø–µ—Ä–µ–¥ decorLayer (–º–∞—à–∏–Ω–æ–π) –∏ trafficLightsLayer
          const decorLayerIndex = world.children.findIndex(child => child === decorLayer);
          const trafficLightsLayerIndex = world.children.findIndex(child => child === trafficLightsLayer);
          
          // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–¥ –º–∞—à–∏–Ω–æ–π –∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞–º–∏)
          const insertIndex = Math.min(
            decorLayerIndex >= 0 ? decorLayerIndex : world.children.length,
            trafficLightsLayerIndex >= 0 ? trafficLightsLayerIndex : world.children.length
          );
          
          world.addChildAt(this.cityNightOverlay, insertIndex);
          console.log('üåô –ù–æ—á–Ω–æ–π –æ–≤–µ—Ä–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ');
        } else {
          console.warn('‚ö†Ô∏è world –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π');
          return;
        }
      } else {
        console.warn('‚ö†Ô∏è worldRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π');
        return;
      }
    }

    if (!this.isOverlayReady()) {
      console.warn('‚ö†Ô∏è cityNightOverlay –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É');
      return;
    }

    // –ü–ª–∞–≤–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
    const targetAlpha = this.isNightMode ? 0.7 : 0;
    const alphaDiff = targetAlpha - this.currentCityNightAlpha;

    if (Math.abs(alphaDiff) > 0.001) {
      this.currentCityNightAlpha += alphaDiff * this.nightTransitionSpeed;
      this.currentCityNightAlpha = Math.max(0, Math.min(1, this.currentCityNightAlpha));
      this.cityNightOverlay.alpha = this.currentCityNightAlpha;
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è/–Ω–æ—á–∏
  toggleDayNightMode() {
    const modes = ['auto', 'day', 'night'];
    const currentIndex = modes.indexOf(this.dayNightMode);
    const nextIndex = (currentIndex + 1) % modes.length;
    this.dayNightMode = modes[nextIndex];
    this.saveSettings();
    
    console.log(`üåÖ –†–µ–∂–∏–º –¥–Ω—è/–Ω–æ—á–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.dayNightMode}`);
    this.updateDayNightModeText();
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ –¥–Ω—è/–Ω–æ—á–∏ –≤ –º–µ–Ω—é
  updateDayNightModeText() {
    const dayNightTextElement = document.getElementById('daynight-mode-text');
    if (dayNightTextElement) {
      const modeTexts = {
        'auto': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π',
        'day': '–î–µ–Ω—å',
        'night': '–ù–æ—á—å'
      };
      dayNightTextElement.textContent = modeTexts[this.dayNightMode];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
  getCurrentMode() {
    return this.dayNightMode;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
  isNightModeActive() {
    return this.isNightMode;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–≤–µ—Ä–ª–µ–π –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  getNightOverlay() {
    return this.cityNightOverlay;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–≤–µ—Ä–ª–µ–π —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É
  isOverlayReady() {
    return this.cityNightOverlay && this.cityNightOverlay.parent;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
  setTransitionSpeed(speed) {
    this.nightTransitionSpeed = speed;
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
  applyNightColorFilter() {
    if (!this.isNightMode) return;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–≥–ª—É—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∫–æ –≤—Å–µ–º —Å–ª–æ—è–º
    const nightTint = 0x4a4a6a; // –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–∏–Ω–µ–≤–∞—Ç—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
    const nightAlpha = 0.3; // —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–∏–≥–ª—É—à–µ–Ω–∏—è

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ª–æ—è–º —á–µ—Ä–µ–∑ worldRenderer
    if (this.worldRenderer) {
      const roadsLayer = this.worldRenderer.getRoadsLayer();
      const lotsLayer = this.worldRenderer.getLotsLayer();
      const zonesLayer = this.worldRenderer.getZonesLayer();
      const labelsLayer = this.worldRenderer.getLabelsLayer();
      
      if (roadsLayer) {
        roadsLayer.tint = nightTint;
        roadsLayer.alpha = 1 - nightAlpha;
      }
      if (lotsLayer) {
        lotsLayer.tint = nightTint;
        lotsLayer.alpha = 1 - nightAlpha;
      }
      if (zonesLayer) {
        zonesLayer.tint = nightTint;
        zonesLayer.alpha = 1 - nightAlpha;
      }
      if (labelsLayer) {
        labelsLayer.tint = nightTint;
        labelsLayer.alpha = 1 - nightAlpha;
      }
    }
  }

  // –°–±—Ä–æ—Å–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
  resetDayColorFilter() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ worldRenderer
    if (this.worldRenderer) {
      const roadsLayer = this.worldRenderer.getRoadsLayer();
      const lotsLayer = this.worldRenderer.getLotsLayer();
      const zonesLayer = this.worldRenderer.getZonesLayer();
      const labelsLayer = this.worldRenderer.getLabelsLayer();
      
      if (roadsLayer) {
        roadsLayer.tint = 0xffffff;
        roadsLayer.alpha = 1;
      }
      if (lotsLayer) {
        lotsLayer.tint = 0xffffff;
        lotsLayer.alpha = 1;
      }
      if (zonesLayer) {
        zonesLayer.tint = 0xffffff;
        zonesLayer.alpha = 1;
      }
      if (labelsLayer) {
        labelsLayer.tint = 0xffffff;
        labelsLayer.alpha = 1;
      }
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ –≤ —Å–ª–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è
  addLightSource(lightObject) {
    if (this.worldRenderer) {
      const lightingLayer = this.worldRenderer.getLightingLayer();
      if (lightingLayer) {
        lightingLayer.addChild(lightObject);
        console.log('üí° –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è');
      }
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ –∏–∑ —Å–ª–æ—è –æ—Å–≤–µ—â–µ–Ω–∏—è
  removeLightSource(lightObject) {
    if (this.worldRenderer) {
      const lightingLayer = this.worldRenderer.getLightingLayer();
      if (lightingLayer && lightObject.parent) {
        lightObject.parent.removeChild(lightObject);
        console.log('üí° –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ª–æ—è –æ—Å–≤–µ—â–µ–Ω–∏—è');
      }
    }
  }
}

import { TimeManager } from './TimeManager.js';
import { PauseManager } from './PauseManager.js';
import { DayNightManager } from './DayNightManager.js';
import { JournalManager } from './JournalManager.js';
import StateManager from './StateManager.js';
import DependencyContainer from './DependencyContainer.js';
import { WorldRenderer } from '../rendering/WorldRenderer.js';
import { UIRenderer } from '../rendering/UIRenderer.js';
import { CarRenderer } from '../rendering/CarRenderer.js';
import { ShinaRenderer } from '../rendering/ShinaRenderer.js';
import { Car } from '../entities/Car.js';
import { Shina } from '../entities/Shina.js';
import { CarTrafficController } from '../systems/carTrafficControl.js';
import { PathBuilder } from '../systems/PathBuilder.js';
import { CONFIG } from '../config/gameConfig.js';
import { initTrafficLightsForIntersection, TrafficLightCoordinator } from '../systems/trafficLights.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ü–∏–∫–ª–æ–º
 */
class Game {
    constructor() {
        console.log('Game constructor called');
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.dependencies = new DependencyContainer();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        this.dependencies.register('config', CONFIG);
        this.dependencies.register('debugLog', () => this.debugLog.bind(this));
        this.dependencies.register('debugLogAlways', () => this.debugLogAlways.bind(this));
        this.dependencies.register('debugInfo', () => this.debugInfo);
        
        // –°–æ–∑–¥–∞–µ–º PIXI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.app = new PIXI.Application({
            width: 1200,
            height: 800,
            autoDensity: true,
            resolution: window.devicePixelRatio || 1,
            backgroundColor: 0x3a6f3e
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º canvas –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
        const gameContainer = document.querySelector('.game-container');
        gameContainer.appendChild(this.app.view);
        
        // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
        this.app.stage.eventMode = 'static';
        this.app.stage.hitArea = new PIXI.Rectangle(0, 0, 1200, 800);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∏—Ä–∞ –∏ –≤—Å–µ —Å–ª–æ–∏
        this.world = new PIXI.Container();
        this.app.stage.addChild(this.world);
        
        this.gridLayer = new PIXI.Container();
        this.roadsLayer = new PIXI.Container();
        this.lotsLayer = new PIXI.Container();
        this.zonesLayer = new PIXI.Container();
        this.labelsLayer = new PIXI.Container();
        this.intersectionsLayer = new PIXI.Container();
        this.decorLayer = new PIXI.Container();
        this.trafficLightsLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ (–ø–æ–≤–µ—Ä—Ö –º–∞—à–∏–Ω)
        this.borderLayer = new PIXI.Container();
        this.lightingLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞ (–ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
        this.uiLayer = new PIXI.Container();
        
        // –î–µ–ª–∞–µ–º world –∏ —Å–ª–æ–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è dayNightManager
        // (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ dayNightManager)
        window.world = this.world;
        window.decorLayer = this.decorLayer;
        window.trafficLightsLayer = this.trafficLightsLayer;
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.stateManager = new StateManager();
        this.timeManager = new TimeManager();
        this.pauseManager = new PauseManager();
        this.journalManager = new JournalManager(this.timeManager);
        // dayNightManager –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ init() –ø–æ—Å–ª–µ worldRenderer
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.timeManager.setSpeedMultiplier(this.pauseManager.getSpeedMultiplier());
        this.timeManager.setPaused(this.pauseManager.isPaused());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∂—É—Ä–Ω–∞–ª–µ
        this.journalManager.setLocationStartTime('–î–æ–º');
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
        this.worldRenderer = new WorldRenderer(this.dependencies.get('config'), this.app);
        // UIRenderer –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ init() –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ panningController
        
        // –°–æ–∑–¥–∞–µ–º dayNightManager –ø–æ—Å–ª–µ worldRenderer
        this.dayNightManager = new DayNightManager(PIXI, this.dependencies.get('config'), this.worldRenderer);
        
        // –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        this.carEntity = new Car(this.dependencies.get('config'), this.pauseManager);
        this.shinaEntity = new Shina(this.dependencies.get('config'));
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –®–∏–Ω—ã
        this.shinaRenderer = new ShinaRenderer(this.dependencies.get('config'), this.pauseManager);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∑–æ–Ω
        this.zoneGeometry = new Map(); // key -> { center:{x,y}, bounds:{x,y,w,h} | {x,y,r}, type }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ StateManager
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–∫–∏
        this.DEBUG_MODE = true; // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
        this.debugInfo = {
            frameCount: 0,
            lastLogTime: 0,
            logInterval: 1000 // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        };
        
        // –î–µ–ª–∞–µ–º carEntity –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è UI (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞)
        // TODO: —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ UI
        window.carEntity = this.carEntity;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º carEntity (–±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ–ª–Ω–∞—è –±—É–¥–µ—Ç –≤ main.js)
        this.carEntity.init({
            currentRouteIndex: 0, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ main.js
            savedState: null, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ main.js
            onArrival: (destination) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–±—ã–ª–∞ –≤ ${destination.name}`);
                // TODO: –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ Game.js –ø–æ–∑–∂–µ
            },
            onStateChange: (event, data) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞: ${event}`, data);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º shinaEntity
        this.shinaEntity.init({
            position: { x: 0, y: 0 },
            initialState: 'atWork', // –®–∏–Ω–∞ –¥–æ–º–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            onStateChange: (oldState, newState, shina) => {
                console.log(`üë§ –®–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${oldState} ‚Üí ${newState}`);
            },
            onAvailabilityChange: (isAvailable, shina) => {
                console.log(`üë§ –®–∏–Ω–∞ ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
            },
            onMessageReceived: (message, shina) => {
                console.log(`üí¨ –®–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message);
            }
        });

    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤, —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UI)
     */
    async init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
        // currentRouteIndex —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ stateManager
        // savedCarState —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ stateManager
        this.intersectionKeyToTL = new Map();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º intersectionKeyToTL –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        this.dependencies.register('intersectionKeyToTL', this.intersectionKeyToTL);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
        this.trafficCoordinator = new TrafficLightCoordinator(45); // —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—à–∏–Ω ~45 –∫–º/—á
        this.dependencies.register('trafficCoordinator', this.trafficCoordinator);
        // TODO: —É–±—Ä–∞—Ç—å window.trafficCoordinator –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        window.trafficCoordinator = this.trafficCoordinator;
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
        this.TRAFFIC_LIGHTS_CONFIG = [
            'A2',              // –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ä–µ–∑–¥ –≤ –≥–æ—Ä–æ–¥) - —É–±—Ä–∞–Ω A3
            'B2',              // –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω B4
            'C3',              // —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω C1
            'D2', 'D4',        // —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü
            'E1',              // –ø—è—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω E3
            'F2', 'F4',        // —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü
            'G1', 'G3', 'G4'   // –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ã–µ–∑–¥ –∏–∑ –≥–æ—Ä–æ–¥–∞) - —É–±—Ä–∞–Ω G2
        ];
        window.TRAFFIC_LIGHTS_CONFIG = this.TRAFFIC_LIGHTS_CONFIG;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        // –î–µ–ª–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        // TODO: —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        window.CONFIG = this.dependencies.get('config');
        window.debugLog = this.dependencies.get('debugLog');
        window.debugLogAlways = this.dependencies.get('debugLogAlways');
        window.debugInfo = this.dependencies.get('debugInfo');
        // currentRouteIndex —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ stateManager
        // TODO: —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ savedCarState –≤ window
        window.savedCarState = this.stateManager.getSavedCarState();
        window.zoneGeometry = this.zoneGeometry;
        
        // –°–æ–∑–¥–∞–µ–º CarTrafficController –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const carTrafficController = new CarTrafficController();
        this.dependencies.register('carTrafficController', carTrafficController);
        
        // –°–æ–∑–¥–∞–µ–º PanningController –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const { PanningController } = await import('../systems/panning.js');
        if (PanningController) {
            const panningController = new PanningController();
            panningController.setWorld(this.world);
            panningController.setOnZoomChange((scale) => {
                if (this.uiRenderer) {
                    this.uiRenderer.updateZoomButton();
                }
            });
            panningController.setOnFullscreenChange((isFullscreen) => {
                if (this.uiRenderer) {
                    this.uiRenderer.updateZoomButton();
                }
            });
            this.dependencies.register('panningController', panningController);
            // TODO: —É–±—Ä–∞—Ç—å window.panningController –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            window.panningController = panningController;
        }
        
        // –°–æ–∑–¥–∞–µ–º UIRenderer –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ panningController
        const panningController = this.dependencies.has('panningController') ? this.dependencies.get('panningController') : null;
        this.uiRenderer = new UIRenderer(this.dependencies.get('config'), this.timeManager, this.pauseManager, this.dayNightManager, panningController, this.journalManager, this.carEntity);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∏—Ä
        this._setupWorld(this.intersectionKeyToTL);
        
        // –°–æ–∑–¥–∞–µ–º PathBuilder –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WorldRenderer
        const verticalRoadXs = this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [];
        const horizontalRoadYs = this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [];
        const pathBuilder = new PathBuilder(verticalRoadXs, horizontalRoadYs, this.dependencies.get('config'));
        this.dependencies.register('pathBuilder', pathBuilder);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        this.uiRenderer.init();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ –¥–Ω—è/–Ω–æ—á–∏ –∏ –ø–∞—É–∑—ã –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            this.dayNightManager.updateDayNightModeText();
            this.pauseManager.updatePauseModeText();
        }, 100);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—É
        const carData = this._createCar(this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this.intersectionKeyToTL, this.uiRenderer, this.debugLogAlways.bind(this));
        this.carRenderer = carData.carRenderer;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
        this._layout(null, this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this.carRenderer);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this._layout(null, this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this.carRenderer);
            
            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            const panningController = this.dependencies.get('panningController');
            if (panningController && panningController.isFullscreenMode()) {
                panningController.toggleFullscreen(); // –≤—ã–∫–ª—é—á–∞–µ–º
                panningController.toggleFullscreen(); // –≤–∫–ª—é—á–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            }
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
        const gameContainer = document.querySelector('.game-container');
        gameContainer.style.width = '1200px';
        gameContainer.style.height = '800px';
        gameContainer.style.overflow = 'auto';
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    start() {
        console.log('Game start() called');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        this.app.ticker.add((delta) => this.update(delta));
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
     * @param {number} delta - –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    update(delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        this.timeManager.update();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        if (this.uiRenderer) {
            this.uiRenderer.updateDateTimeDisplay();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
        const gameTime = this.timeManager.getGameTime();
        this.dayNightManager.updateNightMode(gameTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI (–≤–∫–ª—é—á–∞—è –∂—É—Ä–Ω–∞–ª)
        if (this.uiRenderer) {
            this.uiRenderer.update();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É (–≤–∫–ª—é—á–∞—è —Å—É—â–Ω–æ—Å—Ç–∏)
        this._updateCar(delta);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
        this.updateStayTimer();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞—à–∏–Ω—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
     * @param {number} delta - –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    _updateCar(delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        this.updateEntities(delta);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º game.carEntity —Å carRenderer –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        if (this.carEntity && this.carRenderer) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            this.carRenderer.updateVisuals(this.carEntity.getViewState());
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å game.carEntity (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã)
            const carPath = this.carEntity.getPath();
            const carSegment = this.carEntity.getCurrentSegment();
            const carProgress = this.carEntity.getProgress();
            const stayTimer = this.carEntity.getStayTimer();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (this.uiRenderer) {
            this.uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
     * @param {number} delta - –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    updateEntities(delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
        if (this.carEntity) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            const carTrafficController = this.dependencies.get('carTrafficController');
            const intersectionKeyToTL = this.dependencies.get('intersectionKeyToTL');
            const pathBuilder = this.dependencies.get('pathBuilder');
            const debugLog = this.debugLog.bind(this);
            const debugLogAlways = this.debugLogAlways.bind(this);
            const debugInfo = this.debugInfo;
            
            this.carEntity.update(delta, {
                checkArrival: () => this.checkArrival(),
                debugLog: debugLog,
                debugLogAlways: debugLogAlways,
                carTrafficController: carTrafficController,
                intersectionKeyToTL: intersectionKeyToTL,
                getVerticalRoadXs: () => this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [],
                getHorizontalRoadYs: () => this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [],
                buildCarPath: () => pathBuilder ? pathBuilder.buildCarPath(this.carEntity, this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this._getDestinationCenter.bind(this), debugLogAlways) : [],
                updateLightBeams: undefined,
                debugInfo: debugInfo
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –®–∏–Ω—É
        if (this.shinaEntity) {
            this.shinaEntity.update({
                timeManager: this.timeManager,
                debugLog: this.debugLog.bind(this)
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –®–∏–Ω—ã
            if (this.shinaRenderer) {
                this.shinaRenderer.updateVisuals(this.shinaEntity.getViewState());
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã (–ø—É—Å—Ç–æ–π —Ü–∏–∫–ª –∏–∑ main.js)
        const intersectionKeyToTL = this.dependencies.get('intersectionKeyToTL');
        if (intersectionKeyToTL) {
            intersectionKeyToTL.forEach((trafficLight, key) => {
                // –ü—É—Å—Ç–æ–π —Ü–∏–∫–ª - —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ app.ticker
                // –ù–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                if (trafficLight && typeof trafficLight.isPassAllowed === 'function') {
                    // –°–≤–µ—Ç–æ—Ñ–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                }
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
     */
    updateStayTimer() {
        if (this.carEntity && this.carEntity.isAtDestination()) {
            const gameTime = this.timeManager.getGameTime();
            const currentStayDuration = this.carEntity.getStayTimer();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º StateManager –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            const newStayTimer = this.stateManager.updateStayTimer(gameTime, currentStayDuration);
            this.carEntity.setStayTimer(newStayTimer);
            
            if (newStayTimer <= 0) {
                // –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –µ–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
                console.log('üöó –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ');
                this.nextDestination();
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞
     */
    nextDestination() {
        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ stateManager
        const currentRouteIndex = this.stateManager.getCurrentRouteIndex();
        const CONFIG = this.dependencies.get('config');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        if (this.journalManager && currentDest) {
            this.journalManager.endLocationStay(currentDest.name);
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∑–¥–∞–Ω–∏–∏
        this.hideBuildingAvatar();

        const newRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
        this.stateManager.setCurrentRouteIndex(newRouteIndex);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
        if (this.uiRenderer) {
            this.uiRenderer.setCurrentRouteIndex(newRouteIndex);
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
        if (this.carEntity) {
            this.carEntity.setCurrentRouteIndex(newRouteIndex);
            this.carEntity.setAtDestination(false);
            this.carEntity.setStayTimer(0);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            const pathBuilder = this.dependencies.get('pathBuilder');
            if (pathBuilder) {
                const newPath = pathBuilder.buildCarPath(this.carEntity, newRouteIndex, this.stateManager.getSavedCarState(), this._getDestinationCenter.bind(this), this.debugLogAlways.bind(this));
                this.carEntity.setPath(newPath);
            }
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è
        const newDest = CONFIG.ROUTE_SCHEDULE[newRouteIndex];
        if (this.journalManager && newDest) {
            this.journalManager.startTrip(newDest.name, newDest.location);
        }

        this.uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    checkArrival() {
        const currentRouteIndex = this.stateManager.getCurrentRouteIndex();
        const CONFIG = this.dependencies.get('config');
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        
        if (this.carEntity && !this.carEntity.isAtDestination()) {
            console.log(`üè† –ü—Ä–∏–±—ã—Ç–∏–µ –≤ ${currentDest.name} (–æ–±–æ—á–∏–Ω–∞)`);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–¥–∞–Ω–∏–µ
            if (this.journalManager && currentDest) {
                this.journalManager.endTrip(currentDest.name);
                this.journalManager.setLocationStartTime(currentDest.name);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            const savedCarState = this.saveCarStateForNextDestination();
            this.stateManager.setSavedCarState(savedCarState);
            // TODO: —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ window –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
            window.savedCarState = savedCarState;
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, savedCarState);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
            if (this.carEntity) {
                this.carEntity.setAtDestination(true);
                this.carEntity.setStayTimer(currentDest.stayHours);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ StateManager
            this.uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
            this.showBuildingAvatar(currentDest.location);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
     */
    saveCarStateForNextDestination() {
        const currentRouteIndex = this.stateManager.getCurrentRouteIndex();
        const CONFIG = this.dependencies.get('config');
        const nextRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
        const nextDestination = CONFIG.ROUTE_SCHEDULE[nextRouteIndex];

        if (!nextDestination) return null;

        const nextDestCenter = this._getDestinationCenter(nextDestination.location);

        // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
        const carRenderer = this.carRenderer;
        const pathBuilder = this.dependencies.get('pathBuilder');
        if (!carRenderer || !pathBuilder) return null;
        
        const currentPos = carRenderer.getCar().position;
        const currentIJ = pathBuilder.getNearestIntersectionIJ(currentPos.x, currentPos.y);
        const nextPath = pathBuilder.buildPathToBuilding(currentIJ, nextDestCenter);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –≤ –ø—É—Ç–∏ (–Ω–µ —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è)
        let nextIntersection = null;
        if (nextPath.length >= 2) {
            // –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è - —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É –∑–¥–∞–Ω–∏—è)
            nextIntersection = nextPath[nextPath.length - 2];
        } else if (nextPath.length === 1) {
            // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            nextIntersection = nextPath[0];
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ fallback
        let direction;
        if (nextIntersection) {
            const dx = nextIntersection.x - currentPos.x;
            const dy = nextIntersection.y - currentPos.y;
            direction = Math.atan2(dy, dx);
            console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫: (${nextIntersection.x}, ${nextIntersection.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
        } else {
            const dx = nextDestCenter.x - currentPos.x;
            const dy = nextDestCenter.y - currentPos.y;
            direction = Math.atan2(dy, dx);
            console.log(`üéØ Fallback –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: (${nextDestCenter.x}, ${nextDestCenter.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
        }

        return {
            nextDestination: nextDestination,
            nextDestCenter: nextDestCenter,
            nextIntersection: nextIntersection,
            direction: direction,
            currentPosition: { x: currentPos.x, y: currentPos.y }
        };
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
     */
    showBuildingAvatar(locationKey) {
        const buildingCenter = this._getDestinationCenter(locationKey);
        if (!buildingCenter) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –º–∞—à–∏–Ω–∫–∏
        const carRenderer = this.carRenderer;
        if (carRenderer) {
            carRenderer.setAvatarVisible(false);
        }

        const avatarContainer = new PIXI.Container();

        // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ–Ω (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
        const background = new PIXI.Graphics();
        background.beginFill(0xffffff, 0.9);
        background.lineStyle(2, 0x333333);
        background.drawRect(-30, -30, 60, 60);
        background.endFill();
        avatarContainer.addChild(background);

        // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
        const buildingAvatar = PIXI.Sprite.from('/public/shina.jpeg');
        buildingAvatar.anchor.set(0.5);
        buildingAvatar.width = 60;
        buildingAvatar.height = 60;
        avatarContainer.addChild(buildingAvatar);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∑–¥–∞–Ω–∏—è
        const zoneGeometry = this.zoneGeometry;
        const zone = zoneGeometry ? zoneGeometry.get(locationKey) : null;
        if (zone && zone.bounds) {
            if (zone.type === 'circle') {
                // –î–ª—è –∫—Ä—É–≥–ª—ã—Ö –∑–æ–Ω (–∏–Ω—Å—Ç–∏—Ç—É—Ç) - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                avatarContainer.position.set(
                    zone.bounds.x + zone.bounds.r - 30,
                    zone.bounds.y + zone.bounds.r - 30
                );
            } else {
                // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∑–æ–Ω
                avatarContainer.position.set(
                    zone.bounds.x + zone.bounds.w - 30,
                    zone.bounds.y + zone.bounds.h - 30
                );
            }
        } else {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è
            avatarContainer.position.set(
                buildingCenter.x + 150,
                buildingCenter.y + 150
            );
        }

        this.decorLayer.addChild(avatarContainer);
        if (!this.buildingAvatars) {
            this.buildingAvatars = new Map();
        }
        this.buildingAvatars.set(locationKey, avatarContainer);

        console.log(`üè† –ü–æ–∫–∞–∑–∞–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${locationKey}`, {
            zone: zone,
            buildingCenter: buildingCenter,
            position: avatarContainer.position
        });
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
     */
    hideBuildingAvatar() {
        const currentRouteIndex = this.stateManager.getCurrentRouteIndex();
        const CONFIG = this.dependencies.get('config');
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        
        if (this.buildingAvatars) {
            const avatarContainer = this.buildingAvatars.get(currentDest.location);
            if (avatarContainer && avatarContainer.parent) {
                avatarContainer.parent.removeChild(avatarContainer);
                this.buildingAvatars.delete(currentDest.location);
                console.log(`üè† –°–∫—Ä—ã—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${currentDest.location}`);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—à–∏–Ω–∫–µ
        const carRenderer = this.carRenderer;
        if (carRenderer) {
            carRenderer.setAvatarVisible(true);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
     * @returns {Array} –º–∞—Å—Å–∏–≤ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    _getHorizontalRoadYs() {
        return this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
     * @returns {Array} –º–∞—Å—Å–∏–≤ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    _getVerticalRoadXs() {
        return this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É –ª–æ–∫–∞—Ü–∏–∏
     * @param {string} locationKey - –∫–ª—é—á –ª–æ–∫–∞—Ü–∏–∏
     * @returns {Object} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ {x, y}
     */
    _getDestinationCenter(locationKey) {
        const z = this.zoneGeometry.get(locationKey);
        if (z && z.center) return z.center;
        // fallback: –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const CONFIG = this.dependencies.get('config');
        const def = CONFIG.ZONES[locationKey];
        const verticalRoadXs = this._getVerticalRoadXs();
        const horizontalRoadYs = this._getHorizontalRoadYs();
        if (!def) return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
        if (def.type === 'rect') return { x: def.x + def.w / 2, y: def.y + def.h / 2 };
        if (def.type === 'circle') return { x: def.x, y: def.y };
        return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
     * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
     * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
     * @param {Object} carRenderer - —Ä–µ–Ω–¥–µ—Ä–µ—Ä –º–∞—à–∏–Ω—ã
     */
    _initEntities(currentRouteIndex, savedCarState, carRenderer) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é carEntity —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        this.carEntity.init({
            // currentRouteIndex —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ stateManager
            savedState: savedCarState,
            onArrival: (destination) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–±—ã–ª–∞ –≤ ${destination.name}`);
                this.checkArrival();
            },
            onStateChange: (event, data) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞: ${event}`, data);
            }
        });

        // –°–≤—è–∑—ã–≤–∞–µ–º carEntity —Å carRenderer
        if (carRenderer) {
            const carSprite = carRenderer.getCar();
            const avatar = carRenderer.getAvatar();
            
            if (carSprite) {
                this.carEntity.setSprite(carSprite);
            }
            if (avatar) {
                this.carEntity.setAvatar(avatar);
            }
            
            if (carSprite) {
                this.carEntity.setPosition({ x: carSprite.position.x, y: carSprite.position.y });
                this.carEntity.setRotation(carSprite.rotation);
            }
        }

        // shinaEntity —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏—Ä –∏–≥—Ä—ã (—Å–ª–æ–∏, —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã, UI)
     * @param {Map} intersectionKeyToTL - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     */
    _setupWorld(intersectionKeyToTL) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–∏ –∏–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–≥—Ä—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ this
        const world = this.world;
        const gridLayer = this.gridLayer;
        const roadsLayer = this.roadsLayer;
        const lotsLayer = this.lotsLayer;
        const zonesLayer = this.zonesLayer;
        const labelsLayer = this.labelsLayer;
        const intersectionsLayer = this.intersectionsLayer;
        const decorLayer = this.decorLayer;
        const trafficLightsLayer = this.trafficLightsLayer;
        const borderLayer = this.borderLayer;
        const lightingLayer = this.lightingLayer;
        const uiLayer = this.uiLayer;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WorldRenderer —Å —Å–ª–æ—è–º–∏
        this.worldRenderer.init(world, {
            grid: gridLayer,
            roads: roadsLayer,
            lots: lotsLayer,
            zones: zonesLayer,
            intersections: intersectionsLayer,
            trafficLights: trafficLightsLayer,
            labels: labelsLayer,
            decor: decorLayer,
            border: borderLayer
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
        world.addChild(gridLayer);
        world.addChild(roadsLayer);
        world.addChild(intersectionsLayer);
        world.addChild(lotsLayer);
        world.addChild(zonesLayer);
        world.addChild(labelsLayer);
        world.addChild(borderLayer);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorldRenderer –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.worldRenderer.render(this.zoneGeometry);
        // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ª–æ–µ (–ø–æ–∫–∞ —á—Ç–æ –≤ trafficLightsLayer)
        this._createTrafficLightsForAllIntersections(this.trafficLightsLayer, intersectionKeyToTL, this.TRAFFIC_LIGHTS_CONFIG);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ dayNightManager –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        // –û–≤–µ—Ä–ª–µ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ –≤ updateNightMode

        // –î–æ–±–∞–≤–ª—è–µ–º decorLayer (–º–∞—à–∏–Ω–∞) - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
        world.addChild(decorLayer);
        
        // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –®–∏–Ω—ã
        const shinaSprite = this.shinaRenderer.create();
        this.decorLayer.addChild(shinaSprite);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã - –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
        world.addChild(trafficLightsLayer);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è –ü–ï–†–ï–î UI (–Ω–æ –ø–æ—Å–ª–µ –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
        lightingLayer.zIndex = 1000; // –ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
        this.app.stage.addChild(lightingLayer);

        uiLayer.zIndex = 2000; // –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        this.app.stage.addChild(uiLayer);

        const pauseButton = document.getElementById('pause-button');
        const speedButton = document.getElementById('speed-button');
        const zoomButton = document.getElementById('zoom-button');
        const zoomInButton = document.getElementById('zoom-in-button');
        const zoomOutButton = document.getElementById('zoom-out-button');

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã
        pauseButton.addEventListener('click', () => {
            this.pauseManager.togglePause();
            this.timeManager.setPaused(this.pauseManager.isPaused());
            this.pauseManager.showSpeedNotification(this.pauseManager.isPaused() ? '–ü–ê–£–ó–ê' : '–í–û–ó–û–ë–ù–û–í–õ–ï–ù–û');
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
        speedButton.addEventListener('click', () => {
            const currentSpeed = this.pauseManager.getSpeedMultiplier();
            let newSpeed;
            
            // –¶–∏–∫–ª: x1 ‚Üí x2 ‚Üí x5 ‚Üí x1
            if (currentSpeed === 1) {
                newSpeed = 2;
            } else if (currentSpeed === 2) {
                newSpeed = 5;
            } else {
                newSpeed = 1;
            }
            
            this.pauseManager.setSpeedBoosted(newSpeed > 1);
            this.pauseManager.setSpeedMultiplier(newSpeed);
            this.timeManager.setSpeedMultiplier(newSpeed);

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
            speedButton.textContent = `x${newSpeed}`;
            speedButton.classList.toggle('boosted', newSpeed > 1);

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            console.log(`‚ö° –°–ö–û–†–û–°–¢–¨ –ò–ì–†–´: x${newSpeed} ${newSpeed > 1 ? '–£–°–ö–û–†–ï–ù–û' : '–ù–û–†–ú–ê–õ–¨–ù–ê–Ø'}`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.pauseManager.showSpeedNotification(`–°–ö–û–†–û–°–¢–¨ x${newSpeed}`);
        });

        const initialSpeed = this.pauseManager.getSpeedMultiplier();
        speedButton.textContent = `x${initialSpeed}`;
        speedButton.classList.toggle('boosted', initialSpeed > 1);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        zoomButton.addEventListener('click', () => {
            const panningController = this.dependencies.get('panningController');
            if (panningController) {
                panningController.toggleZoom();
                this.uiRenderer.updateZoomButton();
            }
        });

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
        zoomInButton.addEventListener('click', () => {
            const panningController = this.dependencies.get('panningController');
            if (panningController) {
                panningController.zoomIn();
                this.uiRenderer.updateZoomButton();
            }
        });

        zoomOutButton.addEventListener('click', () => {
            const panningController = this.dependencies.get('panningController');
            if (panningController) {
                panningController.zoomOut();
                this.uiRenderer.updateZoomButton();
            }
        });

        // PanningController —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã—à–µ

        // –õ—ë–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∑–æ–Ω–∞ —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å
        setTimeout(() => {
            // –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –ø—É—Ç—å, –∫–æ–≥–¥–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
            if (this.carEntity) {
                const pathBuilder = this.dependencies.get('pathBuilder');
                const newPath = pathBuilder.buildCarPath(this.carEntity, this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this._getDestinationCenter.bind(this), this.debugLogAlways.bind(this));
                this.carEntity.setPath(newPath);
            }
        }, 0);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤
     * @param {Object} layer - —Å–ª–æ–π –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     * @param {Map} intersectionKeyToTL - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     * @param {Array} trafficLightsConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     */
    _createTrafficLightsForAllIntersections(layer, intersectionKeyToTL, trafficLightsConfig) {
        // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        intersectionKeyToTL.clear();
        
        // intersectionKeyToTL —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        // window.intersectionKeyToTL –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        const { maxVerticalPos } = this.worldRenderer ? this.worldRenderer.getRoadPositions() : { maxVerticalPos: 0 };
        const horizontalRoadYs = this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [];
        const verticalRoadXs = this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [];

        for (let j = 0; j < horizontalRoadYs.length; j++) {
            for (let i = 0; i < verticalRoadXs.length; i++) {
                const x = verticalRoadXs[i];
                const y = horizontalRoadYs[j];

                if (!this._shouldHaveTrafficLight(i, j, trafficLightsConfig)) {
                    continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Ä–æ–≥–∏ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                const roadConnections = {
                    north: j > 0 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —Å–µ–≤–µ—Ä: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
                    south: j < horizontalRoadYs.length - 1 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —é–≥: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
                    west: i > 0, // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –∑–∞–ø–∞–¥, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                    east: i < verticalRoadXs.length - 1 // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                };

                const CONFIG = this.dependencies.get('config');
                const tl = initTrafficLightsForIntersection({
                    PIXI,
                    app: this.app,
                    layer,
                    x,
                    y,
                    roadWidth: CONFIG.ROAD_WIDTH,
                    lampRadius: 9,
                    cycle: { green: 750, yellow: 200 },
                    roadConnections,
                    pauseManager: this.pauseManager
                });
                const key = `${x},${y}`;
                intersectionKeyToTL.set(key, tl);

                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã
                const trafficCoordinator = this.dependencies.get('trafficCoordinator');
                if (trafficCoordinator) {
                    trafficCoordinator.addTrafficLight(key, tl, x, y);
                } else {
                    console.warn('üö¶ trafficCoordinator –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞');
                }
            }
        }

        if (verticalRoadXs.length > 0 && horizontalRoadYs.length > 0) {
            const trafficCoordinator = this.dependencies.get('trafficCoordinator');
            if (trafficCoordinator) {
                trafficCoordinator.setWaveOrigin(verticalRoadXs[0], horizontalRoadYs[0]);
            } else {
                console.warn('üö¶ trafficCoordinator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
            }
        }
        
        console.log(`üö¶ –°–æ–∑–¥–∞–Ω–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤: ${intersectionKeyToTL.size}`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
     * @param {number} i - –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
     * @param {number} j - –∏–Ω–¥–µ–∫—Å —Ä—è–¥–∞
     * @param {Array} trafficLightsConfig - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     * @returns {boolean} true –µ—Å–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä
     */
    _shouldHaveTrafficLight(i, j, trafficLightsConfig) {
        const coord = String.fromCharCode(65 + i) + (j + 1);
        const hasConfig = trafficLightsConfig ? true : false;
        const includes = hasConfig ? trafficLightsConfig.includes(coord) : false;
        return includes;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å layout –∏–≥—Ä—ã
     */
    _layout() {
        const w = 1200;
        const h = 800;
        const CONFIG = this.dependencies.get('config');
        const scale = Math.min(w / CONFIG.WORLD_WIDTH, h / CONFIG.WORLD_HEIGHT);

        const panningController = this.dependencies.get('panningController');
        if (!panningController || panningController.getCurrentScale() === 1) {
            this.world.scale.set(scale);
            this.world.pivot.set(0, 0);
            this.world.position.set(
                (w - CONFIG.WORLD_WIDTH * scale) / 2,
                (h - CONFIG.WORLD_HEIGHT * scale) / 2
            );
        }

        this.labelsLayer.children.forEach(label => {
            label.scale.set(1 / scale);
        });

        // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ world, –ø–æ—ç—Ç–æ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        
        this._initEntities(this.stateManager.getCurrentRouteIndex(), this.stateManager.getSavedCarState(), this.carRenderer);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
     * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
     * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
     * @param {Object} intersectionKeyToTL - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     * @param {Object} uiRenderer - —Ä–µ–Ω–¥–µ—Ä–µ—Ä UI
     * @param {Function} debugLogAlways - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
     */
    _createCar(currentRouteIndex, savedCarState, intersectionKeyToTL, uiRenderer, debugLogAlways) {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –º–∞—à–∏–Ω—ã
        const CONFIG = this.dependencies.get('config');
        const carRenderer = new CarRenderer(CONFIG, this.pauseManager);
        
        const car = carRenderer.createCar({
            carPath: [],
            // currentRouteIndex —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ stateManager
            savedCarState: savedCarState,
            getDestinationCenter: this._getDestinationCenter.bind(this)
        });
        
        const avatar = carRenderer.getAvatar();
        
        // CarTrafficController –∏ PathBuilder —Ç–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ init() –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        const carTrafficController = this.dependencies.get('carTrafficController');
        const pathBuilder = this.dependencies.get('pathBuilder');
        
        // –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        // window.carTrafficController –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        // window.pathBuilder –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        // window.intersectionKeyToTL –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        // window.getDestinationCenter –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ this._getDestinationCenter

        // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞
        const routeIndex = 0; // –¥–æ–º
        const stayTimer = CONFIG.ROUTE_SCHEDULE[0].stayHours; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–º–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
        if (uiRenderer) {
            uiRenderer.setCurrentRouteIndex(routeIndex);
        }

        // –ù–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–µ–∑–¥–∫—É —Å—Ä–∞–∑—É - –æ–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è
        const carPath = pathBuilder.buildCarPath(this.carEntity, routeIndex, savedCarState, this._getDestinationCenter.bind(this), debugLogAlways);
        
        // –ï—Å–ª–∏ carEntity —É–∂–µ —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—É—Ç—å
        if (this.carEntity) {
            this.carEntity.setPath(carPath);
            this.carEntity.setAtDestination(true);
            this.carEntity.setStayTimer(CONFIG.ROUTE_SCHEDULE[0].stayHours);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ StateManager

        this.decorLayer.addChild(car);

        uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
        
        return {
            carRenderer,
            carTrafficController,
            pathBuilder,
            routeIndex,
            stayTimer
        };
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å—ã
     * @param {string} coord - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'A1', 'B2', etc.
     * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {i, j}
     */
    _parseIntersectionCoordinate(coord) {
        const letter = coord.charAt(0);
        const number = parseInt(coord.slice(1));
        const i = letter.charCodeAt(0) - 65; // A=0, B=1, C=2...
        const j = number - 1; // 1=0, 2=1, 3=2...
        return { i, j };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
     * @param {number} i - –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞
     * @param {number} j - –∏–Ω–¥–µ–∫—Å —Ä—è–¥–∞
     * @returns {boolean} true, –µ—Å–ª–∏ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä
     */
    _shouldHaveTrafficLight(i, j) {
        const coord = String.fromCharCode(65 + i) + (j + 1);
        return this.TRAFFIC_LIGHTS_CONFIG.includes(coord);
    }

    /**
     * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–æ–≤–∫–æ–π –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞
     * @param {Object} panningController - –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
     * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
     * @param {Object} carRenderer - —Ä–µ–Ω–¥–µ—Ä–µ—Ä –º–∞—à–∏–Ω—ã
     */
    _layout(panningController, currentRouteIndex, savedCarState, carRenderer) {
        const w = 1200;
        const h = 800;
        const CONFIG = this.dependencies.get('config');
        const scale = Math.min(w / CONFIG.WORLD_WIDTH, h / CONFIG.WORLD_HEIGHT);

        if (!panningController || panningController.getCurrentScale() === 1) {
            this.world.scale.set(scale);
            this.world.pivot.set(0, 0);
            this.world.position.set(
                (w - CONFIG.WORLD_WIDTH * scale) / 2,
                (h - CONFIG.WORLD_HEIGHT * scale) / 2
            );
        }

        this.labelsLayer.children.forEach(label => {
            label.scale.set(1 / scale);
        });

        // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ world, –ø–æ—ç—Ç–æ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        
        this._initEntities(currentRouteIndex, savedCarState, carRenderer);
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
     * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
     * @param {*} data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    debugLog(message, data = null) {
        if (!this.DEBUG_MODE) return;
        const now = Date.now();
        if (now - this.debugInfo.lastLogTime > this.debugInfo.logInterval) {
            console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
            this.debugInfo.lastLogTime = now;
        }
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç)
     * @param {string} message - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
     * @param {*} data - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    debugLogAlways(message, data = null) {
        if (!this.DEBUG_MODE) return;
        console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
    }

}

export default Game;

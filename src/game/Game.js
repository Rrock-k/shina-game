import { TimeManager } from './TimeManager.js';
import { PauseManager } from './PauseManager.js';
import { DayNightManager } from './DayNightManager.js';
import { JournalManager } from './JournalManager.js';
import { WorldRenderer } from '../rendering/WorldRenderer.js';
import { UIRenderer } from '../rendering/UIRenderer.js';
import { CarRenderer } from '../rendering/CarRenderer.js';
import { Car } from '../entities/Car.js';
import { Shina } from '../entities/Shina.js';
import { CarTrafficController } from '../systems/carTrafficControl.js';
import { PathBuilder } from '../systems/PathBuilder.js';
import { CONFIG } from '../config/gameConfig.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ü–∏–∫–ª–æ–º
 */
class Game {
    constructor() {
        console.log('Game constructor called');
        
        // –°–æ–∑–¥–∞–µ–º PIXI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.app = new PIXI.Application({
            width: 1200,
            height: 800,
            autoDensity: true,
            resolution: window.devicePixelRatio || 1,
            backgroundColor: 0x3a6f3e
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º canvas –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
        const gameContainer = document.querySelector('.game-container');
        gameContainer.appendChild(this.app.view);
        
        // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
        this.app.stage.eventMode = 'static';
        this.app.stage.hitArea = new PIXI.Rectangle(0, 0, 1200, 800);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∏—Ä–∞ –∏ –≤—Å–µ —Å–ª–æ–∏
        this.world = new PIXI.Container();
        this.app.stage.addChild(this.world);
        
        this.gridLayer = new PIXI.Container();
        this.roadsLayer = new PIXI.Container();
        this.lotsLayer = new PIXI.Container();
        this.zonesLayer = new PIXI.Container();
        this.labelsLayer = new PIXI.Container();
        this.intersectionsLayer = new PIXI.Container();
        this.decorLayer = new PIXI.Container();
        this.trafficLightsLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ (–ø–æ–≤–µ—Ä—Ö –º–∞—à–∏–Ω)
        this.borderLayer = new PIXI.Container();
        this.lightingLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞ (–ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
        this.uiLayer = new PIXI.Container();
        
        // –î–µ–ª–∞–µ–º world –∏ —Å–ª–æ–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è dayNightManager
        window.world = this.world;
        window.decorLayer = this.decorLayer;
        window.trafficLightsLayer = this.trafficLightsLayer;
        
        // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.timeManager = new TimeManager();
        this.pauseManager = new PauseManager();
        this.journalManager = new JournalManager(this.timeManager);
        this.dayNightManager = new DayNightManager(PIXI, CONFIG);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.timeManager.setSpeedMultiplier(this.pauseManager.getSpeedMultiplier());
        this.timeManager.setPaused(this.pauseManager.isPaused());
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –∂—É—Ä–Ω–∞–ª–µ
        this.journalManager.setLocationStartTime('–î–æ–º');
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã
        this.worldRenderer = new WorldRenderer(CONFIG, this.app);
        this.uiRenderer = new UIRenderer(CONFIG, this.timeManager, this.pauseManager, this.dayNightManager, null, this.journalManager);
        
        // –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
        this.carEntity = new Car(CONFIG, this.pauseManager);
        this.shinaEntity = new Shina(CONFIG);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∑–æ–Ω
        this.zoneGeometry = new Map(); // key -> { center:{x,y}, bounds:{x,y,w,h} | {x,y,r}, type }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
        this.lastStayTimerUpdate = 0;
        this.lastStayTimerDay = 0;
        
        // –î–µ–ª–∞–µ–º carEntity –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è UI (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞)
        window.carEntity = this.carEntity;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º carEntity (–±–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ–ª–Ω–∞—è –±—É–¥–µ—Ç –≤ main.js)
        this.carEntity.init({
            currentRouteIndex: 0, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ main.js
            savedState: null, // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ main.js
            onArrival: (destination) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–±—ã–ª–∞ –≤ ${destination.name}`);
                // TODO: –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ Game.js –ø–æ–∑–∂–µ
            },
            onStateChange: (event, data) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞: ${event}`, data);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º shinaEntity
        this.shinaEntity.init({
            position: { x: 0, y: 0 },
            initialState: 'atWork', // –®–∏–Ω–∞ –¥–æ–º–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            onStateChange: (oldState, newState, shina) => {
                console.log(`üë§ –®–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${oldState} ‚Üí ${newState}`);
            },
            onAvailabilityChange: (isAvailable, shina) => {
                console.log(`üë§ –®–∏–Ω–∞ ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
            },
            onMessageReceived: (message, shina) => {
                console.log(`üí¨ –®–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message);
            }
        });

    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
     */
    start() {
        console.log('Game start() called');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        this.app.ticker.add((delta) => this.update(delta));
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
     * @param {number} delta - –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    update(delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        this.timeManager.update();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        if (this.uiRenderer) {
            this.uiRenderer.updateDateTimeDisplay();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
        const gameTime = this.timeManager.getGameTime();
        this.dayNightManager.updateNightMode(gameTime);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI (–≤–∫–ª—é—á–∞—è –∂—É—Ä–Ω–∞–ª)
        if (this.uiRenderer) {
            this.uiRenderer.update();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ (–º–∞—à–∏–Ω–∞ –∏ —à–∏–Ω–∞)
        this.updateEntities(delta);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
        this.updateStayTimer();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
     * @param {number} delta - –í—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
     */
    updateEntities(delta) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
        if (this.carEntity) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
            const carTrafficController = window.carTrafficController;
            const intersectionKeyToTL = window.intersectionKeyToTL;
            const pathBuilder = window.pathBuilder;
            const debugLog = window.debugLog;
            const debugLogAlways = window.debugLogAlways;
            const debugInfo = window.debugInfo;
            
            this.carEntity.update(delta, {
                checkArrival: () => this.checkArrival(),
                debugLog: debugLog,
                debugLogAlways: debugLogAlways,
                carTrafficController: carTrafficController,
                intersectionKeyToTL: intersectionKeyToTL,
                getVerticalRoadXs: () => this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [],
                getHorizontalRoadYs: () => this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [],
                buildCarPath: () => pathBuilder ? pathBuilder.buildCarPath(this.carEntity, window.currentRouteIndex, window.savedCarState, this._getDestinationCenter.bind(this), debugLogAlways) : [],
                updateLightBeams: undefined,
                debugInfo: debugInfo
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –®–∏–Ω—É
        if (this.shinaEntity) {
            this.shinaEntity.update({
                timeManager: this.timeManager,
                debugLog: window.debugLog
            });
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
     */
    updateStayTimer() {
        if (this.carEntity && this.carEntity.isAtDestination()) {
            const gameTime = this.timeManager.getGameTime();
            const currentTime = gameTime.hours * 60 + gameTime.minutes; // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
            const currentDay = gameTime.day; // –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            if (this.lastStayTimerUpdate === 0) {
                this.lastStayTimerUpdate = currentTime;
                this.lastStayTimerDay = currentDay;
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            if (currentTime !== this.lastStayTimerUpdate || currentDay !== this.lastStayTimerDay) {
                let timeDiff;
                
                // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
                if (currentDay !== this.lastStayTimerDay) {
                    // –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ + –≤—Ä–µ–º—è —Å –ø–æ–ª—É–Ω–æ—á–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                    timeDiff = (24 * 60 - this.lastStayTimerUpdate) + currentTime;
                    console.log(`üåô –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: ${timeDiff} –º–∏–Ω—É—Ç`);
                } else {
                    timeDiff = currentTime - this.lastStayTimerUpdate;
                }
                
                const newStayTimer = this.carEntity.getStayTimer() - timeDiff / 60; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—ã–µ —á–∞—Å—ã
                this.carEntity.setStayTimer(newStayTimer);
                this.lastStayTimerUpdate = currentTime;
                this.lastStayTimerDay = currentDay;
                
                if (newStayTimer <= 0) {
                    // –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –µ–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
                    console.log('üöó –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ');
                    this.nextDestination();
                }
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞
     */
    nextDestination() {
        console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        const currentRouteIndex = window.currentRouteIndex || 0;
        const CONFIG = window.CONFIG || this.config;
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        if (this.journalManager && currentDest) {
            this.journalManager.endLocationStay(currentDest.name);
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∑–¥–∞–Ω–∏–∏
        this.hideBuildingAvatar();

        const newRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
        window.currentRouteIndex = newRouteIndex;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
        if (this.uiRenderer) {
            this.uiRenderer.setCurrentRouteIndex(newRouteIndex);
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
        if (this.carEntity) {
            this.carEntity.setCurrentRouteIndex(newRouteIndex);
            this.carEntity.setAtDestination(false);
            this.carEntity.setStayTimer(0);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            const pathBuilder = window.pathBuilder;
            if (pathBuilder) {
                const newPath = pathBuilder.buildCarPath(this.carEntity, newRouteIndex, window.savedCarState, this._getDestinationCenter.bind(this), window.debugLogAlways);
                this.carEntity.setPath(newPath);
            }
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è
        const newDest = CONFIG.ROUTE_SCHEDULE[newRouteIndex];
        if (this.journalManager && newDest) {
            this.journalManager.startTrip(newDest.name, newDest.location);
        }

        this.uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
     */
    checkArrival() {
        const currentRouteIndex = window.currentRouteIndex || 0;
        const CONFIG = window.CONFIG || this.config;
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        
        if (this.carEntity && !this.carEntity.isAtDestination()) {
            console.log(`üè† –ü—Ä–∏–±—ã—Ç–∏–µ –≤ ${currentDest.name} (–æ–±–æ—á–∏–Ω–∞)`);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–¥–∞–Ω–∏–µ
            if (this.journalManager && currentDest) {
                this.journalManager.endTrip(currentDest.name);
                this.journalManager.setLocationStartTime(currentDest.name);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            const savedCarState = this.saveCarStateForNextDestination();
            window.savedCarState = savedCarState;
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, savedCarState);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
            if (this.carEntity) {
                this.carEntity.setAtDestination(true);
                this.carEntity.setStayTimer(currentDest.stayHours);
            }
            
            const gameTime = this.timeManager.getGameTime();
            this.lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
            this.lastStayTimerDay = gameTime.day; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å
            this.uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
            this.showBuildingAvatar(currentDest.location);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
     */
    saveCarStateForNextDestination() {
        const currentRouteIndex = window.currentRouteIndex || 0;
        const CONFIG = window.CONFIG || this.config;
        const nextRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
        const nextDestination = CONFIG.ROUTE_SCHEDULE[nextRouteIndex];

        if (!nextDestination) return null;

        const nextDestCenter = this._getDestinationCenter(nextDestination.location);

        // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
        const carRenderer = window.carRenderer;
        const pathBuilder = window.pathBuilder;
        if (!carRenderer || !pathBuilder) return null;
        
        const currentPos = carRenderer.getCar().position;
        const currentIJ = pathBuilder.getNearestIntersectionIJ(currentPos.x, currentPos.y);
        const nextPath = pathBuilder.buildPathToBuilding(currentIJ, nextDestCenter);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –≤ –ø—É—Ç–∏ (–Ω–µ —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è)
        let nextIntersection = null;
        if (nextPath.length >= 2) {
            // –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è - —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É –∑–¥–∞–Ω–∏—è)
            nextIntersection = nextPath[nextPath.length - 2];
        } else if (nextPath.length === 1) {
            // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            nextIntersection = nextPath[0];
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ fallback
        let direction;
        if (nextIntersection) {
            const dx = nextIntersection.x - currentPos.x;
            const dy = nextIntersection.y - currentPos.y;
            direction = Math.atan2(dy, dx);
            console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫: (${nextIntersection.x}, ${nextIntersection.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
        } else {
            const dx = nextDestCenter.x - currentPos.x;
            const dy = nextDestCenter.y - currentPos.y;
            direction = Math.atan2(dy, dx);
            console.log(`üéØ Fallback –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: (${nextDestCenter.x}, ${nextDestCenter.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
        }

        return {
            nextDestination: nextDestination,
            nextDestCenter: nextDestCenter,
            nextIntersection: nextIntersection,
            direction: direction,
            currentPosition: { x: currentPos.x, y: currentPos.y }
        };
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
     */
    showBuildingAvatar(locationKey) {
        const buildingCenter = this._getDestinationCenter(locationKey);
        if (!buildingCenter) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –º–∞—à–∏–Ω–∫–∏
        const carRenderer = window.carRenderer;
        if (carRenderer) {
            carRenderer.setAvatarVisible(false);
        }

        const avatarContainer = new PIXI.Container();

        // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ–Ω (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
        const background = new PIXI.Graphics();
        background.beginFill(0xffffff, 0.9);
        background.lineStyle(2, 0x333333);
        background.drawRect(-30, -30, 60, 60);
        background.endFill();
        avatarContainer.addChild(background);

        // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
        const buildingAvatar = PIXI.Sprite.from('/public/shina.jpeg');
        buildingAvatar.anchor.set(0.5);
        buildingAvatar.width = 60;
        buildingAvatar.height = 60;
        avatarContainer.addChild(buildingAvatar);

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∑–¥–∞–Ω–∏—è
        const zoneGeometry = window.zoneGeometry;
        const zone = zoneGeometry ? zoneGeometry.get(locationKey) : null;
        if (zone && zone.bounds) {
            if (zone.type === 'circle') {
                // –î–ª—è –∫—Ä—É–≥–ª—ã—Ö –∑–æ–Ω (–∏–Ω—Å—Ç–∏—Ç—É—Ç) - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                avatarContainer.position.set(
                    zone.bounds.x + zone.bounds.r - 30,
                    zone.bounds.y + zone.bounds.r - 30
                );
            } else {
                // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∑–æ–Ω
                avatarContainer.position.set(
                    zone.bounds.x + zone.bounds.w - 30,
                    zone.bounds.y + zone.bounds.h - 30
                );
            }
        } else {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è
            avatarContainer.position.set(
                buildingCenter.x + 150,
                buildingCenter.y + 150
            );
        }

        this.decorLayer.addChild(avatarContainer);
        if (!this.buildingAvatars) {
            this.buildingAvatars = new Map();
        }
        this.buildingAvatars.set(locationKey, avatarContainer);

        console.log(`üè† –ü–æ–∫–∞–∑–∞–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${locationKey}`, {
            zone: zone,
            buildingCenter: buildingCenter,
            position: avatarContainer.position
        });
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
     */
    hideBuildingAvatar() {
        const currentRouteIndex = window.currentRouteIndex || 0;
        const CONFIG = window.CONFIG || this.config;
        const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
        
        if (this.buildingAvatars) {
            const avatarContainer = this.buildingAvatars.get(currentDest.location);
            if (avatarContainer && avatarContainer.parent) {
                avatarContainer.parent.removeChild(avatarContainer);
                this.buildingAvatars.delete(currentDest.location);
                console.log(`üè† –°–∫—Ä—ã—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${currentDest.location}`);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—à–∏–Ω–∫–µ
        const carRenderer = window.carRenderer;
        if (carRenderer) {
            carRenderer.setAvatarVisible(true);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
     * @returns {Array} –º–∞—Å—Å–∏–≤ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    _getHorizontalRoadYs() {
        return this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
     * @returns {Array} –º–∞—Å—Å–∏–≤ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
     */
    _getVerticalRoadXs() {
        return this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É –ª–æ–∫–∞—Ü–∏–∏
     * @param {string} locationKey - –∫–ª—é—á –ª–æ–∫–∞—Ü–∏–∏
     * @returns {Object} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ {x, y}
     */
    _getDestinationCenter(locationKey) {
        const z = this.zoneGeometry.get(locationKey);
        if (z && z.center) return z.center;
        // fallback: –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        const def = CONFIG.ZONES[locationKey];
        const verticalRoadXs = this._getVerticalRoadXs();
        const horizontalRoadYs = this._getHorizontalRoadYs();
        if (!def) return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
        if (def.type === 'rect') return { x: def.x + def.w / 2, y: def.y + def.h / 2 };
        if (def.type === 'circle') return { x: def.x, y: def.y };
        return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
     * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
     * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
     * @param {Object} carRenderer - —Ä–µ–Ω–¥–µ—Ä–µ—Ä –º–∞—à–∏–Ω—ã
     */
    _initEntities(currentRouteIndex, savedCarState, carRenderer) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é carEntity —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        this.carEntity.init({
            currentRouteIndex: currentRouteIndex,
            savedState: savedCarState,
            onArrival: (destination) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–±—ã–ª–∞ –≤ ${destination.name}`);
                this.checkArrival();
            },
            onStateChange: (event, data) => {
                console.log(`üöó –ú–∞—à–∏–Ω–∞: ${event}`, data);
            }
        });

        // –°–≤—è–∑—ã–≤–∞–µ–º carEntity —Å carRenderer
        if (carRenderer) {
            const carSprite = carRenderer.getCar();
            const avatar = carRenderer.getAvatar();
            
            if (carSprite) {
                this.carEntity.setSprite(carSprite);
            }
            if (avatar) {
                this.carEntity.setAvatar(avatar);
            }
            
            if (carSprite) {
                this.carEntity.setPosition({ x: carSprite.position.x, y: carSprite.position.y });
                this.carEntity.setRotation(carSprite.rotation);
            }
        }

        // shinaEntity —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
     * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
     * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
     * @param {Object} intersectionKeyToTL - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
     * @param {Object} uiRenderer - —Ä–µ–Ω–¥–µ—Ä–µ—Ä UI
     * @param {Function} debugLogAlways - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
     */
    _createCar(currentRouteIndex, savedCarState, intersectionKeyToTL, uiRenderer, debugLogAlways) {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä –º–∞—à–∏–Ω—ã
        const carRenderer = new CarRenderer(CONFIG, this.pauseManager);
        
        const car = carRenderer.createCar({
            carPath: [],
            currentRouteIndex: currentRouteIndex,
            savedCarState: savedCarState,
            getDestinationCenter: this._getDestinationCenter.bind(this)
        });
        
        const avatar = carRenderer.getAvatar();
        
        const carTrafficController = new CarTrafficController();

        const verticalRoadXs = this.worldRenderer ? this.worldRenderer.getVerticalRoadXs() : [];
        const horizontalRoadYs = this.worldRenderer ? this.worldRenderer.getHorizontalRoadYs() : [];
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PathBuilder:', {
            verticalRoads: verticalRoadXs.length,
            horizontalRoads: horizontalRoadYs.length,
            verticalRoadXs: verticalRoadXs.slice(0, 5), // –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            horizontalRoadYs: horizontalRoadYs.slice(0, 5) // –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        });
        const pathBuilder = new PathBuilder(verticalRoadXs, horizontalRoadYs, CONFIG);
        
        // –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        window.carTrafficController = carTrafficController;
        window.pathBuilder = pathBuilder;
        window.carRenderer = carRenderer;
        window.intersectionKeyToTL = intersectionKeyToTL;
        window.getDestinationCenter = this._getDestinationCenter.bind(this);

        // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞
        const routeIndex = 0; // –¥–æ–º
        const stayTimer = CONFIG.ROUTE_SCHEDULE[0].stayHours; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–º–∞
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
        if (uiRenderer) {
            uiRenderer.setCurrentRouteIndex(routeIndex);
        }

        // –ù–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–µ–∑–¥–∫—É —Å—Ä–∞–∑—É - –æ–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è
        const carPath = pathBuilder.buildCarPath(this.carEntity, routeIndex, savedCarState, this._getDestinationCenter.bind(this), debugLogAlways);
        
        // –ï—Å–ª–∏ carEntity —É–∂–µ —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—É—Ç—å
        if (this.carEntity) {
            this.carEntity.setPath(carPath);
            this.carEntity.setAtDestination(true);
            this.carEntity.setStayTimer(CONFIG.ROUTE_SCHEDULE[0].stayHours);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        const gameTime = this.timeManager.getGameTime();
        this.lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes;
        this.lastStayTimerDay = gameTime.day;

        this.decorLayer.addChild(car);

        uiRenderer.updateRouteDisplay(this.carEntity ? this.carEntity.isAtDestination() : false);
        
        return {
            carRenderer,
            carTrafficController,
            pathBuilder,
            routeIndex,
            stayTimer
        };
    }

}

export default Game;

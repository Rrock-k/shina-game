
import { initTrafficLightsForIntersection, getDirectionForSegment, Direction, TrafficLightCoordinator, keyForIntersection } from './systems/trafficLights.js';
import { CarTrafficController } from './systems/carTrafficControl.js';
import { PanningController } from './systems/panning.js';
import { CONFIG } from './config/gameConfig.js';
import { TimeManager } from './game/TimeManager.js';
import { PauseManager } from './game/PauseManager.js';
import { DayNightManager } from './game/DayNightManager.js';
import { JournalManager } from './game/JournalManager.js';
import { WorldRenderer } from './rendering/WorldRenderer.js';
import { CarRenderer } from './rendering/CarRenderer.js';
import { UIRenderer } from './rendering/UIRenderer.js';
// –ù–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
import { Car } from './entities/Car.js';
import { Shina } from './entities/Shina.js';
// –£—Ç–∏–ª–∏—Ç—ã
import { indexOfClosest, getIntersectionCoord, getNearestIntersectionIJ, computeBuildingStop, buildIntersectionPath, buildGraphPathToBuilding } from './utils/geometry.js';
import { randInt } from './utils/math.js';

// globals
let app, world, gridLayer, roadsLayer, lotsLayer, zonesLayer, labelsLayer, intersectionsLayer, decorLayer, trafficLightsLayer, borderLayer, uiLayer, lightingLayer, car;
let carPath = [], carSegment = 0, carProgress = 0;
let avatar;
let carTrafficController;
let buildingAvatars = new Map(); // –∫–∞—Ä—Ç–∞ –∑–¥–∞–Ω–∏–π -> –º–∞–ª–µ–Ω—å–∫–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏

// –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
let timeManager, pauseManager, dayNightManager, journalManager, worldRenderer, carRenderer, uiRenderer;

// –ù–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
let carEntity, shinaEntity;

// –î–ï–ë–ê–ì –ú–û–î
let DEBUG_MODE = true; // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
let debugInfo = {
  frameCount: 0,
  lastLogTime: 0,
  logInterval: 1000 // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
};


// –î–µ–±–∞–≥-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function debugLog (message, data = null) {
  if (!DEBUG_MODE) return;
  const now = Date.now();
  if (now - debugInfo.lastLogTime > debugInfo.logInterval) {
    console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
    debugInfo.lastLogTime = now;
  }
}

// –î–µ–±–∞–≥-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function debugLogAlways (message, data = null) {
  if (!DEBUG_MODE) return;
  console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
let lastStayTimerUpdate = 0;
let lastStayTimerDay = 0;

function updateStayTimer() {
  if (carRenderer && carRenderer.isAtDestination()) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–∑ timeManager
    const gameTime = timeManager.getGameTime();
    const currentTime = gameTime.hours * 60 + gameTime.minutes; // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    const currentDay = gameTime.day; // –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    if (currentTime !== lastStayTimerUpdate || currentDay !== lastStayTimerDay) {
      let timeDiff;
      
      // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      if (currentDay !== lastStayTimerDay) {
        // –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ + –≤—Ä–µ–º—è —Å –ø–æ–ª—É–Ω–æ—á–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        timeDiff = (24 * 60 - lastStayTimerUpdate) + currentTime;
        console.log(`üåô –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: ${timeDiff} –º–∏–Ω—É—Ç`);
      } else {
        timeDiff = currentTime - lastStayTimerUpdate;
      }
      
      const newStayTimer = carRenderer.getStayTimer() - timeDiff / 60; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—ã–µ —á–∞—Å—ã
      carRenderer.setStayTimer(newStayTimer);
      lastStayTimerUpdate = currentTime;
      lastStayTimerDay = currentDay;
      
      if (newStayTimer <= 0) {
        // –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –µ–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
        console.log('üöó –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ');
        nextDestination();
      }
    }
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
function initEntities() {
  // –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã
  carEntity = new Car(CONFIG, pauseManager);
  
  // –î–µ–ª–∞–µ–º carEntity –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è UI
  window.carEntity = carEntity;
  carEntity.init({
    currentRouteIndex: currentRouteIndex,
    savedState: savedCarState,
    onArrival: (destination) => {
      console.log(`üöó –ú–∞—à–∏–Ω–∞ –ø—Ä–∏–±—ã–ª–∞ –≤ ${destination.name}`);
      checkArrival();
    },
    onStateChange: (event, data) => {
      console.log(`üöó –ú–∞—à–∏–Ω–∞: ${event}`, data);
    }
  });

  // –°–≤—è–∑—ã–≤–∞–µ–º carEntity —Å carRenderer
  if (carRenderer) {
    const carSprite = carRenderer.getCar();
    const avatar = carRenderer.getAvatar();
    
    if (carSprite) {
      carEntity.setSprite(carSprite);
    }
    if (avatar) {
      carEntity.setAvatar(avatar);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ carRenderer
    if (carSprite) {
      carEntity.setPosition({ x: carSprite.position.x, y: carSprite.position.y });
      carEntity.setRotation(carSprite.rotation);
    }
  }

  // –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –®–∏–Ω—ã
  shinaEntity = new Shina(CONFIG);
  shinaEntity.init({
    position: { x: 0, y: 0 },
    initialState: 'atWork', // –®–∏–Ω–∞ –¥–æ–º–∞ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    onStateChange: (oldState, newState, shina) => {
      console.log(`üë§ –®–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${oldState} ‚Üí ${newState}`);
    },
    onAvailabilityChange: (isAvailable, shina) => {
      console.log(`üë§ –®–∏–Ω–∞ ${isAvailable ? '–¥–æ—Å—Ç—É–ø–Ω–∞' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}`);
    },
    onMessageReceived: (message, shina) => {
      console.log(`üí¨ –®–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, message);
    }
  });

}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
function updateEntities(delta) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
  if (carEntity) {
    carEntity.update(delta, {
      checkArrival: checkArrival,
      debugLog: debugLog,
      debugLogAlways: debugLogAlways,
      carTrafficController: carTrafficController,
      intersectionKeyToTL: intersectionKeyToTL,
      getVerticalRoadXs: getVerticalRoadXs,
      getHorizontalRoadYs: getHorizontalRoadYs,
      buildCarPath: buildCarPath,
      updateLightBeams: undefined,
      debugInfo: debugInfo
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –®–∏–Ω—É
  if (shinaEntity) {
    shinaEntity.update({
      timeManager: timeManager,
      debugLog: debugLog
    });
  }

  intersectionKeyToTL.forEach((trafficLight, key) => {
  });
}

// –ì–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ
const zoneGeometry = new Map(); // key -> { center:{x,y}, bounds:{x,y,w,h} | {x,y,r}, type }

let currentRouteIndex = 0;
let stayTimer = 0; // —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
let savedCarState = null; // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–¥–∞–Ω–∏–µ
// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –ø–æ –∫–ª—é—á—É –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞
const intersectionKeyToTL = new Map();
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
const trafficCoordinator = new TrafficLightCoordinator(45); // —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—à–∏–Ω ~45 –∫–º/—á

// üö¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–í–ï–¢–û–§–û–†–û–í üö¶
// –ú–∞—Å—Å–∏–≤ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤, –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã
// –§–æ—Ä–º–∞—Ç: 'A1', 'B2', 'C3' –∏ —Ç.–¥. (–±—É–∫–≤–∞ = —Å—Ç–æ–ª–±–µ—Ü –¥–æ—Ä–æ–≥–∏, —Ü–∏—Ñ—Ä–∞ = —Ä—è–¥ –¥–æ—Ä–æ–≥–∏)
// –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤!
const TRAFFIC_LIGHTS_CONFIG = [
  'A2',              // –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ä–µ–∑–¥ –≤ –≥–æ—Ä–æ–¥) - —É–±—Ä–∞–Ω A3
  'B2',              // –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω B4
  'C3',              // —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω C1
  'D2', 'D4',        // —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü
  'E1',              // –ø—è—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü - —É–±—Ä–∞–Ω E3
  'F2', 'F4',        // —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü
  'G1', 'G3', 'G4'   // –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ã–µ–∑–¥ –∏–∑ –≥–æ—Ä–æ–¥–∞) - —É–±—Ä–∞–Ω G2
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–µ
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

setupApp();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
timeManager = new TimeManager();
pauseManager = new PauseManager();
journalManager = new JournalManager(timeManager);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –¥–æ–º–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è JournalManager
journalManager.setLocationStartTime('–î–æ–º');

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
timeManager.setSpeedMultiplier(pauseManager.getSpeedMultiplier());
timeManager.setPaused(pauseManager.isPaused());

// –°–æ–∑–¥–∞–µ–º panningController —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ setupWorld
let panningController;

setupWorld();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dayNightManager –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è PIXI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
dayNightManager = new DayNightManager(PIXI, CONFIG);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UIRenderer
uiRenderer = new UIRenderer(CONFIG, timeManager, pauseManager, dayNightManager, panningController, journalManager);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
uiRenderer.init();

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ –¥–Ω—è/–Ω–æ—á–∏ –∏ –ø–∞—É–∑—ã –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setTimeout(() => {
  dayNightManager.updateDayNightModeText();
  pauseManager.updatePauseModeText();
}, 100);

createCar();
layout();
window.addEventListener('resize', () => {
  // –£–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  layout();

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  if (typeof panningController !== 'undefined' && panningController && panningController.isFullscreenMode()) {
    panningController.toggleFullscreen(); // –≤—ã–∫–ª—é—á–∞–µ–º
    panningController.toggleFullscreen(); // –≤–∫–ª—é—á–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∏–Ω–¥–µ–∫—Å—ã
function parseIntersectionCoordinate (coord) {
  const letter = coord.charAt(0);
  const number = parseInt(coord.slice(1));
  const i = letter.charCodeAt(0) - 65; // A=0, B=1, C=2...
  const j = number - 1; // 1=0, 2=1, 3=2...
  return { i, j };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
function shouldHaveTrafficLight (i, j) {
  const coord = String.fromCharCode(65 + i) + (j + 1);
  return TRAFFIC_LIGHTS_CONFIG.includes(coord);
}

function setupApp () {
  app = new PIXI.Application({
    width: 1200,
    height: 800,
    autoDensity: true,
    resolution: window.devicePixelRatio || 1,
    backgroundColor: 0x3a6f3e
  });
  // –î–æ–±–∞–≤–ª—è–µ–º canvas –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
  const gameContainer = document.querySelector('.game-container');
  gameContainer.appendChild(app.view);
  // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
  app.stage.eventMode = 'static';
  app.stage.hitArea = new PIXI.Rectangle(0, 0, 1200, 800);
}

function setupWorld () {
  world = new PIXI.Container();
  app.stage.addChild(world);
  
  gridLayer = new PIXI.Container();
  roadsLayer = new PIXI.Container();
  lotsLayer = new PIXI.Container();
  zonesLayer = new PIXI.Container();
  labelsLayer = new PIXI.Container();
  intersectionsLayer = new PIXI.Container();
  decorLayer = new PIXI.Container();
  trafficLightsLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ (–ø–æ–≤–µ—Ä—Ö –º–∞—à–∏–Ω)
  borderLayer = new PIXI.Container();
  lightingLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞ (–ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)

  // –î–µ–ª–∞–µ–º world –∏ —Å–ª–æ–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è dayNightManager
  window.world = world;
  window.decorLayer = decorLayer;
  window.trafficLightsLayer = trafficLightsLayer;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WorldRenderer
  worldRenderer = new WorldRenderer(CONFIG, app);
  worldRenderer.init(world, {
    grid: gridLayer,
    roads: roadsLayer,
    lots: lotsLayer,
    zones: zonesLayer,
    intersections: intersectionsLayer,
    trafficLights: trafficLightsLayer,
    labels: labelsLayer,
    decor: decorLayer,
    border: borderLayer
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
  world.addChild(gridLayer);
  world.addChild(roadsLayer);
  world.addChild(intersectionsLayer);
  world.addChild(lotsLayer);
  world.addChild(zonesLayer);
  world.addChild(labelsLayer);
  world.addChild(borderLayer);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorldRenderer –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  worldRenderer.render(zoneGeometry);
  // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ª–æ–µ (–ø–æ–∫–∞ —á—Ç–æ –≤ trafficLightsLayer)
  createTrafficLightsForAllIntersections(trafficLightsLayer);

  // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ—á–Ω–æ–π –æ–≤–µ—Ä–ª–µ–π (–ü–ï–†–ï–î –º–∞—à–∏–Ω–æ–π)
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ dayNightManager –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  // –û–≤–µ—Ä–ª–µ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ –≤ updateNightMode

  // –î–æ–±–∞–≤–ª—è–µ–º decorLayer (–º–∞—à–∏–Ω–∞) - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
  world.addChild(decorLayer);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã - –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
  world.addChild(trafficLightsLayer);

  uiLayer = new PIXI.Container();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è –ü–ï–†–ï–î UI (–Ω–æ –ø–æ—Å–ª–µ –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
  lightingLayer.zIndex = 1000; // –ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
  app.stage.addChild(lightingLayer);

  uiLayer.zIndex = 2000; // –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
  app.stage.addChild(uiLayer);

  const pauseButton = document.getElementById('pause-button');
  const speedButton = document.getElementById('speed-button');
  const zoomButton = document.getElementById('zoom-button');
  const zoomInButton = document.getElementById('zoom-in-button');
  const zoomOutButton = document.getElementById('zoom-out-button');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã
  pauseButton.addEventListener('click', () => {
    pauseManager.togglePause();
    timeManager.setPaused(pauseManager.isPaused());
    pauseManager.showSpeedNotification(pauseManager.isPaused() ? '–ü–ê–£–ó–ê' : '–í–û–ó–û–ë–ù–û–í–õ–ï–ù–û');
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
  speedButton.addEventListener('click', () => {
    const currentSpeed = pauseManager.getSpeedMultiplier();
    let newSpeed;
    
    // –¶–∏–∫–ª: x1 ‚Üí x2 ‚Üí x5 ‚Üí x1
    if (currentSpeed === 1) {
      newSpeed = 2;
    } else if (currentSpeed === 2) {
      newSpeed = 5;
    } else {
      newSpeed = 1;
    }
    
    pauseManager.setSpeedBoosted(newSpeed > 1);
    pauseManager.setSpeedMultiplier(newSpeed);
    timeManager.setSpeedMultiplier(newSpeed);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
    speedButton.textContent = `x${newSpeed}`;
    speedButton.classList.toggle('boosted', newSpeed > 1);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    console.log(`‚ö° –°–ö–û–†–û–°–¢–¨ –ò–ì–†–´: x${newSpeed} ${newSpeed > 1 ? '–£–°–ö–û–†–ï–ù–û' : '–ù–û–†–ú–ê–õ–¨–ù–ê–Ø'}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    pauseManager.showSpeedNotification(`–°–ö–û–†–û–°–¢–¨ x${newSpeed}`);
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
  const initialSpeed = pauseManager.getSpeedMultiplier();
  speedButton.textContent = `x${initialSpeed}`;
  speedButton.classList.toggle('boosted', initialSpeed > 1);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  zoomButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.toggleZoom();
      uiRenderer.updateZoomButton();
    }
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
  zoomInButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.zoomIn();
      uiRenderer.updateZoomButton();
    }
  });

  zoomOutButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.zoomOut();
      uiRenderer.updateZoomButton();
    }
  });


  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º panningController
  panningController = new PanningController();
  panningController.setWorld(world);
  panningController.setOnZoomChange((scale) => {
    if (uiRenderer) {
      uiRenderer.updateZoomButton();
    }
  });
  panningController.setOnFullscreenChange((isFullscreen) => {
    if (uiRenderer) {
      uiRenderer.updateZoomButton();
    }
  });

  // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∫–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã

  // –õ—ë–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∑–æ–Ω–∞ —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å
  setTimeout(() => {
    // –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –ø—É—Ç—å, –∫–æ–≥–¥–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
    if (carRenderer) {
      const newPath = buildCarPath();
      carRenderer.setPath(newPath);
    }
  }, 0);
}


// –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –¥–æ—Ä–æ–≥ –∏–∑ WorldRenderer
function getHorizontalRoadYs() {
  return worldRenderer ? worldRenderer.getHorizontalRoadYs() : [];
}

function getVerticalRoadXs() {
  return worldRenderer ? worldRenderer.getVerticalRoadXs() : [];
}


function createTrafficLightsForAllIntersections (layer) {
  intersectionKeyToTL.clear();
  const { maxVerticalPos } = worldRenderer ? worldRenderer.getRoadPositions() : { maxVerticalPos: 0 };
  const horizontalRoadYs = getHorizontalRoadYs();
  const verticalRoadXs = getVerticalRoadXs();

  for (let j = 0; j < horizontalRoadYs.length; j++) {
    for (let i = 0; i < verticalRoadXs.length; i++) {
      const x = verticalRoadXs[i];
      const y = horizontalRoadYs[j];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
      if (!shouldHaveTrafficLight(i, j)) {
        continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Ä–æ–≥–∏ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      const roadConnections = {
        north: j > 0 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —Å–µ–≤–µ—Ä: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
        south: j < horizontalRoadYs.length - 1 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —é–≥: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
        west: i > 0, // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –∑–∞–ø–∞–¥, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        east: i < verticalRoadXs.length - 1 // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
      };

      const tl = initTrafficLightsForIntersection({
        PIXI,
        app,
        layer,
        x,
        y,
        roadWidth: CONFIG.ROAD_WIDTH,
        lampRadius: 9,
        cycle: { green: 750, yellow: 200 },
        roadConnections
      });
      const key = `${x},${y}`;
      intersectionKeyToTL.set(key, tl);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã
      trafficCoordinator.addTrafficLight(key, tl, x, y);
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞ –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
  if (verticalRoadXs.length > 0 && horizontalRoadYs.length > 0) {
    trafficCoordinator.setWaveOrigin(verticalRoadXs[0], horizontalRoadYs[0]);
  }
}

// –§—É–Ω–∫—Ü–∏—è drawDashedPath –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ WorldRenderer



function layout () {
  const w = 1200;
  const h = 800;
  const scale = Math.min(w / CONFIG.WORLD_WIDTH, h / CONFIG.WORLD_HEIGHT);

  // –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±, –µ—Å–ª–∏ panningController –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
  if (!panningController || panningController.getCurrentScale() === 1) {
    world.scale.set(scale);
    world.pivot.set(0, 0);
    world.position.set(
      (w - CONFIG.WORLD_WIDTH * scale) / 2,
      (h - CONFIG.WORLD_HEIGHT * scale) / 2
    );
  }

  labelsLayer.children.forEach(label => {
    label.scale.set(1 / scale);
  });

  // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ world, –ø–æ—ç—Ç–æ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
  initEntities();
}

// ======= –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≥—Ä–∞—Ñ—É –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤ –∏ –∑–¥–∞–Ω–∏–π =======
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤




function getDestinationCenter (locationKey) {
  const z = zoneGeometry.get(locationKey);
  if (z && z.center) return z.center;
  // fallback: –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
  const def = CONFIG.ZONES[locationKey];
  const verticalRoadXs = getVerticalRoadXs();
  const horizontalRoadYs = getHorizontalRoadYs();
  if (!def) return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
  if (def.type === 'rect') return { x: def.x + def.w / 2, y: def.y + def.h / 2 };
  if (def.type === 'circle') return { x: def.x, y: def.y };
  return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
}

// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: —Ç–æ–ª—å–∫–æ I->I –∏ I->B/B->I
function buildCarPath () {
  const currentDestination = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
  if (!currentDestination) return [];

  const verticalRoadXs = getVerticalRoadXs();
  const horizontalRoadYs = getHorizontalRoadYs();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫
  let startIJ;
  if (carRenderer && carRenderer.getCar() && currentRouteIndex !== 0) {
    // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –¥–æ–º), –Ω–∞—á–∏–Ω–∞–µ–º —Å –µ—ë —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const carPos = carRenderer.getCar().position;
    startIJ = getNearestIntersectionIJ(carPos.x, carPos.y, verticalRoadXs, horizontalRoadYs);
  } else {
    // –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –Ω–µ—Ç –º–∞—à–∏–Ω—ã)
    const housePos = getDestinationCenter('house');
    startIJ = getNearestIntersectionIJ(housePos.x, housePos.y, verticalRoadXs, horizontalRoadYs);
  }

  const destCenter = getDestinationCenter(currentDestination.location);
  const graphPath = buildGraphPathToBuilding(startIJ, destCenter, verticalRoadXs, horizontalRoadYs);

  // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
  const startIntersection = getIntersectionCoord(startIJ.i, startIJ.j, verticalRoadXs, horizontalRoadYs);
  let path;
  
  if (carRenderer && carRenderer.getCar() && currentRouteIndex !== 0) {
    // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ò —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
    const carPos = carRenderer.getCar().position;
    const needsPrefix = Math.abs(carPos.x - startIntersection.x) > 1 || Math.abs(carPos.y - startIntersection.y) > 1;
    
    if (needsPrefix) {
      // –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
      path = [{ x: carPos.x, y: carPos.y }, startIntersection, ...graphPath];
    } else {
      // –ú–∞—à–∏–Ω–∞ —É–∂–µ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
      path = [startIntersection, ...graphPath];
    }
  } else {
    // –ú–∞—à–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
    path = [startIntersection, ...graphPath];
  }

  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω—ã,
  // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
  const needsPrefix = currentDestination.location !== 'house' && carRenderer && (Math.abs(carRenderer.getCar().position.x - startIntersection.x) > 1 || Math.abs(carRenderer.getCar().position.y - startIntersection.y) > 1);
  if (needsPrefix && savedCarState && savedCarState.direction !== 0 && path.length >= 2) {
    const currentPos = path[0];
    const nextPos = path[1];
    const dx = nextPos.x - currentPos.x;
    const dy = nextPos.y - currentPos.y;
    const currentLength = Math.hypot(dx, dy);

    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const currentSegmentAngle = Math.atan2(dy, dx);
    const angleDifference = Math.abs(currentSegmentAngle - savedCarState.direction);

    // –ï—Å–ª–∏ —É–≥–ª—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–±–æ–ª—å—à–µ 30 –≥—Ä–∞–¥—É—Å–æ–≤), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
    if (angleDifference > Math.PI / 6 || currentLength < 50) {
      const directionX = Math.cos(savedCarState.direction);
      const directionY = Math.sin(savedCarState.direction);

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
      const intermediateDistance = Math.min(60, currentLength * 0.3);
      const intermediatePoint = {
        x: currentPos.x + directionX * intermediateDistance,
        y: currentPos.y + directionY * intermediateDistance
      };

      path.splice(1, 0, intermediatePoint);
      debugLogAlways(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: —É–≥–æ–ª —Ä–∞–∑–Ω–æ—Å—Ç–∏ ${(angleDifference * 180 / Math.PI).toFixed(1)}¬∞, –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ${currentLength.toFixed(1)}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${intermediateDistance.toFixed(1)}`);
    }
  }

  console.log(`üó∫Ô∏è Graph path to ${currentDestination.name}:`, path.map(p => `(${p.x.toFixed(0)},${p.y.toFixed(0)})`).join(' -> '));
  console.log(`üöó Car will start from segment 0: (${path[0]?.x?.toFixed(0) || 'N/A'},${path[0]?.y?.toFixed(0) || 'N/A'}) to (${path[1]?.x?.toFixed(0) || 'N/A'},${path[1]?.y?.toFixed(0) || 'N/A'})`);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  if (savedCarState) {
    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, {
      hasNextIntersection: !!savedCarState.nextIntersection,
      nextIntersection: savedCarState.nextIntersection,
      direction: savedCarState.direction,
      directionDegrees: (savedCarState.direction * 180 / Math.PI).toFixed(1),
      nextDestination: savedCarState.nextDestination?.name,
      currentPosition: savedCarState.currentPosition
    });
  }

  return path;
}

function createCar () {
  // –°–æ–∑–¥–∞–µ–º CarRenderer
  carRenderer = new CarRenderer(CONFIG, pauseManager);
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—É —Å –ø–æ–º–æ—â—å—é CarRenderer (–±–µ–∑ –ø—É—Ç–∏ –ø–æ–∫–∞)
  car = carRenderer.createCar({
    carPath: [],
    currentRouteIndex: currentRouteIndex,
    savedCarState: savedCarState,
    getDestinationCenter: getDestinationCenter
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ CarRenderer
  avatar = carRenderer.getAvatar();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
  carTrafficController = new CarTrafficController();

  // –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞
  currentRouteIndex = 0; // –¥–æ–º
  stayTimer = CONFIG.ROUTE_SCHEDULE[0].stayHours; // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–º–∞
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
  if (uiRenderer) {
    uiRenderer.setCurrentRouteIndex(currentRouteIndex);
  }

  // –ù–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–µ–∑–¥–∫—É —Å—Ä–∞–∑—É - –æ–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è

  // –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –ø—É—Ç—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
  carPath = buildCarPath();
  carRenderer.setPath(carPath);
  
  // –ï—Å–ª–∏ carEntity —É–∂–µ —Å–æ–∑–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—É—Ç—å
  if (carEntity) {
    carEntity.setPath(carPath);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ —É–∂–µ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–º–∞)
    carEntity.setAtDestination(true);
    carEntity.setStayTimer(CONFIG.ROUTE_SCHEDULE[0].stayHours);
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ —É–∂–µ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–¥–æ–º–∞)
  carRenderer.setAtDestination(true);
  carRenderer.setStayTimer(CONFIG.ROUTE_SCHEDULE[0].stayHours);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
  const gameTime = timeManager.getGameTime();
  lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes;
  lastStayTimerDay = gameTime.day;

  decorLayer.addChild(car);
  app.ticker.add(updateCar);
  app.ticker.add(() => {
    timeManager.update();
    if (uiRenderer) {
      uiRenderer.updateDateTimeDisplay();
    }
    const gameTime = timeManager.getGameTime();
    dayNightManager.updateNightMode(gameTime);
    updateStayTimer();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–∞—à–∏–Ω—ã
    if (uiRenderer) {
      uiRenderer.updateRouteDisplay(carRenderer ? carRenderer.isAtDestination() : false);
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å—å UI (–≤–∫–ª—é—á–∞—è –∂—É—Ä–Ω–∞–ª)
      uiRenderer.update();
    }
  });

  uiRenderer.updateRouteDisplay(carRenderer ? carRenderer.isAtDestination() : false);
}

function updateGameTime () {
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ TimeManager
  timeManager.setPaused(pauseManager.isPaused());
  timeManager.setSpeedMultiplier(pauseManager.getSpeedMultiplier());
  timeManager.update();

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  updateDateTimeDisplay();

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
  const gameTime = timeManager.getGameTime();
  dayNightManager.updateNightMode(gameTime);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (dayNightManager.isNightModeActive()) {
    dayNightManager.applyNightColorFilter();
  } else {
    dayNightManager.resetDayColorFilter();
  }

  // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
  if (carRenderer && carRenderer.isAtDestination()) {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ TimeManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞
    const gameTime = timeManager.getGameTime();
    const currentTime = gameTime.hours * 60 + gameTime.minutes;
    const currentDay = gameTime.day;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
    updateStayTimer();
  }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞
function nextDestination () {
  debugLogAlways(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
  const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
  if (journalManager && currentDest) {
    journalManager.endLocationStay(currentDest.name);
  }

  // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∑–¥–∞–Ω–∏–∏
  hideBuildingAvatar();

  currentRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ UIRenderer
  if (uiRenderer) {
    uiRenderer.setCurrentRouteIndex(currentRouteIndex);
  }
  
  if (carRenderer) {
    carRenderer.setAtDestination(false);
    carRenderer.setStayTimer(0);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    if (savedCarState) {
      carRenderer.setRotation(savedCarState.direction);

      if (savedCarState.nextIntersection) {
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É: ${savedCarState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(savedCarState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É (${savedCarState.nextIntersection.x}, ${savedCarState.nextIntersection.y})`);
      } else {
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${savedCarState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(savedCarState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ ${savedCarState.nextDestination.name} (${savedCarState.nextDestCenter.x}, ${savedCarState.nextDestCenter.y})`);
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      savedCarState = null;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const newPath = buildCarPath();
    carRenderer.setPath(newPath);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
    if (carEntity) {
      carEntity.setCurrentRouteIndex(currentRouteIndex);
      carEntity.setPath(newPath);
      carEntity.setAtDestination(false);
      carEntity.setStayTimer(0);
    }
  }

  // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–¥–∞–Ω–∏—è
  const newDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
  if (journalManager && newDest) {
    journalManager.startTrip(newDest.name, newDest.location);
  }

  uiRenderer.updateRouteDisplay(carRenderer ? carRenderer.isAtDestination() : false);
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
function saveCarStateForNextDestination () {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  const nextRouteIndex = (currentRouteIndex + 1) % CONFIG.ROUTE_SCHEDULE.length;
  const nextDestination = CONFIG.ROUTE_SCHEDULE[nextRouteIndex];

  if (!nextDestination) return null;

  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  const nextDestCenter = getDestinationCenter(nextDestination.location);

  // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
  const currentPos = carRenderer ? carRenderer.getCar().position : { x: 0, y: 0 };
  const verticalRoadXs = getVerticalRoadXs();
  const horizontalRoadYs = getHorizontalRoadYs();
  const currentIJ = getNearestIntersectionIJ(currentPos.x, currentPos.y, verticalRoadXs, horizontalRoadYs);
  const nextPath = buildGraphPathToBuilding(currentIJ, nextDestCenter, verticalRoadXs, horizontalRoadYs);

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –≤ –ø—É—Ç–∏ (–Ω–µ —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è)
  let nextIntersection = null;
  if (nextPath.length >= 2) {
    // –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è - —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É –∑–¥–∞–Ω–∏—è)
    nextIntersection = nextPath[nextPath.length - 2];
  } else if (nextPath.length === 1) {
    // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
    nextIntersection = nextPath[0];
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ fallback
  let direction;
  if (nextIntersection) {
    const dx = nextIntersection.x - currentPos.x;
    const dy = nextIntersection.y - currentPos.y;
    direction = Math.atan2(dy, dx);
    debugLogAlways(`üéØ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫: (${nextIntersection.x}, ${nextIntersection.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
  } else {
    const dx = nextDestCenter.x - currentPos.x;
    const dy = nextDestCenter.y - currentPos.y;
    direction = Math.atan2(dy, dx);
    debugLogAlways(`üéØ Fallback –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: (${nextDestCenter.x}, ${nextDestCenter.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
  }

  return {
    nextDestination: nextDestination,
    nextDestCenter: nextDestCenter,
    nextIntersection: nextIntersection,
    direction: direction,
    currentPosition: { x: car.position.x, y: car.position.y }
  };
}

// –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –ø—É—Ç–∏ (–æ–±–æ—á–∏–Ω—ã)
function checkArrival () {
  const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
  if (carRenderer && !carRenderer.isAtDestination()) {
    debugLogAlways(`üè† –ü—Ä–∏–±—ã—Ç–∏–µ –≤ ${currentDest.name} (–æ–±–æ—á–∏–Ω–∞)`);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ—Ä–æ–≥—É –≤ –∂—É—Ä–Ω–∞–ª–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–¥–∞–Ω–∏–µ
    if (journalManager && currentDest) {
      journalManager.endTrip(currentDest.name);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –º–µ—Å—Ç–µ
      journalManager.setLocationStartTime(currentDest.name);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    savedCarState = saveCarStateForNextDestination();
    debugLogAlways(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, savedCarState);

    carRenderer.setAtDestination(true);
    carRenderer.setStayTimer(currentDest.stayHours);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å carEntity
    if (carEntity) {
      carEntity.setAtDestination(true);
      carEntity.setStayTimer(currentDest.stayHours);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
    const gameTime = timeManager.getGameTime();
    lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
    lastStayTimerDay = gameTime.day; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å
    uiRenderer.updateRouteDisplay(carRenderer ? carRenderer.isAtDestination() : false);
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
    showBuildingAvatar(currentDest.location);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
function showBuildingAvatar (locationKey) {
  const buildingCenter = getDestinationCenter(locationKey);
  if (!buildingCenter) return;

  // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –º–∞—à–∏–Ω–∫–∏
  if (carRenderer) {
    carRenderer.setAvatarVisible(false);
  }

  // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏ (—Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –≤ –º–∞—à–∏–Ω–∫–µ)
  const avatarContainer = new PIXI.Container();

  // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ–Ω (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
  const background = new PIXI.Graphics();
  background.beginFill(0xffffff, 0.9);
  background.lineStyle(2, 0x333333);
  background.drawRect(-30, -30, 60, 60);
  background.endFill();
  avatarContainer.addChild(background);

  // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
  const buildingAvatar = PIXI.Sprite.from('/public/shina.jpeg');
  buildingAvatar.anchor.set(0.5);
  buildingAvatar.width = 60;
  buildingAvatar.height = 60;
  avatarContainer.addChild(buildingAvatar);

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∑–¥–∞–Ω–∏—è
  const zone = zoneGeometry.get(locationKey);
  if (zone && zone.bounds) {
    if (zone.type === 'circle') {
      // –î–ª—è –∫—Ä—É–≥–ª—ã—Ö –∑–æ–Ω (–∏–Ω—Å—Ç–∏—Ç—É—Ç) - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
      avatarContainer.position.set(
        zone.bounds.x + zone.bounds.r - 30,
        zone.bounds.y + zone.bounds.r - 30
      );
    } else {
      // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∑–æ–Ω
      avatarContainer.position.set(
        zone.bounds.x + zone.bounds.w - 30,
        zone.bounds.y + zone.bounds.h - 30
      );
    }
  } else {
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è
    avatarContainer.position.set(
      buildingCenter.x + 150,
      buildingCenter.y + 150
    );
  }

  decorLayer.addChild(avatarContainer);
  buildingAvatars.set(locationKey, avatarContainer);

  console.log(`üè† –ü–æ–∫–∞–∑–∞–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${locationKey}`, {
    zone: zone,
    buildingCenter: buildingCenter,
    position: avatarContainer.position
  });
}

// –°–∫—Ä—ã—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
function hideBuildingAvatar () {
  const currentDest = CONFIG.ROUTE_SCHEDULE[currentRouteIndex];
  const avatarContainer = buildingAvatars.get(currentDest.location);
  if (avatarContainer && avatarContainer.parent) {
    avatarContainer.parent.removeChild(avatarContainer);
    buildingAvatars.delete(currentDest.location);
    console.log(`üè† –°–∫—Ä—ã—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${currentDest.location}`);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—à–∏–Ω–∫–µ
  if (carRenderer) {
    carRenderer.setAvatarVisible(true);
  }
}

function updateCar (delta) {
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
  updateEntities(delta);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º carEntity —Å carRenderer –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  if (carEntity && carRenderer) {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–æ—Ä–æ—Ç
    const carSprite = carRenderer.getCar();
    if (carSprite) {
      carSprite.position.set(carEntity.getPosition().x, carEntity.getPosition().y);
      carSprite.rotation = carEntity.getRotation();
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    const avatar = carRenderer.getAvatar();
    if (avatar) {
      avatar.rotation = -carEntity.getRotation();
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å carEntity
    carPath = carEntity.getPath();
    carSegment = carEntity.getCurrentSegment();
    carProgress = carEntity.getProgress();
    stayTimer = carEntity.getStayTimer();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º UI
  if (uiRenderer) {
    uiRenderer.updateRouteDisplay(carEntity ? carEntity.isAtDestination() : false);
  }
}


// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
const gameContainer = document.querySelector('.game-container');
gameContainer.style.width = '1200px';
gameContainer.style.height = '800px';
gameContainer.style.overflow = 'auto';


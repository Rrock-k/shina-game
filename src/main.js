
import { initTrafficLightsForIntersection, getDirectionForSegment, Direction, TrafficLightCoordinator } from './systems/trafficLights.js';
import { CarTrafficController } from './systems/carTrafficControl.js';
import { PanningController } from './systems/panning.js';
import { CONFIG, BASE_CAR_SPEED } from './config/gameConfig.js';
import { TimeManager } from './game/TimeManager.js';
import { PauseManager } from './game/PauseManager.js';
import { DayNightManager } from './game/DayNightManager.js';
import { WorldRenderer } from './rendering/WorldRenderer.js';

// globals
let app, world, gridLayer, roadsLayer, lotsLayer, zonesLayer, labelsLayer, intersectionsLayer, decorLayer, trafficLightsLayer, borderLayer, uiLayer, lightingLayer, car;
let carPath = [], carSegment = 0, carProgress = 0;
let avatar;
let horizontalRoadYs = [], verticalRoadXs = [];
let hoverLabel;
let carTrafficController;
let buildingAvatars = new Map(); // –∫–∞—Ä—Ç–∞ –∑–¥–∞–Ω–∏–π -> –º–∞–ª–µ–Ω—å–∫–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏

// –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
let timeManager, pauseManager, dayNightManager, worldRenderer;

// –î–ï–ë–ê–ì –ú–û–î
let DEBUG_MODE = true; // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å
let debugInfo = {
  frameCount: 0,
  lastLogTime: 0,
  logInterval: 1000 // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
};

// –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–û–†–û–°–¢–¨–Æ –ò –ü–ê–£–ó–û–ô (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ PauseManager)


// –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò –î–ù–Ø/–ù–û–ß–ò (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ DayNightManager)

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PauseManager)

// loadDayNightSettings –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ DayNightManager

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑–æ–π (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PauseManager)

// –î–µ–±–∞–≥-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function debugLog (message, data = null) {
  if (!DEBUG_MODE) return;
  const now = Date.now();
  if (now - debugInfo.lastLogTime > debugInfo.logInterval) {
    console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
    debugInfo.lastLogTime = now;
  }
}

// –î–µ–±–∞–≥-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function debugLogAlways (message, data = null) {
  if (!DEBUG_MODE) return;
  console.log(`üêõ DEBUG [${new Date().toLocaleTimeString()}]: ${message}`, data || '');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
// getMonthName –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ TimeManager

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ DayNightManager)
// isNightTime, createCityNightOverlay, updateNightMode

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
let lastStayTimerUpdate = 0;
let lastStayTimerDay = 0;

function updateStayTimer() {
  if (!isAtDestination) return;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–∑ timeManager
  const gameTime = timeManager.getGameTime();
  const currentTime = gameTime.hours * 60 + gameTime.minutes; // –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
  const currentDay = gameTime.day; // –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  if (currentTime !== lastStayTimerUpdate || currentDay !== lastStayTimerDay) {
    let timeDiff;
    
    // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
    if (currentDay !== lastStayTimerDay) {
      // –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ + –≤—Ä–µ–º—è —Å –ø–æ–ª—É–Ω–æ—á–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      timeDiff = (24 * 60 - lastStayTimerUpdate) + currentTime;
      console.log(`üåô –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: ${timeDiff} –º–∏–Ω—É—Ç`);
    } else {
      timeDiff = currentTime - lastStayTimerUpdate;
    }
    
    stayTimer -= timeDiff / 60; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—ã–µ —á–∞—Å—ã
    lastStayTimerUpdate = currentTime;
    lastStayTimerDay = currentDay;
    
    if (stayTimer <= 0) {
      // –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –µ–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
      console.log('üöó –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ');
      nextDestination();
    }
  }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –¥–Ω—è/–Ω–æ—á–∏
// –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –¥–Ω—è/–Ω–æ—á–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ DayNightManager)
// toggleDayNightMode, updateDayNightModeText

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —Å–≤–µ—Ç–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ DayNightManager)
// addLightSource, removeLightSource



// –§—É–Ω–∫—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ DayNightManager)
// applyNightColorFilter, resetDayColorFilter

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ TimeManager
// getDayOfWeekShort, getDayOfWeek, getDaysInMonth, formatGameDateTime


// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ—Å—Ç–∏
// showSpeedNotification –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ PauseManager

// –ì–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω, –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ
const zoneGeometry = new Map(); // key -> { center:{x,y}, bounds:{x,y,w,h} | {x,y,r}, type }

// –°–∏—Å—Ç–µ–º–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ TimeManager)
let datetimeDisplay;
let routeDisplay;
let currentRouteIndex = 0;
let stayTimer = 0; // —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ
let isAtDestination = false; // –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
let savedCarState = null; // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∑–¥–∞–Ω–∏–µ: {nextIntersection: {x,y}, direction: number, currentPosition: {x,y}}

// –°–∏—Å—Ç–µ–º–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ DayNightManager)
// isNightMode, cityNightOverlay, nightTransitionSpeed, currentCityNightAlpha
// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –ø–æ –∫–ª—é—á—É –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞
const intersectionKeyToTL = new Map();
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
const trafficCoordinator = new TrafficLightCoordinator(45); // —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—à–∏–Ω ~45 –∫–º/—á

// üö¶ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–í–ï–¢–û–§–û–†–û–í üö¶
// –ú–∞—Å—Å–∏–≤ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤, –≥–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã
// –§–æ—Ä–º–∞—Ç: 'A1', 'B2', 'C3' –∏ —Ç.–¥. (–±—É–∫–≤–∞ = —Å—Ç–æ–ª–±–µ—Ü –¥–æ—Ä–æ–≥–∏, —Ü–∏—Ñ—Ä–∞ = —Ä—è–¥ –¥–æ—Ä–æ–≥–∏)
// –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤!
const TRAFFIC_LIGHTS_CONFIG = [
  'A2', 'A3',        // –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ä–µ–∑–¥ –≤ –≥–æ—Ä–æ–¥)
  'B2', 'B4',        // –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü  
  'C1', 'C3',        // —Ç—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü
  'D2', 'D4',        // —á–µ—Ç–≤–µ—Ä—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü
  'E1', 'E3',        // –ø—è—Ç—ã–π —Å—Ç–æ–ª–±–µ—Ü
  'F2', 'F4',        // —à–µ—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü
  'G1', 'G2', 'G3', 'G4' // –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—ã–µ–∑–¥ –∏–∑ –≥–æ—Ä–æ–¥–∞) - –≤—Å–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏
];

// üöõ –ú–ê–†–®–†–£–¢ –®–ò–ù–´ üöõ
// –ú–∞—Å—Å–∏–≤ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º: –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–≤ –∏–≥—Ä–æ–≤—ã—Ö —á–∞—Å–∞—Ö)
// –ü–æ–∑–∏—Ü–∏–∏ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∑–æ–Ω, –∞ –ù–ï –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã
const ROUTE_SCHEDULE = [
  { location: 'house', name: '–î–æ–º', stayHours: 2 },
  { location: 'institute', name: '–ò–Ω—Å—Ç–∏—Ç—É—Ç', stayHours: 2 },
  { location: 'work', name: '–†–∞–±–æ—Ç–∞', stayHours: 5 },
  { location: 'relatives', name: '–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏', stayHours: 1.5 },
  { location: 'box', name: '–ë–æ–∫—Å', stayHours: 1 },
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–µ
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ PauseManager

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–Ω—è/–Ω–æ—á–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ DayNightManager

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∂–∏–º–∞ –¥–Ω—è/–Ω–æ—á–∏ –∏ –ø–∞—É–∑—ã –≤ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(() => {
  dayNightManager.updateDayNightModeText();
  pauseManager.updatePauseModeText();
}, 100);

setupApp();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
timeManager = new TimeManager();
pauseManager = new PauseManager();

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
timeManager.setSpeedMultiplier(pauseManager.getSpeedMultiplier());
timeManager.setPaused(pauseManager.isPaused());

// –°–æ–∑–¥–∞–µ–º panningController —Ä–∞–Ω—å—à–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ setupWorld
let panningController;

setupWorld();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º dayNightManager –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è PIXI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
dayNightManager = new DayNightManager(PIXI, CONFIG);

createCar();
layout();
window.addEventListener('resize', () => {
  // –£–±–∏—Ä–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
  layout();

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  if (typeof panningController !== 'undefined' && panningController && panningController.isFullscreenMode()) {
    panningController.toggleFullscreen(); // –≤—ã–∫–ª—é—á–∞–µ–º
    panningController.toggleFullscreen(); // –≤–∫–ª—é—á–∞–µ–º —Å –Ω–æ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∏–Ω–¥–µ–∫—Å—ã
function parseIntersectionCoordinate (coord) {
  const letter = coord.charAt(0);
  const number = parseInt(coord.slice(1));
  const i = letter.charCodeAt(0) - 65; // A=0, B=1, C=2...
  const j = number - 1; // 1=0, 2=1, 3=2...
  return { i, j };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
function shouldHaveTrafficLight (i, j) {
  const coord = String.fromCharCode(65 + i) + (j + 1);
  return TRAFFIC_LIGHTS_CONFIG.includes(coord);
}

function setupApp () {
  app = new PIXI.Application({
    width: 1200,
    height: 800,
    autoDensity: true,
    resolution: window.devicePixelRatio || 1,
    backgroundColor: 0x3a6f3e
  });
  // –î–æ–±–∞–≤–ª—è–µ–º canvas –≤ –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
  const gameContainer = document.querySelector('.game-container');
  gameContainer.appendChild(app.view);
  // –í–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
  app.stage.eventMode = 'static';
  app.stage.hitArea = new PIXI.Rectangle(0, 0, 1200, 800);
}

function setupWorld () {
  world = new PIXI.Container();
  app.stage.addChild(world);
  
  gridLayer = new PIXI.Container();
  roadsLayer = new PIXI.Container();
  lotsLayer = new PIXI.Container();
  zonesLayer = new PIXI.Container();
  labelsLayer = new PIXI.Container();
  intersectionsLayer = new PIXI.Container();
  decorLayer = new PIXI.Container();
  trafficLightsLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ (–ø–æ–≤–µ—Ä—Ö –º–∞—à–∏–Ω)
  borderLayer = new PIXI.Container();
  lightingLayer = new PIXI.Container(); // —Å–ª–æ–π –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞ (–ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)

  // –î–µ–ª–∞–µ–º world –∏ —Å–ª–æ–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è dayNightManager
  window.world = world;
  window.decorLayer = decorLayer;
  window.trafficLightsLayer = trafficLightsLayer;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WorldRenderer
  worldRenderer = new WorldRenderer(CONFIG, app);
  worldRenderer.init(world, {
    grid: gridLayer,
    border: borderLayer
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
  world.addChild(gridLayer);
  world.addChild(roadsLayer);
  world.addChild(intersectionsLayer);
  world.addChild(lotsLayer);
  world.addChild(zonesLayer);
  world.addChild(labelsLayer);
  world.addChild(borderLayer);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º WorldRenderer –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  worldRenderer.render();
  
  drawRoads(roadsLayer);
  createIntersections(intersectionsLayer);
  drawLots(lotsLayer);
  drawZones(zonesLayer);
  // placeLabels(labelsLayer);
  // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ª–æ–µ (–ø–æ–∫–∞ —á—Ç–æ –≤ trafficLightsLayer)
  createTrafficLightsForAllIntersections(trafficLightsLayer);

  // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ—á–Ω–æ–π –æ–≤–µ—Ä–ª–µ–π (–ü–ï–†–ï–î –º–∞—à–∏–Ω–æ–π)
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ dayNightManager –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  // –û–≤–µ—Ä–ª–µ–π –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ –≤ updateNightMode

  // –î–æ–±–∞–≤–ª—è–µ–º decorLayer (–º–∞—à–∏–Ω–∞) - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
  world.addChild(decorLayer);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä—ã - –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–≤–µ—Ä—Ö –æ–≤–µ—Ä–ª–µ—è
  world.addChild(trafficLightsLayer);
  // drawAlina(decorLayer);

  uiLayer = new PIXI.Container();

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –æ—Å–≤–µ—â–µ–Ω–∏—è –ü–ï–†–ï–î UI (–Ω–æ –ø–æ—Å–ª–µ –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è)
  lightingLayer.zIndex = 1000; // –ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è
  app.stage.addChild(lightingLayer);

  uiLayer.zIndex = 2000; // –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
  app.stage.addChild(uiLayer);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  datetimeDisplay = document.getElementById('game-datetime');
  routeDisplay = document.getElementById('route-info');
  const pauseButton = document.getElementById('pause-button');
  const speedButton = document.getElementById('speed-button');
  const zoomButton = document.getElementById('zoom-button');
  const zoomInButton = document.getElementById('zoom-in-button');
  const zoomOutButton = document.getElementById('zoom-out-button');

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã
  pauseButton.addEventListener('click', () => {
    pauseManager.togglePause();
    timeManager.setPaused(pauseManager.isPaused());
    pauseManager.showSpeedNotification(pauseManager.isPaused() ? '–ü–ê–£–ó–ê' : '–í–û–ó–û–ë–ù–û–í–õ–ï–ù–û');
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏
  speedButton.addEventListener('click', () => {
    const newBoosted = !pauseManager.isSpeedBoostedEnabled();
    pauseManager.setSpeedBoosted(newBoosted);
    pauseManager.setSpeedMultiplier(newBoosted ? 5 : 1);
    timeManager.setSpeedMultiplier(pauseManager.getSpeedMultiplier());

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
    speedButton.textContent = newBoosted ? 'x5' : 'x1';
    speedButton.classList.toggle('boosted', newBoosted);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    console.log(`‚ö° –°–ö–û–†–û–°–¢–¨ –ò–ì–†–´: ${newBoosted ? 'x5 –£–°–ö–û–†–ï–ù–û' : 'x1 –ù–û–†–ú–ê–õ–¨–ù–ê–Ø'}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    pauseManager.showSpeedNotification(newBoosted ? '–°–ö–û–†–û–°–¢–¨ x5' : '–°–ö–û–†–û–°–¢–¨ x1');
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
  speedButton.textContent = pauseManager.isSpeedBoostedEnabled() ? 'x5' : 'x1';
  speedButton.classList.toggle('boosted', pauseManager.isSpeedBoostedEnabled());

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  zoomButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.toggleZoom();
      updateZoomButton();
    }
  });

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
  zoomInButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.zoomIn();
      updateZoomButton();
    }
  });

  zoomOutButton.addEventListener('click', () => {
    if (typeof panningController !== 'undefined' && panningController) {
      panningController.zoomOut();
      updateZoomButton();
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
  function updateZoomButton () {
    if (typeof panningController !== 'undefined' && panningController) {
      const isFullscreen = panningController.isFullscreenMode();
      if (isFullscreen) {
        zoomButton.textContent = '–û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä';
        zoomButton.classList.add('boosted');
      } else {
        const scale = panningController.getCurrentScale();
        zoomButton.textContent = `–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω`;
        zoomButton.classList.toggle('boosted', scale > 1.1);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
      if (isMobile) {
        const scale = panningController.getCurrentScale();
        zoomInButton.disabled = scale >= 10;
        zoomOutButton.disabled = scale <= 0.1;
      }
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º panningController
  panningController = new PanningController();
  panningController.setWorld(world);
  panningController.setOnZoomChange((scale) => {
    if (typeof updateZoomButton === 'function') {
      updateZoomButton();
    }
  });
  panningController.setOnFullscreenChange((isFullscreen) => {
    if (typeof updateZoomButton === 'function') {
      updateZoomButton();
    }
  });

  // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∫–Ω–æ–ø–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é-–±—É—Ä–≥–µ—Ä
  initMenu();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–ª–µ–∏
  updateRouteDisplay();
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–ª–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  if (datetimeDisplay) {
    datetimeDisplay.innerHTML = timeManager.formatDateTime();
  }
  // –õ—ë–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∑–æ–Ω–∞ —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –ø–æ—Å—Ç—Ä–æ–∏–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å
  setTimeout(() => {
    // –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏–º –ø—É—Ç—å, –∫–æ–≥–¥–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞
    if (car) {
      carPath = buildCarPath();
    }
  }, 0);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é-–±—É—Ä–≥–µ—Ä–∞
function initMenu () {
  const burgerButton = document.getElementById('burger-button');
  const menuModal = document.getElementById('menu-modal');
  const modalClose = document.getElementById('modal-close');
  const menuItems = document.querySelectorAll('.menu-item');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  function updatePanningState () {
    const isMenuOpen = menuModal.classList.contains('active');
    if (panningController) {
      panningController.setMenuOpen(isMenuOpen);
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –Ω–∞ –±—É—Ä–≥–µ—Ä
  burgerButton.addEventListener('click', () => {
    menuModal.classList.toggle('active');
    burgerButton.classList.toggle('active');
    updatePanningState();
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
  modalClose.addEventListener('click', () => {
    menuModal.classList.remove('active');
    burgerButton.classList.remove('active');
    updatePanningState();
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
  menuModal.addEventListener('click', (e) => {
    if (e.target === menuModal) {
      menuModal.classList.remove('active');
      burgerButton.classList.remove('active');
      updatePanningState();
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && menuModal.classList.contains('active')) {
      menuModal.classList.remove('active');
      burgerButton.classList.remove('active');
      updatePanningState();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
  menuItems.forEach(item => {
    item.addEventListener('click', () => {
      const itemId = item.id;

      // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
      switch (itemId) {
        case 'menu-pause':
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–∞—É–∑—É
          pauseManager.togglePause();
          timeManager.setPaused(pauseManager.isPaused());
          break;
        case 'menu-speed':
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
          speedButton.click();
          showMenuNotification('‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞');
          break;
        case 'menu-daynight':
          // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–Ω—è/–Ω–æ—á–∏ (–Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é)
          dayNightManager.toggleDayNightMode();
          break;
        case 'menu-route':
          showMenuNotification('üó∫Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ', '–¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç: ' + ROUTE_SCHEDULE[currentRouteIndex].name);
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
          menuModal.classList.remove('active');
          burgerButton.classList.remove('active');
          updatePanningState();
          break;
        case 'menu-settings':
          showMenuNotification('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
          menuModal.classList.remove('active');
          burgerButton.classList.remove('active');
          updatePanningState();
          break;
        case 'menu-help':
          showMenuNotification('‚ùì –ü–æ–º–æ—â—å', '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—ã—à—å –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö: –∫–∞—Å–∞–Ω–∏–µ –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–≤–∞ –ø–∞–ª—å—Ü–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è. –†–µ–∂–∏–º –¥–Ω—è/–Ω–æ—á–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å, —Ç–æ–ª—å–∫–æ –Ω–æ—á—å. –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–≤–µ—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–≤–µ—Ä—Ö –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.');
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
          menuModal.classList.remove('active');
          burgerButton.classList.remove('active');
          updatePanningState();
          break;
        case 'menu-about':
          showMenuNotification('‚ÑπÔ∏è –û –∏–≥—Ä–µ', '–ö–∞—Ä—Ç–∞ –®–∏–Ω—ã - —Å–∏–º—É–ª—è—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π.');
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
          menuModal.classList.remove('active');
          burgerButton.classList.remove('active');
          updatePanningState();
          break;
      }
    });
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –º–µ–Ω—é
function showMenuNotification (title, message = '') {
  const notification = document.createElement('div');
  notification.innerHTML = `<strong>${title}</strong>${message ? '<br>' + message : ''}`;
  notification.style.cssText = `
    position: fixed;
    top: 100px;
    left: 50%;
    transform: translateX(-50%);
    background: linear-gradient(135deg, #3498db, #2980b9);
    color: white;
    padding: 15px 25px;
    border-radius: 10px;
    font-size: 14px;
    font-weight: bold;
    z-index: 1001;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);
    text-align: center;
    max-width: 300px;
    animation: slideDown 0.3s ease-out;
  `;

  document.body.appendChild(notification);

  // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (notification.parentNode) {
      notification.style.animation = 'slideDown 0.3s ease-out reverse';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }
  }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –º–∞—Ä—à—Ä—É—Ç–∞
function updateRouteDisplay () {
  if (!routeDisplay) return; // –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–∑–æ–≤–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const currentDest = ROUTE_SCHEDULE[currentRouteIndex];
  const prefixSpan = routeDisplay.querySelector('.route-prefix');
  const destinationSpan = routeDisplay.querySelector('.route-destination');

  if (isAtDestination) {
    prefixSpan.textContent = '–í –ø—É–Ω–∫—Ç–µ:';
    destinationSpan.textContent = currentDest.name;
  } else {
    prefixSpan.textContent = '–í –ø—É—Ç–∏ –≤:';
    destinationSpan.textContent = currentDest.name;
  }
}

function getRoadPositions () {
  const margin = CONFIG.ROAD_MARGIN;
  const horizontalPositions = [];
  const verticalPositions = [];
  const availableHeight = CONFIG.WORLD_HEIGHT - 2 * margin;
  for (let i = 0; i < 4; i++) {
    const y = margin + (availableHeight / (4 - 1)) * i;
    horizontalPositions.push(y);
  }
  const availableWidth = CONFIG.WORLD_WIDTH - 2 * margin;
  for (let i = 0; i < 7; i++) {
    const x = margin + (availableWidth / (7 - 1)) * i;
    verticalPositions.push(x);
  }
  const maxVerticalPos = verticalPositions[verticalPositions.length - 1];

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∑–∏—Ü–∏—è—Ö –¥–æ—Ä–æ–≥
  console.log('Horizontal roads (Y coordinates):', horizontalPositions);
  console.log('Vertical roads (X coordinates):', verticalPositions);

  return { horizontalPositions, verticalPositions, maxVerticalPos };
}

// –§—É–Ω–∫—Ü–∏–∏ drawGrid –∏ drawWorldBorder –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ WorldRenderer

function randInt (min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function generateBuildingSlots (maxSlots) {
  const sizes = [];
  const target = randInt(Math.max(3, Math.floor(maxSlots / 2)), maxSlots);
  let used = 0;
  while (used < target) {
    const remaining = target - used;
    const maxTake = Math.min(remaining, CONFIG.LOTS.MAX_MULTI_SLOT);
    const roll = Math.random();
    let take = 1;
    if (maxTake >= 3 && roll < 0.18) take = 3;
    else if (maxTake >= 2 && roll < 0.55) take = 2;
    sizes.push(take);
    used += take;
  }
  return sizes;
}

function drawLots (layer) {
  if (!horizontalRoadYs.length || !verticalRoadXs.length) return;
  const roadHalf = CONFIG.ROAD_WIDTH / 2;
  const cols = 2; // –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
  const rows = 3; // –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
  const gap = CONFIG.LOTS.GAP;
  const padding = CONFIG.LOTS.PADDING;

  for (let j = 0; j < horizontalRoadYs.length - 1; j++) {
    const yTop = horizontalRoadYs[j] + roadHalf;
    const yBottom = horizontalRoadYs[j + 1] - roadHalf;
    const blockHeight = Math.max(0, yBottom - yTop);
    const innerHeight = Math.max(0, blockHeight - padding * 2);
    if (innerHeight <= 0) continue;
    const totalGapsV = gap * (rows - 1);
    const lotHeight = (innerHeight - totalGapsV) / rows;

    for (let i = 0; i < verticalRoadXs.length - 1; i++) {
      const xLeft = verticalRoadXs[i] + roadHalf;
      const xRight = verticalRoadXs[i + 1] - roadHalf;
      const blockWidth = Math.max(0, xRight - xLeft);
      const innerWidth = Math.max(0, blockWidth - padding * 2);
      if (innerWidth <= 0) continue;
      const totalGapsH = gap * (cols - 1);
      const lotWidth = (innerWidth - totalGapsH) / cols;

      const startX = xLeft + padding;
      const startY = yTop + padding;

      for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
          const rx = startX + c * (lotWidth + gap);
          const ry = startY + r * (lotHeight + gap);
          const g = new PIXI.Graphics();
          g.lineStyle(1, CONFIG.COLORS.lotBorder, 0.9);
          g.beginFill(CONFIG.COLORS.lotFill, CONFIG.LOTS.FILL_ALPHA);
          g.drawRect(rx, ry, lotWidth, lotHeight);
          g.endFill();
          layer.addChild(g);
        }
      }
    }
  }
}

function drawZones (layer) {
  if (!horizontalRoadYs.length || !verticalRoadXs.length) return;
  const roadHalf = CONFIG.ROAD_WIDTH / 2;
  const cols = 2;
  const rows = 3;
  const gap = CONFIG.LOTS.GAP;
  const padding = CONFIG.LOTS.PADDING;

  const zoneLayout = CONFIG.ZONE_LAYOUT;
  const blocksAcross = verticalRoadXs.length - 1;
  const blocksDown = horizontalRoadYs.length - 1;

  function getBlockRect (bi, bj) {
    const yTop = horizontalRoadYs[bj] + roadHalf;
    const yBottom = horizontalRoadYs[bj + 1] - roadHalf;
    const xLeft = verticalRoadXs[bi] + roadHalf;
    const xRight = verticalRoadXs[bi + 1] - roadHalf;
    const blockWidth = Math.max(0, xRight - xLeft);
    const blockHeight = Math.max(0, yBottom - yTop);
    const innerWidth = Math.max(0, blockWidth - padding * 2);
    const innerHeight = Math.max(0, blockHeight - padding * 2);
    const totalGapsH = gap * (cols - 1);
    const totalGapsV = gap * (rows - 1);
    const lotWidth = (innerWidth - totalGapsH) / cols;
    const lotHeight = (innerHeight - totalGapsV) / rows;
    const startX = xLeft + padding;
    const startY = yTop + padding;
    return { startX, startY, lotWidth, lotHeight };
  }

  function drawZoneRect (x, y, w, h, color) {
    const g = new PIXI.Graphics();
    g.lineStyle(2, 0x333333, 0.9);
    g.beginFill(color, 1.0);
    g.drawRect(x, y, w, h);
    g.endFill();
    layer.addChild(g);
    return g;
  }

  function drawLabel (textValue, x, y, maxWidth) {
    const label = createWrappedLabel(textValue, CONFIG.BASE_FONT, Math.max(60, maxWidth * 0.9));
    label.position.set(x, y);
    layer.addChild(label);
  }

  function createWrappedLabel (textValue, fontSize, maxWidth) {
    const style = new PIXI.TextStyle({
      fontFamily: 'sans-serif',
      fontSize,
      fill: 0x000000,
      wordWrap: true,
      wordWrapWidth: maxWidth,
      breakWords: true,
      align: 'center',
      stroke: 0xffffff,
      strokeThickness: 4
    });
    const label = new PIXI.Text(textValue, style);
    label.anchor.set(0.5);
    return label;
  }

  function drawZoneFromCells (name, colorKey) {
    const conf = zoneLayout[name];
    if (!conf) return;
    const bi = conf.block.i;
    const bj = conf.block.j;
    if (bi < 0 || bj < 0 || bi >= blocksAcross || bj >= blocksDown) return;
    const { startX, startY, lotWidth, lotHeight } = getBlockRect(bi, bj);

    // –î–ª—è –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ —Ä–∏—Å—É–µ–º –ì-–æ–±—Ä–∞–∑–Ω–æ, –∏–Ω–∞—á–µ ‚Äî –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    if (name === 'institute') {
      // –Ø—á–µ–π–∫–∏ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å–µ—Ç–∫–∏ –ª–æ—Ç–æ–≤
      const cells = conf.cells.map(([c, r]) => ({ c, r }));

      // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
      const groupConsecutive = (arr) => {
        const groups = [];
        let start = null, prev = null;
        arr.forEach(v => {
          if (start === null) { start = v; prev = v; return; }
          if (v === prev + 1) { prev = v; return; }
          groups.push([start, prev]);
          start = v; prev = v;
        });
        if (start !== null) groups.push([start, prev]);
        return groups;
      };

      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã: –ø–æ –∫–∞–∂–¥–æ–º—É —Ä—è–¥—É –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ó–ê–ü–û–õ–ù–Ø–ï–ú –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥—ç–ø—ã
      const rowsUsed = Array.from(new Set(cells.map(x => x.r))).sort((a, b) => a - b);
      rowsUsed.forEach(r => {
        const colsHere = cells.filter(x => x.r === r).map(x => x.c).sort((a, b) => a - b);
        const seqs = groupConsecutive(colsHere);
        seqs.forEach(([c0, c1]) => {
          const x = startX + c0 * (lotWidth + gap);
          const y = startY + r * (lotHeight + gap);
          const w = (c1 - c0 + 1) * lotWidth + (c1 - c0) * gap; // –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≥—ç–ø—ã
          const h = lotHeight;
          drawZoneRect(x, y, w, h, CONFIG.COLORS[colorKey]);
        });
      });

      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã: –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Ä—è–¥—ã –∏ –ó–ê–ü–û–õ–ù–Ø–ï–ú –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≥—ç–ø—ã
      const colsUsed = Array.from(new Set(cells.map(x => x.c))).sort((a, b) => a - b);
      colsUsed.forEach(c => {
        const rowsHere = cells.filter(x => x.c === c).map(x => x.r).sort((a, b) => a - b);
        const seqs = groupConsecutive(rowsHere);
        seqs.forEach(([r0, r1]) => {
          const x = startX + c * (lotWidth + gap);
          const y = startY + r0 * (lotHeight + gap);
          const w = lotWidth;
          const h = (r1 - r0 + 1) * lotHeight + (r1 - r0) * gap; // –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≥—ç–ø—ã
          drawZoneRect(x, y, w, h, CONFIG.COLORS[colorKey]);
        });
      });

      // –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ì-–æ–±—Ä–∞–∑–Ω–æ–π –∑–æ–Ω—ã
      const minX = Math.min(...cells.map(({ c }) => startX + c * (lotWidth + gap)));
      const maxX = Math.max(...cells.map(({ c }) => startX + c * (lotWidth + gap) + lotWidth));
      const minY = Math.min(...cells.map(({ r }) => startY + r * (lotHeight + gap)));
      const maxY = Math.max(...cells.map(({ r }) => startY + r * (lotHeight + gap) + lotHeight));

      // –ü–æ–¥–ø–∏—Å—å –≤ —Ü–µ–Ω—Ç—Ä–µ —Ç—è–∂–µ—Å—Ç–∏ —Ñ–∏–≥—É—Ä—ã (—Å—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω—Ç—Ä–æ–≤ –∑–∞–Ω—è—Ç—ã—Ö —è—á–µ–µ–∫)
      const centers = cells.map(({ c, r }) => ({
        cx: startX + c * (lotWidth + gap) + lotWidth / 2,
        cy: startY + r * (lotHeight + gap) + lotHeight / 2
      }));
      const cgx = centers.reduce((s, p) => s + p.cx, 0) / centers.length;
      const cgy = centers.reduce((s, p) => s + p.cy, 0) / centers.length;
      // –®–∏—Ä–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–∞—è —à–∏—Ä–∏–Ω–∞ —Ñ–∏–≥—É—Ä—ã
      drawLabel(CONFIG.ZONES[name].label, cgx, cgy, maxX - minX);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∑–æ–Ω—ã (—Ü–µ–Ω—Ç—Ä –∏ bbox)
      const zoneData = {
        type: 'composite',
        center: { x: cgx, y: cgy },
        bounds: { x: minX, y: minY, w: maxX - minX, h: maxY - minY }
      };
      zoneGeometry.set(name, zoneData);
      console.log(`üèõÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä–∏—è –∑–æ–Ω—ã ${name}:`, zoneData);
      return;
    }

    // –û–±—â–µ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∑–æ–Ω
    let minC = Infinity, minR = Infinity, maxC = -Infinity, maxR = -Infinity;
    conf.cells.forEach(([c, r]) => {
      minC = Math.min(minC, c);
      minR = Math.min(minR, r);
      maxC = Math.max(maxC, c);
      maxR = Math.max(maxR, r);
    });
    const x = startX + minC * (lotWidth + gap);
    const y = startY + minR * (lotHeight + gap);
    const w = (maxC - minC + 1) * lotWidth + (maxC - minC) * gap;
    const h = (maxR - minR + 1) * lotHeight + (maxR - minR) * gap;
    drawZoneRect(x, y, w, h, CONFIG.COLORS[colorKey]);
    const cx = x + w / 2;
    const cy = y + h / 2;
    drawLabel(CONFIG.ZONES[name].label, cx, cy, w);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∑–æ–Ω—ã
    zoneGeometry.set(name, { type: 'rect', center: { x: cx, y: cy }, bounds: { x, y, w, h } });
  }

  drawZoneFromCells('house', 'house');
  drawZoneFromCells('relatives', 'relatives');
  drawZoneFromCells('work', 'work');
  drawZoneFromCells('box', 'box');
  drawZoneFromCells('institute', 'institute');
  // –î–ª—è –∫—Ä—É–≥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—Ç—Ä –∏ —Ä–∞–¥–∏—É—Å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ì-–æ–±—Ä–∞–∑–Ω–∞—è –∑–æ–Ω–∞)
  const inst = CONFIG.ZONES.institute;
  if (inst?.type === 'circle' && !zoneGeometry.has('institute')) {
    zoneGeometry.set('institute', { type: 'circle', center: { x: inst.x, y: inst.y }, bounds: { x: inst.x, y: inst.y, r: inst.r } });
  }
}

function drawRoads (layer) {
  const { horizontalPositions, verticalPositions, maxVerticalPos } = getRoadPositions();
  horizontalRoadYs = horizontalPositions;
  verticalRoadXs = verticalPositions;

  // –†–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
  horizontalRoadYs.forEach(y => {
    const h = [{ x: verticalRoadXs[0], y: y }, { x: maxVerticalPos, y: y }];
    const roadH = new PIXI.Graphics();
    roadH.lineStyle(CONFIG.ROAD_WIDTH, CONFIG.COLORS.road, 1);
    roadH.moveTo(h[0].x, h[0].y);
    roadH.lineTo(h[1].x, h[1].y);
    layer.addChild(roadH);
    const dashH = new PIXI.Graphics();
    dashH.lineStyle(CONFIG.ROAD_LINE_WIDTH, CONFIG.COLORS.roadLine, 1);
    drawDashedPath(dashH, h, CONFIG.DASH_LENGTH, CONFIG.DASH_GAP);
    layer.addChild(dashH);
  });

  // –†–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
  verticalRoadXs.forEach(x => {
    let v;
    if (x === maxVerticalPos) {
      v = [{ x: x, y: 0 }, { x: x, y: CONFIG.WORLD_HEIGHT }];
    } else {
      v = [{ x: x, y: horizontalRoadYs[0] }, { x: x, y: horizontalRoadYs[horizontalRoadYs.length - 1] }];
    }
    const roadV = new PIXI.Graphics();
    roadV.lineStyle(CONFIG.ROAD_WIDTH, CONFIG.COLORS.road, 1);
    roadV.moveTo(v[0].x, v[0].y);
    roadV.lineTo(v[1].x, v[1].y);
    layer.addChild(roadV);
    const dashV = new PIXI.Graphics();
    dashV.lineStyle(CONFIG.ROAD_LINE_WIDTH, CONFIG.COLORS.roadLine, 1);
    drawDashedPath(dashV, v, CONFIG.DASH_LENGTH, CONFIG.DASH_GAP);
    layer.addChild(dashV);
  });
}

function createIntersections (layer) {
  // –ü–æ–¥–ø–∏—Å—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
  if (!hoverLabel) {
    hoverLabel = new PIXI.Text('', {
      fontFamily: 'sans-serif',
      fontSize: CONFIG.BASE_FONT,
      fill: 0xffff66,
      stroke: 0x000000,
      strokeThickness: 4
    });
    hoverLabel.anchor.set(0.5, 1);
    hoverLabel.visible = false;
    labelsLayer.addChild(hoverLabel);
  }

  const hitRadius = 60;
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

  for (let j = 0; j < horizontalRoadYs.length; j++) {
    for (let i = 0; i < verticalRoadXs.length; i++) {
      const x = verticalRoadXs[i];
      const y = horizontalRoadYs[j];
      const labelText = String.fromCharCode(65 + i) + (j + 1);
      const g = new PIXI.Graphics();
      // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –∫—Ä—É–≥-—Ö–∏—Ç–±–æ–∫—Å + —è–≤–Ω–∞—è hitArea –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ö–∏—Ç-—Ç–µ—Å—Ç–∞
      g.beginFill(0x000000, 0).drawCircle(0, 0, hitRadius).endFill();
      g.position.set(x, y);
      g.eventMode = 'static';
      g.cursor = 'pointer';
      g.hitArea = new PIXI.Circle(0, 0, hitRadius);

      const show = () => {
        hoverLabel.text = labelText;
        hoverLabel.position.set(x, y - 16);
        hoverLabel.visible = true;
      };
      const hide = () => {
        hoverLabel.visible = false;
      };

      if (isMobile) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º touch —Å–æ–±—ã—Ç–∏—è
        g.on('touchstart', (e) => {
          e.stopPropagation(); // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          show();
        });
        g.on('touchend', (e) => {
          e.stopPropagation();
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ–ª —É–≤–∏–¥–µ—Ç—å
          setTimeout(hide, 2000);
        });
        g.on('touchcancel', hide);
      } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º pointer —Å–æ–±—ã—Ç–∏—è
        g.on('pointerover', show);
        g.on('pointerout', hide);
        g.on('pointerenter', show);
        g.on('pointerleave', hide);
      }

      layer.addChild(g);
    }
  }
}

function createTrafficLightsForAllIntersections (layer) {
  intersectionKeyToTL.clear();
  const { maxVerticalPos } = getRoadPositions();

  for (let j = 0; j < horizontalRoadYs.length; j++) {
    for (let i = 0; i < verticalRoadXs.length; i++) {
      const x = verticalRoadXs[i];
      const y = horizontalRoadYs[j];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±—ã—Ç—å —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
      if (!shouldHaveTrafficLight(i, j)) {
        continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–æ—Ä–æ–≥–∏ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      const roadConnections = {
        north: j > 0 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —Å–µ–≤–µ—Ä: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
        south: j < horizontalRoadYs.length - 1 || (x === maxVerticalPos), // –¥–æ—Ä–æ–≥–∞ –Ω–∞ —é–≥: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä—è–¥ –ò–õ–ò –ø—Ä–∞–≤–∞—è –¥–æ—Ä–æ–≥–∞ (–≤—ã–µ–∑–¥ –∑–∞ –≥–æ—Ä–æ–¥)
        west: i > 0, // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –∑–∞–ø–∞–¥, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
        east: i < verticalRoadXs.length - 1 // –µ—Å—Ç—å –¥–æ—Ä–æ–≥–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∞–π–Ω–∏–π –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
      };

      const tl = initTrafficLightsForIntersection({
        PIXI,
        app,
        layer,
        x,
        y,
        roadWidth: CONFIG.ROAD_WIDTH,
        lampRadius: 9,
        cycle: { green: 750, yellow: 200 },
        roadConnections
      });
      const key = `${x},${y}`;
      intersectionKeyToTL.set(key, tl);

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã
      trafficCoordinator.addTrafficLight(key, tl, x, y);
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞ –∑–µ–ª–µ–Ω–æ–π –≤–æ–ª–Ω—ã –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
  if (verticalRoadXs.length > 0 && horizontalRoadYs.length > 0) {
    trafficCoordinator.setWaveOrigin(verticalRoadXs[0], horizontalRoadYs[0]);
  }
}

function drawDashedPath (g, points, dash, gap) {
  for (let i = 0; i < points.length - 1; i++) {
    const p1 = points[i], p2 = points[i + 1];
    const dx = p2.x - p1.x, dy = p2.y - p1.y;
    const len = Math.hypot(dx, dy);
    let t = 0;
    while (t <= len) {
      const from = t;
      const to = Math.min(t + dash, len);
      const sx = p1.x + dx * (from / len);
      const sy = p1.y + dy * (from / len);
      const ex = p1.x + dx * (to / len);
      const ey = p1.y + dy * (to / len);
      g.moveTo(sx, sy);
      g.lineTo(ex, ey);
      t += dash + gap;
    }
  }
}

function drawTrafficLights (layer) {
  CONFIG.TRAFFIC_LIGHTS.forEach(pos => {
    const c = new PIXI.Container();
    c.position.set(pos.x, pos.y);
    const pole = new PIXI.Graphics();
    pole.beginFill(0x555555).drawRect(-3, -20, 6, 40).endFill();
    const box = new PIXI.Graphics();
    box.beginFill(0x111111).drawRect(-8, -32, 16, 28).endFill();
    const red = new PIXI.Graphics(); red.beginFill(0xff0000).drawCircle(0, -26, 5).endFill();
    const yellow = new PIXI.Graphics(); yellow.beginFill(0xffff00).drawCircle(0, -16, 5).endFill();
    const green = new PIXI.Graphics(); green.beginFill(0x00ff00).drawCircle(0, -6, 5).endFill();
    c.addChild(pole, box, red, yellow, green);
    layer.addChild(c);
  });
}

function drawAlina (layer) {
  const house = CONFIG.ZONES.house;
  const container = new PIXI.Container();
  container.position.set(house.x + house.w - 40, house.y + house.h - 40);
  const circle = new PIXI.Graphics();
  circle.beginFill(0xffffff).drawCircle(0, 0, 15).endFill();
  const text = new PIXI.Text('A', {
    fontFamily: 'sans-serif',
    fontSize: 20,
    fill: 0x000000,
    stroke: 0xffffff,
    strokeThickness: 2
  });
  text.anchor.set(0.5);
  container.addChild(circle, text);
  layer.addChild(container);
}

function placeLabels (layer) {
  for (const key in CONFIG.ZONES) {
    const z = CONFIG.ZONES[key];
    let x, y;
    if (z.type === 'rect') {
      x = z.x + z.w / 2;
      y = z.y + z.h / 2;
    } else {
      x = z.x;
      y = z.y;
    }
    const text = new PIXI.Text(z.label, {
      fontFamily: 'sans-serif',
      fontSize: CONFIG.BASE_FONT,
      fill: 0xffffff,
      stroke: 0x000000,
      strokeThickness: 4
    });
    text.anchor.set(0.5);
    text.position.set(x, y);
    layer.addChild(text);
  }
}

function layout () {
  const w = 1200;
  const h = 800;
  const scale = Math.min(w / CONFIG.WORLD_WIDTH, h / CONFIG.WORLD_HEIGHT);

  // –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±, –µ—Å–ª–∏ panningController –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
  if (!panningController || panningController.getCurrentScale() === 1) {
    world.scale.set(scale);
    world.pivot.set(0, 0);
    world.position.set(
      (w - CONFIG.WORLD_WIDTH * scale) / 2,
      (h - CONFIG.WORLD_HEIGHT * scale) / 2
    );
  }

  labelsLayer.children.forEach(label => {
    label.scale.set(1 / scale);
  });

  // –°–≤–µ—Ç–æ—Ñ–æ—Ä—ã —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ world, –ø–æ—ç—Ç–æ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
}

// ======= –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –≥—Ä–∞—Ñ—É –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤ –∏ –∑–¥–∞–Ω–∏–π =======
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤
function indexOfClosest (arr, value) {
  let bestIdx = 0;
  let bestDist = Infinity;
  for (let i = 0; i < arr.length; i++) {
    const d = Math.abs(arr[i] - value);
    if (d < bestDist) { bestDist = d; bestIdx = i; }
  }
  return bestIdx;
}

function getIntersectionCoord (i, j) {
  return { x: verticalRoadXs[i], y: horizontalRoadYs[j] };
}

function getNearestIntersectionIJ (x, y) {
  return { i: indexOfClosest(verticalRoadXs, x), j: indexOfClosest(horizontalRoadYs, y) };
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è: –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–π –¥–æ—Ä–æ–≥–µ, —Ä—è–¥–æ–º —Å —Ü–µ–Ω—Ç—Ä–æ–º –∑–æ–Ω—ã
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { stop: {x,y}, nearestIJ: {i,j}, orientation: 'vertical'|'horizontal' }
function computeBuildingStop (buildingPos) {
  const nearestVXIndex = indexOfClosest(verticalRoadXs, buildingPos.x);
  const nearestVx = verticalRoadXs[nearestVXIndex];
  const distToV = Math.abs(buildingPos.x - nearestVx);

  const nearestHYIndex = indexOfClosest(horizontalRoadYs, buildingPos.y);
  const nearestHy = horizontalRoadYs[nearestHYIndex];
  const distToH = Math.abs(buildingPos.y - nearestHy);

  // –í—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –±–ª–∏–∑–∫—É—é –¥–æ—Ä–æ–≥—É
  if (distToV <= distToH) {
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–≥–µ: X —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, Y ‚Äî –ø—Ä–æ–µ–∫—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∑–¥–∞–Ω–∏—è
    const stopY = Math.max(horizontalRoadYs[0], Math.min(horizontalRoadYs[horizontalRoadYs.length - 1], buildingPos.y));
    const j = indexOfClosest(horizontalRoadYs, stopY);
    return { stop: { x: nearestVx, y: stopY }, nearestIJ: { i: nearestVXIndex, j }, orientation: 'vertical' };
  } else {
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–≥–µ: Y —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω, X ‚Äî –ø—Ä–æ–µ–∫—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∑–¥–∞–Ω–∏—è
    const stopX = Math.max(verticalRoadXs[0], Math.min(verticalRoadXs[verticalRoadXs.length - 1], buildingPos.x));
    const i = indexOfClosest(verticalRoadXs, stopX);
    return { stop: { x: stopX, y: nearestHy }, nearestIJ: { i, j: nearestHYIndex }, orientation: 'horizontal' };
  }
}

// –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –ø–æ —Å–µ—Ç–∫–µ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤ (BFS) –æ—Ç (i0,j0) –∫ (i1,j1). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–≤
function buildIntersectionPath (fromIJ, toIJ) {
  const cols = verticalRoadXs.length;
  const rows = horizontalRoadYs.length;
  const key = (i, j) => `${i},${j}`;
  const queue = [];
  const visited = new Set();
  const parent = new Map();
  queue.push(fromIJ);
  visited.add(key(fromIJ.i, fromIJ.j));
  const dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]];
  while (queue.length) {
    const cur = queue.shift();
    if (cur.i === toIJ.i && cur.j === toIJ.j) break;
    for (const [dx, dy] of dirs) {
      const ni = cur.i + dx;
      const nj = cur.j + dy;
      if (ni < 0 || nj < 0 || ni >= cols || nj >= rows) continue;
      const k = key(ni, nj);
      if (visited.has(k)) continue;
      visited.add(k);
      parent.set(k, key(cur.i, cur.j));
      queue.push({ i: ni, j: nj });
    }
  }
  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏
  const pathIJ = [];
  let ck = key(toIJ.i, toIJ.j);
  if (!visited.has(ck)) {
    // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ
    return [getIntersectionCoord(fromIJ.i, fromIJ.j)];
  }
  while (ck) {
    const [si, sj] = ck.split(',').map(Number);
    pathIJ.push({ i: si, j: sj });
    ck = parent.get(ck) || null;
  }
  pathIJ.reverse();
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ ({x,y})
  return pathIJ.map(({ i, j }) => getIntersectionCoord(i, j));
}

// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å —Ç–æ–ª—å–∫–æ –ò–ó –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞ –í –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫, –∑–∞—Ç–µ–º –∫ –∑–¥–∞–Ω–∏—é (–Ω–∞ –æ–±–æ—á–∏–Ω—É)
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫: [intersections..., buildingStop]
function buildGraphPathToBuilding (startIJ, buildingPos) {
  const { stop, nearestIJ } = computeBuildingStop(buildingPos);
  const nodes = buildIntersectionPath(startIJ, nearestIJ); // —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∏
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è
  nodes.push(stop);
  return nodes;
}

function getDestinationCenter (locationKey) {
  const z = zoneGeometry.get(locationKey);
  if (z && z.center) return z.center;
  // fallback: –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
  const def = CONFIG.ZONES[locationKey];
  if (!def) return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
  if (def.type === 'rect') return { x: def.x + def.w / 2, y: def.y + def.h / 2 };
  if (def.type === 'circle') return { x: def.x, y: def.y };
  return { x: verticalRoadXs[0], y: horizontalRoadYs[0] };
}

// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: —Ç–æ–ª—å–∫–æ I->I –∏ I->B/B->I
function buildCarPath () {
  const currentDestination = ROUTE_SCHEDULE[currentRouteIndex];
  if (!currentDestination) return [];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫
  let startIJ;
  if (car && car.position && (car.position.x !== 0 || car.position.y !== 0)) {
    startIJ = getNearestIntersectionIJ(car.position.x, car.position.y);
  } else {
    const housePos = getDestinationCenter('house');
    startIJ = getNearestIntersectionIJ(housePos.x, housePos.y);
  }

  const destCenter = getDestinationCenter(currentDestination.location);
  const graphPath = buildGraphPathToBuilding(startIJ, destCenter);

  // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –Ω–µ —Å—Ç–æ–∏—Ç —Ä–æ–≤–Ω–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞
  const startIntersection = getIntersectionCoord(startIJ.i, startIJ.j);
  const needsPrefix = car && (Math.abs(car.position.x - startIntersection.x) > 1 || Math.abs(car.position.y - startIntersection.y) > 1);
  const path = needsPrefix ? [{ x: car.position.x, y: car.position.y }, startIntersection, ...graphPath] : graphPath;

  // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω—ã,
  // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
  if (needsPrefix && savedCarState && savedCarState.direction !== 0 && path.length >= 2) {
    const currentPos = path[0];
    const nextPos = path[1];
    const dx = nextPos.x - currentPos.x;
    const dy = nextPos.y - currentPos.y;
    const currentLength = Math.hypot(dx, dy);

    // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    const currentSegmentAngle = Math.atan2(dy, dx);
    const angleDifference = Math.abs(currentSegmentAngle - savedCarState.direction);

    // –ï—Å–ª–∏ —É–≥–ª—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–±–æ–ª—å—à–µ 30 –≥—Ä–∞–¥—É—Å–æ–≤), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
    if (angleDifference > Math.PI / 6 || currentLength < 50) {
      const directionX = Math.cos(savedCarState.direction);
      const directionY = Math.sin(savedCarState.direction);

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
      const intermediateDistance = Math.min(60, currentLength * 0.3);
      const intermediatePoint = {
        x: currentPos.x + directionX * intermediateDistance,
        y: currentPos.y + directionY * intermediateDistance
      };

      path.splice(1, 0, intermediatePoint);
      debugLogAlways(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: —É–≥–æ–ª —Ä–∞–∑–Ω–æ—Å—Ç–∏ ${(angleDifference * 180 / Math.PI).toFixed(1)}¬∞, –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ${currentLength.toFixed(1)}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${intermediateDistance.toFixed(1)}`);
    }
  }

  console.log(`üó∫Ô∏è Graph path to ${currentDestination.name}:`, path.map(p => `(${p.x.toFixed(0)},${p.y.toFixed(0)})`).join(' -> '));
  console.log(`üöó Car will start from segment 0: (${path[0]?.x?.toFixed(0) || 'N/A'},${path[0]?.y?.toFixed(0) || 'N/A'}) to (${path[1]?.x?.toFixed(0) || 'N/A'},${path[1]?.y?.toFixed(0) || 'N/A'})`);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  if (savedCarState) {
    console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, {
      hasNextIntersection: !!savedCarState.nextIntersection,
      nextIntersection: savedCarState.nextIntersection,
      direction: savedCarState.direction,
      directionDegrees: (savedCarState.direction * 180 / Math.PI).toFixed(1),
      nextDestination: savedCarState.nextDestination?.name,
      currentPosition: savedCarState.currentPosition
    });
  }

  return path;
}

function createCar () {
  car = new PIXI.Container();

  // –ö—É–∑–æ–≤ –º–∞—à–∏–Ω—ã
  const body = new PIXI.Graphics();
  body.beginFill(0xff8800).drawRect(-60, -30, 120, 60).endFill();
  car.addChild(body);

  // –†–∞–¥–∏–∞—Ç–æ—Ä (–ø–µ—Ä–µ–¥–Ω—è—è —Ä–µ—à–µ—Ç–∫–∞) - –í–ü–ï–†–ï–î–ò
  const radiator = new PIXI.Graphics();
  radiator.beginFill(0x333333).drawRect(45, -25, 10, 50).endFill();
  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å–∫–∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
  for (let i = 0; i < 5; i++) {
    const line = new PIXI.Graphics();
    line.lineStyle(2, 0x666666);
    line.moveTo(45, -20 + i * 10);
    line.lineTo(55, -20 + i * 10);
    radiator.addChild(line);
  }
  car.addChild(radiator);

  // –ü–µ—Ä–µ–¥–Ω–∏–µ —Ñ–∞—Ä—ã - –í–ü–ï–†–ï–î–ò
  const leftHeadlight = new PIXI.Graphics();
  leftHeadlight.beginFill(0xffffaa).drawCircle(50, -20, 8).endFill();
  leftHeadlight.lineStyle(1, 0x333333);
  leftHeadlight.drawCircle(50, -20, 8);
  car.addChild(leftHeadlight);

  const rightHeadlight = new PIXI.Graphics();
  rightHeadlight.beginFill(0xffffaa).drawCircle(50, 20, 8).endFill();
  rightHeadlight.lineStyle(1, 0x333333);
  rightHeadlight.drawCircle(50, 20, 8);
  car.addChild(rightHeadlight);


  // –ó–∞–¥–Ω–∏–µ —Ñ–∞—Ä—ã - –°–ó–ê–î–ò
  const leftTailLight = new PIXI.Graphics();
  leftTailLight.beginFill(0xff0000).drawCircle(-50, -20, 6).endFill();
  leftTailLight.lineStyle(1, 0x333333);
  leftTailLight.drawCircle(-50, -20, 6);
  car.addChild(leftTailLight);

  const rightTailLight = new PIXI.Graphics();
  rightTailLight.beginFill(0xff0000).drawCircle(-50, 20, 6).endFill();
  rightTailLight.lineStyle(1, 0x333333);
  rightTailLight.drawCircle(-50, 20, 6);
  car.addChild(rightTailLight);

  // –ö—Ä—ã—à–∞ –º–∞—à–∏–Ω–∫–∏ (–∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∞–≤–∞—Ç–∞—Ä–∫–∏)
  const roof = new PIXI.Graphics();
  roof.beginFill(0xcc6600).drawRect(-30, -30, 60, 60).endFill();
  roof.lineStyle(2, 0x333333);
  roof.drawRect(-30, -30, 60, 60);
  car.addChild(roof);

  // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
  avatar = PIXI.Sprite.from('/public/shina.jpeg');
  avatar.anchor.set(0.5);
  avatar.width = 60;
  avatar.height = 60;
  car.addChild(avatar);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏–≤–æ—Ç –º–∞—à–∏–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
  // car.position –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ü–µ–Ω—Ç—Ä –º–∞—à–∏–Ω—ã
  car.pivot.set(0, 0); // –ø–∏–≤–æ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ
  car.position.set(0, 0); // –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
  carTrafficController = new CarTrafficController();

  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ä–∞–±–æ—Ç–∞)
  currentRouteIndex = 1; // —Ä–∞–±–æ—Ç–∞, –∞ –Ω–µ –¥–æ–º
  isAtDestination = false;
  stayTimer = 0;

  // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
  carPath = buildCarPath();
  carSegment = 0;
  carProgress = 0;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É –Ω–∞ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –ø—É—Ç–∏ (–∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–µ)
  if (carPath.length > 0) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏–Ω–∞—á–µ 0
    const initialRotation = (savedCarState && savedCarState.direction) || 0;
    car.rotation = initialRotation;
    if (avatar) {
      avatar.rotation = -initialRotation;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –≤ —Ç–æ—á–∫–µ –ø—É—Ç–∏
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(initialRotation);
    const offsetY = -carLength / 2 * Math.sin(initialRotation);
    car.position.set(carPath[0].x + offsetX, carPath[0].y + offsetY);
    console.log('Car starts at:', carPath[0], 'with rotation:', initialRotation);
  } else {
    // Fallback: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Ä–æ–≥—É –∫ –¥–æ–º—É
    const housePos = getDestinationCenter('house');
    const houseIJ = getNearestIntersectionIJ(housePos.x, housePos.y);
    const roadPos = getIntersectionCoord(houseIJ.i, houseIJ.j);
    const initialRotation = (savedCarState && savedCarState.direction) || 0;
    car.rotation = initialRotation;
    if (avatar) {
      avatar.rotation = -initialRotation;
    }
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(initialRotation);
    const offsetY = -carLength / 2 * Math.sin(initialRotation);
    car.position.set(roadPos.x + offsetX, roadPos.y + offsetY);
    console.log('Car fallback position:', roadPos, 'with rotation:', initialRotation);
  }

  decorLayer.addChild(car);
  app.ticker.add(updateCar);
  app.ticker.add(() => {
    timeManager.update();
    updateDateTimeDisplay();
    const gameTime = timeManager.getGameTime();
    dayNightManager.updateNightMode(gameTime);
    updateStayTimer();
  });

  updateRouteDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
function updateDateTimeDisplay() {
  if (datetimeDisplay) {
    datetimeDisplay.innerHTML = timeManager.formatDateTime();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ TimeManager)
function updateGameTime () {
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ TimeManager
  timeManager.setPaused(pauseManager.isPaused());
  timeManager.setSpeedMultiplier(pauseManager.getSpeedMultiplier());
  timeManager.update();

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ø–ª–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  updateDateTimeDisplay();

  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
  const gameTime = timeManager.getGameTime();
  dayNightManager.updateNightMode(gameTime);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  if (dayNightManager.isNightModeActive()) {
    dayNightManager.applyNightColorFilter();
  } else {
    dayNightManager.resetDayColorFilter();
  }

  // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
  if (isAtDestination) {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ TimeManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞
    const gameTime = timeManager.getGameTime();
    const currentTime = gameTime.hours * 60 + gameTime.minutes;
    const currentDay = gameTime.day;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
    updateStayTimer();
  }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞
function nextDestination () {
  debugLogAlways(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);

  // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ —Ç–µ–∫—É—â–µ–º –∑–¥–∞–Ω–∏–∏
  hideBuildingAvatar();

  currentRouteIndex = (currentRouteIndex + 1) % ROUTE_SCHEDULE.length;
  isAtDestination = false;
  stayTimer = 0;

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
  if (savedCarState) {
    car.rotation = savedCarState.direction;
    if (avatar) {
      avatar.rotation = -savedCarState.direction;
    }

    if (savedCarState.nextIntersection) {
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É: ${savedCarState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(savedCarState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É (${savedCarState.nextIntersection.x}, ${savedCarState.nextIntersection.y})`);
    } else {
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${savedCarState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(savedCarState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ ${savedCarState.nextDestination.name} (${savedCarState.nextDestCenter.x}, ${savedCarState.nextDestCenter.y})`);
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    savedCarState = null;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  carPath = buildCarPath();
  carSegment = 0;
  carProgress = 0;

  updateRouteDisplay();
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
function saveCarStateForNextDestination () {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  const nextRouteIndex = (currentRouteIndex + 1) % ROUTE_SCHEDULE.length;
  const nextDestination = ROUTE_SCHEDULE[nextRouteIndex];

  if (!nextDestination) return null;

  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  const nextDestCenter = getDestinationCenter(nextDestination.location);

  // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
  const currentPos = car.position;
  const currentIJ = getNearestIntersectionIJ(currentPos.x, currentPos.y);
  const nextPath = buildGraphPathToBuilding(currentIJ, nextDestCenter);

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –≤ –ø—É—Ç–∏ (–Ω–µ —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è)
  let nextIntersection = null;
  if (nextPath.length >= 2) {
    // –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É (–ø–æ—Å–ª–µ–¥–Ω—è—è - —ç—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É –∑–¥–∞–Ω–∏—è)
    nextIntersection = nextPath[nextPath.length - 2];
  } else if (nextPath.length === 1) {
    // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
    nextIntersection = nextPath[0];
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ fallback
  let direction;
  if (nextIntersection) {
    const dx = nextIntersection.x - currentPos.x;
    const dy = nextIntersection.y - currentPos.y;
    direction = Math.atan2(dy, dx);
    debugLogAlways(`üéØ –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫: (${nextIntersection.x}, ${nextIntersection.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
  } else {
    const dx = nextDestCenter.x - currentPos.x;
    const dy = nextDestCenter.y - currentPos.y;
    direction = Math.atan2(dy, dx);
    debugLogAlways(`üéØ Fallback –∫ —Ü–µ–Ω—Ç—Ä—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: (${nextDestCenter.x}, ${nextDestCenter.y}), –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(direction * 180 / Math.PI).toFixed(1)}¬∞)`);
  }

  return {
    nextDestination: nextDestination,
    nextDestCenter: nextDestCenter,
    nextIntersection: nextIntersection,
    direction: direction,
    currentPosition: { x: car.position.x, y: car.position.y }
  };
}

// –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ: –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –ø—É—Ç–∏ (–æ–±–æ—á–∏–Ω—ã)
function checkArrival () {
  const currentDest = ROUTE_SCHEDULE[currentRouteIndex];
  if (!isAtDestination) {
    debugLogAlways(`üè† –ü—Ä–∏–±—ã—Ç–∏–µ –≤ ${currentDest.name} (–æ–±–æ—á–∏–Ω–∞)`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    savedCarState = saveCarStateForNextDestination();
    debugLogAlways(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, savedCarState);

    isAtDestination = true;
    stayTimer = currentDest.stayHours;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
    const gameTime = timeManager.getGameTime();
    lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä
    lastStayTimerDay = gameTime.day; // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å
    updateRouteDisplay();
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
    showBuildingAvatar(currentDest.location);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
function showBuildingAvatar (locationKey) {
  const buildingCenter = getDestinationCenter(locationKey);
  if (!buildingCenter) return;

  // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –º–∞—à–∏–Ω–∫–∏
  if (avatar) {
    avatar.visible = false;
  }

  // –°–æ–∑–¥–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏ (—Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –≤ –º–∞—à–∏–Ω–∫–µ)
  const avatarContainer = new PIXI.Container();

  // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π —Ñ–æ–Ω (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
  const background = new PIXI.Graphics();
  background.beginFill(0xffffff, 0.9);
  background.lineStyle(2, 0x333333);
  background.drawRect(-30, -30, 60, 60);
  background.endFill();
  avatarContainer.addChild(background);

  // –ê–≤–∞—Ç–∞—Ä–∫–∞ –®–∏–Ω—ã (–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–µ–∑ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è)
  const buildingAvatar = PIXI.Sprite.from('/public/shina.jpeg');
  buildingAvatar.anchor.set(0.5);
  buildingAvatar.width = 60;
  buildingAvatar.height = 60;
  avatarContainer.addChild(buildingAvatar);

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∑–¥–∞–Ω–∏—è
  const zone = zoneGeometry.get(locationKey);
  if (zone && zone.bounds) {
    if (zone.type === 'circle') {
      // –î–ª—è –∫—Ä—É–≥–ª—ã—Ö –∑–æ–Ω (–∏–Ω—Å—Ç–∏—Ç—É—Ç) - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
      avatarContainer.position.set(
        zone.bounds.x + zone.bounds.r - 30,
        zone.bounds.y + zone.bounds.r - 30
      );
    } else {
      // –î–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã—Ö –∑–æ–Ω
      avatarContainer.position.set(
        zone.bounds.x + zone.bounds.w - 30,
        zone.bounds.y + zone.bounds.h - 30
      );
    }
  } else {
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –∑–¥–∞–Ω–∏—è
    avatarContainer.position.set(
      buildingCenter.x + 150,
      buildingCenter.y + 150
    );
  }

  decorLayer.addChild(avatarContainer);
  buildingAvatars.set(locationKey, avatarContainer);

  console.log(`üè† –ü–æ–∫–∞–∑–∞–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${locationKey}`, {
    zone: zone,
    buildingCenter: buildingCenter,
    position: avatarContainer.position
  });
}

// –°–∫—Ä—ã—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
function hideBuildingAvatar () {
  const currentDest = ROUTE_SCHEDULE[currentRouteIndex];
  const avatarContainer = buildingAvatars.get(currentDest.location);
  if (avatarContainer && avatarContainer.parent) {
    avatarContainer.parent.removeChild(avatarContainer);
    buildingAvatars.delete(currentDest.location);
    console.log(`üè† –°–∫—Ä—ã—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∑–¥–∞–Ω–∏–∏ ${currentDest.location}`);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—à–∏–Ω–∫–µ
  if (avatar) {
    avatar.visible = true;
  }
}

function updateCar (delta) {
  debugInfo.frameCount++;

  // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
  if (pauseManager.isPaused()) {
    debugLog('üöó –ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –º–∞—à–∏–Ω–∞ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
    return;
  }

  // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
  if (isAtDestination) {
    debugLog('üöó –ú–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
    checkArrival(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    return;
  }

  const speed = BASE_CAR_SPEED * pauseManager.getSpeedMultiplier() * delta;
  debugLog('üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã', {
    speed: speed.toFixed(2),
    delta: delta.toFixed(3),
    position: `(${car.position.x.toFixed(1)}, ${car.position.y.toFixed(1)})`,
    rotation: `${(car.rotation * 180 / Math.PI).toFixed(1)}¬∞`,
    segment: `${carSegment}/${carPath.length - 1}`,
    isAtDestination: isAtDestination
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—É—Ç—å
  if (carPath.length < 2) {
    console.log('No valid path, rebuilding...');
    carPath = buildCarPath();
    carSegment = 0;
    carProgress = 0;
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (carSegment >= carPath.length) {
    console.log('Invalid segment, rebuilding path...');
    carPath = buildCarPath();
    carSegment = 0;
    carProgress = 0;
    return;
  }

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ carSegment –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
  if (carSegment >= carPath.length - 1) {
    // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
    // console.log('Reached end of path');
    const finalX = carPath[carPath.length - 1].x;
    const finalY = carPath[carPath.length - 1].y;
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(car.rotation);
    const offsetY = -carLength / 2 * Math.sin(car.rotation);
    car.position.set(finalX + offsetX, finalY + offsetY);
    checkArrival();
    return;
  }

  let p1 = carPath[carSegment];
  let p2 = carPath[carSegment + 1];
  let dx = p2.x - p1.x;
  let dy = p2.y - p1.y;
  let segLen = Math.hypot(dx, dy);

  // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
  if (segLen < 0.1) {
    // console.log('Zero-length segment, skipping to next');
    carSegment++;
    carProgress = 0;
    return;
  }

  // üö¶ –ü–†–û–í–ï–†–ö–ê –°–í–ï–¢–û–§–û–†–ê –ü–ï–†–ï–î –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï–ú –ö –ü–ï–†–ï–ö–†–ï–°–¢–ö–£ üö¶
  if (carTrafficController) {
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã
    const carLength = 120;
    const offsetX = carLength / 2 * Math.cos(car.rotation);
    const offsetY = carLength / 2 * Math.sin(car.rotation);
    const currentPos = {
      x: car.position.x + offsetX,
      y: car.position.y + offsetY
    };
    const targetIntersection = { x: p2.x, y: p2.y }; // —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
    const roadPositions = { verticalRoadXs, horizontalRoadYs };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
    const distanceToIntersection = Math.hypot(currentPos.x - targetIntersection.x, currentPos.y - targetIntersection.y);

    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
    if (carSegment === 0 && carProgress < 20) {
      console.log(`üöó DEBUG: segment=${carSegment}, progress=${carProgress.toFixed(1)}, distance=${distanceToIntersection.toFixed(1)}, carPos=(${car.position.x.toFixed(0)},${car.position.y.toFixed(0)}), frontPos=(${currentPos.x.toFixed(0)},${currentPos.y.toFixed(0)}) to=(${targetIntersection.x},${targetIntersection.y})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30-60 –ø–∏–∫—Å–µ–ª–µ–π –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞)
    // 2. –ò –ù–ï —Å—Ç–æ–∏–º –ø—Ä—è–º–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞ 
    if (distanceToIntersection <= 60 && distanceToIntersection > 15) { // –∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
      const trafficCheck = carTrafficController.checkTrafficLights(
        currentPos,
        targetIntersection,
        intersectionKeyToTL,
        roadPositions
      );

      if (!trafficCheck.canMove) {
        // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        debugLogAlways(`üö¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∞—Å–Ω—ã–º —Å–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ (${targetIntersection.x}, ${targetIntersection.y}), distance=${distanceToIntersection.toFixed(1)}`);
        return; // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º carProgress - –º–∞—à–∏–Ω–∞ —Å—Ç–æ–∏—Ç
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
  carProgress += speed;
  debugLog('üöó –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É', {
    segment: carSegment,
    progress: carProgress.toFixed(1),
    segLen: segLen.toFixed(1),
    speed: speed.toFixed(2)
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –º—ã —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
  if (carProgress >= segLen) {
    debugLogAlways('üöó –ó–∞–≤–µ—Ä—à–µ–Ω —Å–µ–≥–º–µ–Ω—Ç', {
      segment: carSegment,
      progress: carProgress.toFixed(1),
      segLen: segLen.toFixed(1)
    });

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
    carProgress = carProgress - segLen; // –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
    carSegment++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
    if (carSegment >= carPath.length - 1) {
      // console.log('Reached final destination');
      const finalX = carPath[carPath.length - 1].x;
      const finalY = carPath[carPath.length - 1].y;
      const carLength = 120;
      const offsetX = -carLength / 2 * Math.cos(car.rotation);
      const offsetY = -carLength / 2 * Math.sin(car.rotation);
      car.position.set(finalX + offsetX, finalY + offsetY);
      checkArrival();
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    p1 = carPath[carSegment];
    p2 = carPath[carSegment + 1];
    dx = p2.x - p1.x;
    dy = p2.y - p1.y;
    segLen = Math.hypot(dx, dy);
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ
  const t = segLen > 0 ? Math.min(1, carProgress / segLen) : 0;
  const newX = p1.x + dx * t;
  const newY = p1.y + dy * t;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
  if (Math.abs(dx) > 0.1 || Math.abs(dy) > 0.1) {
    const targetRotation = Math.atan2(dy, dx);
    const oldRotation = car.rotation;
    car.rotation = targetRotation;
    if (avatar) {
      avatar.rotation = -targetRotation;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á–∏ —Å–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ
    if (car.leftLightBeam && car.rightLightBeam) {
      updateLightBeams();
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π
    const rotationDiff = Math.abs(targetRotation - oldRotation);
    if (rotationDiff > 0.1) {
      debugLogAlways('üöó –ü–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω—ã', {
        oldRotation: (oldRotation * 180 / Math.PI).toFixed(1) + '¬∞',
        newRotation: (targetRotation * 180 / Math.PI).toFixed(1) + '¬∞',
        diff: (rotationDiff * 180 / Math.PI).toFixed(1) + '¬∞'
      });
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –≤ —Ç–æ—á–∫–µ –ø—É—Ç–∏
  const carLength = 120;
  const offsetX = -carLength / 2 * Math.cos(car.rotation);
  const offsetY = -carLength / 2 * Math.sin(car.rotation);
  car.position.set(newX + offsetX, newY + offsetY);


  // console.log(`Car at segment ${carSegment}/${carPath.length - 1}, progress: ${carProgress.toFixed(1)}/${segLen.toFixed(1)}, pos: (${newX.toFixed(1)}, ${newY.toFixed(1)})`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ –ø—É—Ç–∏
  const lastPoint = carPath[carPath.length - 1];
  const distToLast = Math.hypot(car.position.x - lastPoint.x, car.position.y - lastPoint.y);
  if (distToLast < 20) {
    checkArrival();
  }
}

// panningController —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ setupWorld()

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
const gameContainer = document.querySelector('.game-container');
gameContainer.style.width = '1200px';
gameContainer.style.height = '800px';
gameContainer.style.overflow = 'auto';

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
if (isMobile) {
  console.log('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
  console.log('üëÜ –û–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('ü§è –î–≤–∞ –ø–∞–ª—å—Ü–∞ - –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ò –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ (0.1x - 10x)');
  console.log('üîç+ –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ');
  console.log('üîç- –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è - –æ—Ç–¥–∞–ª–µ–Ω–∏–µ');
  console.log('üì± –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω" - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
  console.log('üìç –ö–∞—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');

}

/**
 * –ö–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –®–∏–Ω–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
 */
export class Shina {
  constructor(config, options = {}) {
    this.config = config;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.name = '–®–∏–Ω–∞';
    this.position = { x: 0, y: 0 };
    this.isVisible = true;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    this.currentState = 'available'; // 'available', 'atWork', 'sleeping', 'driving'
    this.stateHistory = [];
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    this.stateStartTime = Date.now();
    this.stateDuration = 0; // 0 –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    // –†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫
    this.workSchedule = {
      startHour: 9,    // 9:00
      endHour: 18,     // 18:00
      workDays: [1, 2, 3, 4, 5] // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
    };
    
    // –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞
    this.sleepSchedule = {
      sleepHour: 23,   // 23:00
      wakeHour: 7,     // 7:00
      sleepDays: [0, 1, 2, 3, 4, 5, 6] // –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    };
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    this.sprite = null;
    this.avatar = null;
    
    // Callback —Ñ—É–Ω–∫—Ü–∏–∏
    this.onStateChange = null;
    this.onAvailabilityChange = null;
    this.onMessageReceived = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    this.init(options);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} options - –æ–ø—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  init(options = {}) {
    this.position = { ...options.position } || { x: 0, y: 0 };
    this.currentState = options.initialState || 'available';
    this.isVisible = options.isVisible !== undefined ? options.isVisible : true;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏
    this.onStateChange = options.onStateChange || null;
    this.onAvailabilityChange = options.onAvailabilityChange || null;
    this.onMessageReceived = options.onMessageReceived || null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.stateStartTime = Date.now();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.stateHistory.push({
      state: this.currentState,
      startTime: this.stateStartTime,
      duration: 0
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {Object} position - –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   */
  setPosition(position) {
    this.position = { ...position };
    this.updateVisualPosition();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   */
  getPosition() {
    return { ...this.position };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @param {string} state - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @param {Object} options - –æ–ø—Ü–∏–∏ —Å–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  setState(state, options = {}) {
    if (this.currentState === state) return;

    const oldState = this.currentState;
    const stateChangeTime = Date.now();
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (this.stateHistory.length > 0) {
      const lastState = this.stateHistory[this.stateHistory.length - 1];
      lastState.duration = stateChangeTime - lastState.startTime;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.currentState = state;
    this.stateStartTime = stateChangeTime;
    this.stateDuration = options.duration || 0;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.stateHistory.push({
      state: this.currentState,
      startTime: this.stateStartTime,
      duration: 0
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    this.updateVisualState();
    
    // –í—ã–∑—ã–≤–∞–µ–º callback
    if (this.onStateChange) {
      this.onStateChange(oldState, this.currentState, this);
    }
    
    if (this.onAvailabilityChange) {
      this.onAvailabilityChange(this.isAvailable(), this);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @returns {string} —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  getCurrentState() {
    return this.currentState;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {boolean} true –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  isAvailable() {
    return this.currentState === 'available';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞ —Ä–∞–±–æ—Ç–µ –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {boolean} true –µ—Å–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ
   */
  isAtWork() {
    return this.currentState === 'atWork';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–ø–∏—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {boolean} true –µ—Å–ª–∏ —Å–ø–∏—Ç
   */
  isSleeping() {
    return this.currentState === 'sleeping';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ–¥–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
   * @returns {boolean} true –µ—Å–ª–∏ –µ–¥–µ—Ç
   */
  isDriving() {
    return this.currentState === 'driving';
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  update(options = {}) {
    const {
      timeManager,
      debugLog
    } = options;

    if (!timeManager) return;

    const gameTime = timeManager.getGameTime();
    const currentHour = gameTime.hours;
    const currentDay = gameTime.dayOfWeek; // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ —Ç.–¥.

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const newState = this.determineStateFromTime(currentHour, currentDay);
    
    if (newState !== this.currentState) {
      this.setState(newState);
      debugLog(`üïê –®–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${this.currentState} (${currentHour}:${gameTime.minutes.toString().padStart(2, '0')})`);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
   * @param {number} hour - —Ç–µ–∫—É—â–∏–π —á–∞—Å
   * @param {number} dayOfWeek - –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0-6)
   * @returns {string} —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  determineStateFromTime(hour, dayOfWeek) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å
    const isWorkDay = this.workSchedule.workDays.includes(dayOfWeek);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if (isWorkDay && hour >= this.workSchedule.startHour && hour < this.workSchedule.endHour) {
      return 'atWork';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ä–µ–º—è —Å–Ω–∞
    if (hour >= this.sleepSchedule.sleepHour || hour < this.sleepSchedule.wakeHour) {
      return 'sleeping';
    }
    
    // –í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–µ–Ω
    return 'available';
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–µ–¥—É"
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  setDrivingState(options = {}) {
    this.setState('driving', {
      duration: options.duration || 0
    });
  }

  /**
   * –í—ã–π—Ç–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–µ–¥—É"
   */
  exitDrivingState() {
    if (this.currentState === 'driving') {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const now = new Date();
      const hour = now.getHours();
      const dayOfWeek = now.getDay();
      const newState = this.determineStateFromTime(hour, dayOfWeek);
      this.setState(newState);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∞
   * @param {Object} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  receiveMessage(message) {
    if (this.onMessageReceived) {
      this.onMessageReceived(message, this);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É
   * @param {Object} friend - –¥—Ä—É–≥
   * @param {Object} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  sendMessage(friend, message) {
    if (friend && friend.receiveMessage) {
      friend.receiveMessage(message);
    }
  }

  /**
   * –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
   */
  friends = new Map();

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
   * @param {Object} friend - –¥—Ä—É–≥
   */
  addFriend(friend) {
    if (friend && friend.name) {
      this.friends.set(friend.name, friend);
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
   * @param {string} friendName - –∏–º—è –¥—Ä—É–≥–∞
   */
  removeFriend(friendName) {
    this.friends.delete(friendName);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏
   * @param {string} friendName - –∏–º—è –¥—Ä—É–≥–∞
   * @returns {Object|null} –¥—Ä—É–≥ –∏–ª–∏ null
   */
  getFriend(friendName) {
    return this.friends.get(friendName) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
   * @returns {Array} –º–∞—Å—Å–∏–≤ –¥—Ä—É–∑–µ–π
   */
  getAllFriends() {
    return Array.from(this.friends.values());
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä—É–∑–µ–π
   * @returns {Array} –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥—Ä—É–∑–µ–π
   */
  getAvailableFriends() {
    return this.getAllFriends().filter(friend => 
      friend.isAvailable && friend.isAvailable()
    );
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥—Ä—É–∑—å—è–º
   * @param {Object} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  broadcastMessage(message) {
    const availableFriends = this.getAvailableFriends();
    availableFriends.forEach(friend => {
      this.sendMessage(friend, message);
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä—É–≥–∞
   * @param {Object} friend - –¥—Ä—É–≥
   * @param {string} oldState - —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @param {string} newState - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  onFriendStateChange(friend, oldState, newState) {
    console.log(`üë• ${friend.name} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${oldState} ‚Üí ${newState}`);
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (newState === 'available' && this.isAvailable()) {
      console.log(`üí¨ ${friend.name} —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è!`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–∑–µ–π
   * @returns {Array} –º–∞—Å—Å–∏–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotifications() {
    const notifications = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä—É–∑–µ–π
    this.friends.forEach(friend => {
      if (friend.lastStateChange && friend.lastStateChange > this.lastNotificationCheck) {
        notifications.push({
          type: 'state_change',
          friend: friend.name,
          message: `${friend.name} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ ${friend.currentState}`
        });
      }
    });
    
    return notifications;
  }

  /**
   * –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  lastNotificationCheck = Date.now();

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  updateNotificationCheck() {
    this.lastNotificationCheck = Date.now();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏
   * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è
   */
  getCommunicationStats() {
    const stats = {
      totalFriends: this.friends.size,
      availableFriends: this.getAvailableFriends().length,
      messagesSent: 0,
      messagesReceived: 0,
      lastActivity: this.lastNotificationCheck
    };
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞)
    this.friends.forEach(friend => {
      if (friend.messagesSent) stats.messagesSent += friend.messagesSent;
      if (friend.messagesReceived) stats.messagesReceived += friend.messagesReceived;
    });
    
    return stats;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –¥—Ä—É–∑–µ–π
   * @param {string} groupName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
   * @param {Array} friendNames - –∏–º–µ–Ω–∞ –¥—Ä—É–∑–µ–π
   */
  createFriendGroup(groupName, friendNames) {
    const group = {
      name: groupName,
      members: friendNames.filter(name => this.friends.has(name)),
      createdAt: Date.now()
    };
    
    this.friendGroups = this.friendGroups || new Map();
    this.friendGroups.set(groupName, group);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ –¥—Ä—É–∑–µ–π
   * @param {string} groupName - –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
   * @param {Object} message - —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  sendMessageToGroup(groupName, message) {
    if (!this.friendGroups || !this.friendGroups.has(groupName)) {
      console.warn(`–ì—Ä—É–ø–ø–∞ ${groupName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }
    
    const group = this.friendGroups.get(groupName);
    group.members.forEach(friendName => {
      const friend = this.getFriend(friendName);
      if (friend) {
        this.sendMessage(friend, message);
      }
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
   * @param {PIXI.Sprite} sprite - PIXI —Å–ø—Ä–∞–π—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  setSprite(sprite) {
    this.sprite = sprite;
    this.updateVisualPosition();
    this.updateVisualState();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
   * @returns {PIXI.Sprite} PIXI —Å–ø—Ä–∞–π—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  getSprite() {
    return this.sprite;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
   * @param {PIXI.Sprite} avatar - —Å–ø—Ä–∞–π—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  setAvatar(avatar) {
    this.avatar = avatar;
    this.updateVisualState();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
   * @returns {PIXI.Sprite} —Å–ø—Ä–∞–π—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  getAvatar() {
    return this.avatar;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  updateVisualPosition() {
    if (this.sprite) {
      this.sprite.position.set(this.position.x, this.position.y);
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  updateVisualState() {
    if (!this.sprite) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.sprite.visible = this.isVisible && this.currentState !== 'driving';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    if (this.avatar) {
      this.avatar.visible = this.isVisible && this.currentState !== 'driving';
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  setOnStateChange(callback) {
    this.onStateChange = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  setOnAvailabilityChange(callback) {
    this.onAvailabilityChange = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  setOnMessageReceived(callback) {
    this.onMessageReceived = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫
   * @param {Object} schedule - –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
   */
  setWorkSchedule(schedule) {
    this.workSchedule = { ...this.workSchedule, ...schedule };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞
   * @param {Object} schedule - –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–Ω–∞
   */
  setSleepSchedule(schedule) {
    this.sleepSchedule = { ...this.sleepSchedule, ...schedule };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏
   */
  getTimeToNextStateChange(options = {}) {
    const {
      timeManager
    } = options;

    if (!timeManager) {
      return { hours: 0, minutes: 0, state: this.currentState };
    }

    const gameTime = timeManager.getGameTime();
    const currentHour = gameTime.hours;
    const currentDay = gameTime.dayOfWeek;

    let nextChangeTime = null;
    let nextState = this.currentState;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const possibleStates = ['available', 'atWork', 'sleeping'];
    
    for (const state of possibleStates) {
      if (state === this.currentState) continue;
      
      const changeTime = this.getTimeToState(state, currentHour, currentDay);
      if (changeTime && (!nextChangeTime || changeTime < nextChangeTime)) {
        nextChangeTime = changeTime;
        nextState = state;
      }
    }

    if (!nextChangeTime) {
      return { hours: 0, minutes: 0, state: this.currentState };
    }

    const hours = Math.floor(nextChangeTime / 60);
    const minutes = nextChangeTime % 60;

    return { hours, minutes, state: nextState };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {string} targetState - —Ü–µ–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @param {number} currentHour - —Ç–µ–∫—É—â–∏–π —á–∞—Å
   * @param {number} currentDay - —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
   * @returns {number|null} –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ null
   */
  getTimeToState(targetState, currentHour, currentDay) {
    const currentTime = currentHour * 60; // –≤ –º–∏–Ω—É—Ç–∞—Ö

    switch (targetState) {
      case 'atWork':
        if (this.workSchedule.workDays.includes(currentDay)) {
          const workStart = this.workSchedule.startHour * 60;
          if (currentTime < workStart) {
            return workStart - currentTime;
          }
        }
        break;

      case 'sleeping':
        const sleepStart = this.sleepSchedule.sleepHour * 60;
        if (currentTime < sleepStart) {
          return sleepStart - currentTime;
        }
        break;

      case 'available':
        if (this.workSchedule.workDays.includes(currentDay)) {
          const workEnd = this.workSchedule.endHour * 60;
          if (currentTime < workEnd) {
            return workEnd - currentTime;
          }
        }
        const wakeTime = this.sleepSchedule.wakeHour * 60;
        if (currentTime < wakeTime) {
          return wakeTime - currentTime;
        }
        break;
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
   * @param {number} days - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @returns {Object} —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  getStateStatistics(days = 7) {
    const stats = {
      available: 0,
      atWork: 0,
      sleeping: 0,
      driving: 0
    };

    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    const totalMinutes = days * 24 * 60;
    const workMinutes = this.workSchedule.workDays.length * (this.workSchedule.endHour - this.workSchedule.startHour) * 60;
    const sleepMinutes = days * (24 - this.sleepSchedule.wakeHour + this.sleepSchedule.sleepHour) * 60;
    const availableMinutes = totalMinutes - workMinutes - sleepMinutes;

    stats.atWork = workMinutes;
    stats.sleeping = sleepMinutes;
    stats.available = Math.max(0, availableMinutes);

    return stats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {boolean} true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  canReceiveMessages() {
    return this.currentState === 'available' || this.currentState === 'atWork';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è –¥—Ä—É–∑–µ–π
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
   */
  getAvailabilityStatus() {
    return {
      isAvailable: this.isAvailable(),
      currentState: this.currentState,
      canReceiveMessages: this.canReceiveMessages(),
      timeToNextChange: this.getTimeToNextStateChange(),
      lastSeen: this.stateStartTime
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @param {string} state - —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @param {Object} options - –æ–ø—Ü–∏–∏
   */
  forceState(state, options = {}) {
    this.setState(state, {
      duration: options.duration || 0,
      force: true
    });
  }

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
   * @param {Object} options - –æ–ø—Ü–∏–∏
   */
  resetToTimeBasedState(options = {}) {
    const {
      timeManager
    } = options;

    if (!timeManager) return;

    const gameTime = timeManager.getGameTime();
    const newState = this.determineStateFromTime(gameTime.hours, gameTime.dayOfWeek);
    this.setState(newState);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
   */
  getDebugInfo() {
    return {
      name: this.name,
      position: this.position,
      currentState: this.currentState,
      isAvailable: this.isAvailable(),
      stateStartTime: this.stateStartTime,
      stateDuration: this.stateDuration,
      stateHistory: this.stateHistory,
      workSchedule: this.workSchedule,
      sleepSchedule: this.sleepSchedule,
      canReceiveMessages: this.canReceiveMessages(),
      availabilityStatus: this.getAvailabilityStatus()
    };
  }
}

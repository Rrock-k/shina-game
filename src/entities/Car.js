/**
 * –ö–ª–∞—Å—Å –º–∞—à–∏–Ω—ã - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ä—Ç–µ
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–µ–π, –º–∞—Ä—à—Ä—É—Ç–æ–º, —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å —Å–∏—Å—Ç–µ–º–∞–º–∏
 */
export class Car {
  constructor(config, pauseManager) {
    this.config = config;
    this.pauseManager = pauseManager;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –º–∞—à–∏–Ω—ã
    this.position = { x: 0, y: 0 };
    this.rotation = 0;
    this.speed = 0;
    this.isMoving = false;
    
    // –ú–∞—Ä—à—Ä—É—Ç –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    this.path = [];
    this.currentSegment = 0;
    this.progress = 0;
    this._isAtDestination = false;
    this.stayTimer = 0;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    this.savedState = null;
    
    // –¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    this.currentRouteIndex = 0;
    
    // –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–≤–Ω–µ)
    this.sprite = null;
    this.avatar = null;
    
    // –°–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    this.trafficController = null;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä
    this.headlightsOn = false;
    
    // Callback —Ñ—É–Ω–∫—Ü–∏–∏ (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑–≤–Ω–µ)
    this.onArrival = null;
    this.onStateChange = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—à–∏–Ω—ã
   * @param {Object} options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  init(options = {}) {
    this.currentRouteIndex = options.currentRouteIndex || 0;
    this.savedState = options.savedState || null;
    this.onArrival = options.onArrival || null;
    this.onStateChange = options.onStateChange || null;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    if (options.initialPosition) {
      this.position = { ...options.initialPosition };
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (this.savedState) {
      this.restoreSavedState();
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
   * @param {Array} path - –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  setPath(path) {
    this.path = [...path];
    this.currentSegment = 0;
    this.progress = 0;
    this._isAtDestination = false;
    
    if (this.path.length > 0) {
      this.position = { ...this.path[0] };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å
   * @returns {Array} –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  getPath() {
    return [...this.path];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
   * @returns {number} –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  getCurrentSegment() {
    return this.currentSegment;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
   * @returns {number} –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç 0 –¥–æ 1
   */
  getProgress() {
    return this.progress;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns {boolean} true –µ—Å–ª–∏ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  isAtDestination() {
    return this._isAtDestination;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
   * @param {boolean} value - –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  setAtDestination(value) {
    this._isAtDestination = value;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
   * @returns {number} –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
   */
  getStayTimer() {
    return this.stayTimer;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
   * @param {number} hours - –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
   */
  setStayTimer(hours) {
    this.stayTimer = hours;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   */
  getPosition() {
    return { ...this.position };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
   * @param {Object} position - –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   */
  setPosition(position) {
    this.position = { ...position };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–≤–æ—Ä–æ—Ç
   * @returns {number} —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
   */
  getRotation() {
    return this.rotation;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç
   * @param {number} rotation - —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
   */
  setRotation(rotation) {
    this.rotation = rotation;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
   * @returns {number} –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  getCurrentRouteIndex() {
    return this.currentRouteIndex;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
   * @param {number} index - –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
   */
  setCurrentRouteIndex(index) {
    this.currentRouteIndex = index;
  }

  /**
   * –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
   */
  nextRoute() {
    this.currentRouteIndex = (this.currentRouteIndex + 1) % this.config.ROUTE_SCHEDULE.length;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
   * @returns {Object} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  saveState() {
    return {
      position: { ...this.position },
      rotation: this.rotation,
      currentRouteIndex: this.currentRouteIndex,
      currentSegment: this.currentSegment,
      progress: this.progress,
      timestamp: Date.now()
    };
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  restoreSavedState() {
    if (!this.savedState) return;
    
    this.position = { ...this.savedState.currentPosition };
    this.rotation = this.savedState.direction;
    
    console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, {
      position: this.position,
      rotation: this.rotation,
      nextIntersection: this.savedState.nextIntersection,
      nextDestination: this.savedState.nextDestination?.name
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  clearSavedState() {
    this.savedState = null;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   * @param {Object} controller - –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   */
  setTrafficController(controller) {
    this.trafficController = controller;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (PIXI –æ–±—ä–µ–∫—Ç)
   * @param {PIXI.Container} sprite - PIXI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—à–∏–Ω—ã
   */
  setSprite(sprite) {
    this.sprite = sprite;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
   * @returns {PIXI.Container} PIXI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –º–∞—à–∏–Ω—ã
   */
  getSprite() {
    return this.sprite;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
   * @param {PIXI.Sprite} avatar - —Å–ø—Ä–∞–π—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  setAvatar(avatar) {
    this.avatar = avatar;
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä
   */
  toggleHeadlights() {
    this.headlightsOn = !this.headlightsOn;
    if (this.onStateChange) {
      this.onStateChange('headlights_toggled', { headlightsOn: this.headlightsOn });
    }
    return this.headlightsOn;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä
   * @returns {boolean} –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Ñ–∞—Ä—ã
   */
  areHeadlightsOn() {
    return this.headlightsOn;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞—Ä
   * @param {boolean} on - –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ–∞—Ä—ã
   */
  setHeadlights(on) {
    this.headlightsOn = on;
    if (this.onStateChange) {
      this.onStateChange('headlights_changed', { headlightsOn: this.headlightsOn });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É
   * @returns {PIXI.Sprite} —Å–ø—Ä–∞–π—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏
   */
  getAvatar() {
    return this.avatar;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
   * @param {number} delta - –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
   * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  update(delta, options = {}) {
    const {
      checkArrival,
      debugLog,
      debugLogAlways,
      carTrafficController,
      intersectionKeyToTL,
      getVerticalRoadXs,
      getHorizontalRoadYs,
      buildCarPath,
      updateLightBeams,
      debugInfo
    } = options;

    if (debugInfo) {
      debugInfo.frameCount++;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
    if (this.pauseManager.isPaused()) {
      debugLog('üöó –ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –º–∞—à–∏–Ω–∞ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
    if (this._isAtDestination) {
      debugLog('üöó –ú–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      if (checkArrival) checkArrival(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      return;
    }

    const speed = this.config.BASE_CAR_SPEED * this.pauseManager.getSpeedMultiplier() * delta;
    debugLog('üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã', {
      speed: speed.toFixed(2),
      delta: delta.toFixed(3),
      position: `(${this.position.x.toFixed(1)}, ${this.position.y.toFixed(1)})`,
      rotation: `${(this.rotation * 180 / Math.PI).toFixed(1)}¬∞`,
      segment: `${this.currentSegment}/${this.path.length - 1}`,
      isAtDestination: this._isAtDestination
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø—É—Ç—å
    if (this.path.length < 2) {
      console.log('No valid path, rebuilding...');
      if (buildCarPath) {
        this.setPath(buildCarPath());
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (this.currentSegment >= this.path.length) {
      console.log('Invalid segment, rebuilding path...');
      if (buildCarPath) {
        this.setPath(buildCarPath());
      }
      return;
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentSegment –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (this.currentSegment >= this.path.length - 1) {
      // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
      const finalX = this.path[this.path.length - 1].x;
      const finalY = this.path[this.path.length - 1].y;
      const carLength = 120;
      const offsetX = -carLength / 2 * Math.cos(this.rotation);
      const offsetY = -carLength / 2 * Math.sin(this.rotation);
      this.position = { x: finalX + offsetX, y: finalY + offsetY };
      if (checkArrival) checkArrival();
      return;
    }

    let p1 = this.path[this.currentSegment];
    let p2 = this.path[this.currentSegment + 1];
    let dx = p2.x - p1.x;
    let dy = p2.y - p1.y;
    let segLen = Math.hypot(dx, dy);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if (segLen < 0.1) {
      this.currentSegment++;
      this.progress = 0;
      return;
    }

    // üö¶ –ü–†–û–í–ï–†–ö–ê –°–í–ï–¢–û–§–û–†–ê –ü–ï–†–ï–î –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï–ú –ö –ü–ï–†–ï–ö–†–ï–°–¢–ö–£ üö¶
    if (carTrafficController && getVerticalRoadXs && getHorizontalRoadYs) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã
      const carLength = 120;
      const offsetX = carLength / 2 * Math.cos(this.rotation);
      const offsetY = carLength / 2 * Math.sin(this.rotation);
      const currentPos = {
        x: this.position.x + offsetX,
        y: this.position.y + offsetY
      };
      const targetIntersection = { x: p2.x, y: p2.y }; // —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
      const roadPositions = { 
        verticalRoadXs: getVerticalRoadXs(), 
        horizontalRoadYs: getHorizontalRoadYs() 
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
      const distanceToIntersection = Math.hypot(currentPos.x - targetIntersection.x, currentPos.y - targetIntersection.y);

      // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
      if (this.currentSegment === 0 && this.progress < 20) {
        console.log(`üöó DEBUG: segment=${this.currentSegment}, progress=${this.progress.toFixed(1)}, distance=${distanceToIntersection.toFixed(1)}, carPos=(${this.position.x.toFixed(0)},${this.position.y.toFixed(0)}), frontPos=(${currentPos.x.toFixed(0)},${currentPos.y.toFixed(0)}) to=(${targetIntersection.x},${targetIntersection.y})`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
      // 1. –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30-60 –ø–∏–∫—Å–µ–ª–µ–π –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞)
      // 2. –ò –ù–ï —Å—Ç–æ–∏–º –ø—Ä—è–º–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞ 
      if (distanceToIntersection <= 60 && distanceToIntersection > 15) { // –∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
        const trafficCheck = carTrafficController.checkTrafficLights(
          currentPos,
          targetIntersection,
          intersectionKeyToTL,
          roadPositions
        );

        if (!trafficCheck.canMove) {
          // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
          debugLogAlways(`üö¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∞—Å–Ω—ã–º —Å–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ (${targetIntersection.x}, ${targetIntersection.y}), distance=${distanceToIntersection.toFixed(1)}`);
          return; // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º progress - –º–∞—à–∏–Ω–∞ —Å—Ç–æ–∏—Ç
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
    this.progress += speed;
    debugLog('üöó –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É', {
      segment: this.currentSegment,
      progress: this.progress.toFixed(1),
      segLen: segLen.toFixed(1),
      speed: speed.toFixed(2)
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ª–∏ –º—ã —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
    if (this.progress >= segLen) {
      debugLogAlways('üöó –ó–∞–≤–µ—Ä—à–µ–Ω —Å–µ–≥–º–µ–Ω—Ç', {
        segment: this.currentSegment,
        progress: this.progress.toFixed(1),
        segLen: segLen.toFixed(1)
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
      this.progress = this.progress - segLen; // –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
      this.currentSegment++;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
      if (this.currentSegment >= this.path.length - 1) {
        const finalX = this.path[this.path.length - 1].x;
        const finalY = this.path[this.path.length - 1].y;
        const carLength = 120;
        const offsetX = -carLength / 2 * Math.cos(this.rotation);
        const offsetY = -carLength / 2 * Math.sin(this.rotation);
        this.position = { x: finalX + offsetX, y: finalY + offsetY };
        if (checkArrival) checkArrival();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      p1 = this.path[this.currentSegment];
      p2 = this.path[this.currentSegment + 1];
      dx = p2.x - p1.x;
      dy = p2.y - p1.y;
      segLen = Math.hypot(dx, dy);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ
    const t = segLen > 0 ? Math.min(1, this.progress / segLen) : 0;
    const newX = p1.x + dx * t;
    const newY = p1.y + dy * t;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    if (Math.abs(dx) > 0.1 || Math.abs(dy) > 0.1) {
      const targetRotation = Math.atan2(dy, dx);
      const oldRotation = this.rotation;
      this.rotation = targetRotation;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á–∏ —Å–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ
      if (updateLightBeams && typeof updateLightBeams === 'function') {
        updateLightBeams();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π
      const rotationDiff = Math.abs(targetRotation - oldRotation);
      if (rotationDiff > 0.1) {
        debugLogAlways('üöó –ü–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω—ã', {
          oldRotation: (oldRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          newRotation: (targetRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          diff: (rotationDiff * 180 / Math.PI).toFixed(1) + '¬∞'
        });
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—à–∏–Ω—É —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –≤ —Ç–æ—á–∫–µ –ø—É—Ç–∏
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(this.rotation);
    const offsetY = -carLength / 2 * Math.sin(this.rotation);
    this.position = { x: newX + offsetX, y: newY + offsetY };

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.sprite) {
      this.sprite.position.set(this.position.x, this.position.y);
      this.sprite.rotation = this.rotation;
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏
   * @returns {Array} –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  buildPathToDestination(options = {}) {
    const {
      getDestinationCenter,
      getNearestIntersectionIJ,
      getIntersectionCoord,
      buildGraphPathToBuilding,
      debugLog,
      debugLogAlways
    } = options;

    const currentDestination = this.config.ROUTE_SCHEDULE[this.currentRouteIndex];
    if (!currentDestination) return [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫
    let startIJ;
    if (this.position.x !== 0 || this.position.y !== 0) {
      startIJ = getNearestIntersectionIJ(this.position.x, this.position.y, options.verticalRoadXs, options.horizontalRoadYs);
    } else {
      const housePos = getDestinationCenter('house');
      startIJ = getNearestIntersectionIJ(housePos.x, housePos.y, options.verticalRoadXs, options.horizontalRoadYs);
    }

    const destCenter = getDestinationCenter(currentDestination.location);
    const graphPath = buildGraphPathToBuilding(startIJ, destCenter, options.verticalRoadXs, options.horizontalRoadYs);

    // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –Ω–µ —Å—Ç–æ–∏—Ç —Ä–æ–≤–Ω–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–æ –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞
    const startIntersection = getIntersectionCoord(startIJ.i, startIJ.j, options.verticalRoadXs, options.horizontalRoadYs);
    const needsPrefix = Math.abs(this.position.x - startIntersection.x) > 1 || Math.abs(this.position.y - startIntersection.y) > 1;
    const path = needsPrefix ? [{ x: this.position.x, y: this.position.y }, startIntersection, ...graphPath] : graphPath;

    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω—ã,
    // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    if (needsPrefix && this.savedState && this.savedState.direction !== 0 && path.length >= 2) {
      const currentPos = path[0];
      const nextPos = path[1];
      const dx = nextPos.x - currentPos.x;
      const dy = nextPos.y - currentPos.y;
      const currentLength = Math.hypot(dx, dy);

      // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      const currentSegmentAngle = Math.atan2(dy, dx);
      const angleDifference = Math.abs(currentSegmentAngle - this.savedState.direction);

      // –ï—Å–ª–∏ —É–≥–ª—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–±–æ–ª—å—à–µ 30 –≥—Ä–∞–¥—É—Å–æ–≤), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
      if (angleDifference > Math.PI / 6 || currentLength < 50) {
        const directionX = Math.cos(this.savedState.direction);
        const directionY = Math.sin(this.savedState.direction);

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
        const intermediateDistance = Math.min(60, currentLength * 0.3);
        const intermediatePoint = {
          x: currentPos.x + directionX * intermediateDistance,
          y: currentPos.y + directionY * intermediateDistance
        };

        path.splice(1, 0, intermediatePoint);
        debugLogAlways(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: —É–≥–æ–ª —Ä–∞–∑–Ω–æ—Å—Ç–∏ ${(angleDifference * 180 / Math.PI).toFixed(1)}¬∞, –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ${currentLength.toFixed(1)}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${intermediateDistance.toFixed(1)}`);
      }
    }

    console.log(`üó∫Ô∏è Graph path to ${currentDestination.name}:`, path.map(p => `(${p.x.toFixed(0)},${p.y.toFixed(0)})`).join(' -> '));
    console.log(`üöó Car will start from segment 0: (${path[0]?.x?.toFixed(0) || 'N/A'},${path[0]?.y?.toFixed(0) || 'N/A'}) to (${path[1]?.x?.toFixed(0) || 'N/A'},${path[1]?.y?.toFixed(0) || 'N/A'})`);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (this.savedState) {
      console.log(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, {
        hasNextIntersection: !!this.savedState.nextIntersection,
        nextIntersection: this.savedState.nextIntersection,
        direction: this.savedState.direction,
        directionDegrees: (this.savedState.direction * 180 / Math.PI).toFixed(1),
        nextDestination: this.savedState.nextDestination?.name,
        currentPosition: this.savedState.currentPosition
      });
    }

    return path;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @returns {Object} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  saveStateForNextDestination(options = {}) {
    const {
      getDestinationCenter,
      getNearestIntersectionIJ,
      buildGraphPathToBuilding,
      getIntersectionCoord
    } = options;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const nextRouteIndex = (this.currentRouteIndex + 1) % this.config.ROUTE_SCHEDULE.length;
    const nextDestination = this.config.ROUTE_SCHEDULE[nextRouteIndex];

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const nextDestCenter = getDestinationCenter(nextDestination.location);

    // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
    const currentIJ = getNearestIntersectionIJ(this.position.x, this.position.y, options.verticalRoadXs, options.horizontalRoadYs);
    const nextPath = buildGraphPathToBuilding(currentIJ, nextDestCenter, options.verticalRoadXs, options.horizontalRoadYs);

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –Ω–∞ –ø—É—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    let nextIntersection = null;
    let direction = 0;

    if (nextPath.length >= 2) {
      nextIntersection = nextPath[0];
      const dx = nextPath[1].x - nextPath[0].x;
      const dy = nextPath[1].y - nextPath[0].y;
      direction = Math.atan2(dy, dx);
    } else if (nextPath.length === 1) {
      // –ï—Å–ª–∏ –ø—É—Ç—å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ (–ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)
      const dx = nextDestCenter.x - this.position.x;
      const dy = nextDestCenter.y - this.position.y;
      direction = Math.atan2(dy, dx);
    }

    return {
      nextRouteIndex: nextRouteIndex,
      nextDestination: nextDestination,
      nextDestCenter: nextDestCenter,
      nextIntersection: nextIntersection,
      direction: direction,
      currentPosition: { x: this.position.x, y: this.position.y }
    };
  }

  /**
   * –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  goToNextDestination(options = {}) {
    const {
      getDestinationCenter,
      getNearestIntersectionIJ,
      buildGraphPathToBuilding,
      getIntersectionCoord,
      debugLogAlways
    } = options;

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    this.nextRoute();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–±—ã—Ç–∏—è
    this.setAtDestination(false);
    this.setStayTimer(0);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    if (this.savedState) {
      this.setRotation(this.savedState.direction);

      if (this.savedState.nextIntersection) {
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É: ${this.savedState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(this.savedState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É (${this.savedState.nextIntersection.x}, ${this.savedState.nextIntersection.y})`);
      } else {
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${this.savedState.direction.toFixed(3)} —Ä–∞–¥–∏–∞–Ω (${(this.savedState.direction * 180 / Math.PI).toFixed(1)}¬∞) –∫ ${this.savedState.nextDestination.name} (${this.savedState.nextDestCenter.x}, ${this.savedState.nextDestCenter.y})`);
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      this.clearSavedState();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const newPath = this.buildPathToDestination(options);
    this.setPath(newPath);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –∑–¥–∞–Ω–∏–∏
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
   */
  updateStayTimer(options = {}) {
    const {
      timeManager,
      debugLogAlways
    } = options;

    if (!this._isAtDestination) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è –∏–∑ timeManager
    const gameTime = timeManager.getGameTime();
    const currentTime = gameTime.hours * 60 + gameTime.minutes;
    const currentDay = gameTime.day;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.stayTimer > 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≤ –∏–≥—Ä–æ–≤—ã—Ö –º–∏–Ω—É—Ç–∞—Ö
      const timeDiff = currentTime - (options.lastStayTimerUpdate || currentTime);
      
      // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (currentDay !== (options.lastStayTimerDay || currentDay)) {
        this.stayTimer = 0;
        debugLogAlways(`üïê –ù–æ–≤—ã–π –¥–µ–Ω—å, —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω`);
      } else {
        const newStayTimer = this.stayTimer - timeDiff / 60; // –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤—ã–µ —á–∞—Å—ã
        this.stayTimer = Math.max(0, newStayTimer);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–µ—Ä –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
    if (this.stayTimer <= 0 && this._isAtDestination) {
      debugLogAlways(`‚è∞ –í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è`);
      this.goToNextDestination(options);
    }
  }

  /**
   * –ü—Ä–∏–±—ã—Ç—å –≤ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è
   */
  arriveAtDestination(options = {}) {
    const {
      timeManager,
      debugLogAlways,
      showBuildingAvatar
    } = options;

    const currentDest = this.config.ROUTE_SCHEDULE[this.currentRouteIndex];
    if (!currentDest) return;

    debugLogAlways(`üè† –ü—Ä–∏–±—ã—Ç–∏–µ –≤ ${currentDest.name} (–æ–±–æ—á–∏–Ω–∞)`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    this.savedState = this.saveStateForNextDestination(options);
    debugLogAlways(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã:`, this.savedState);

    this.setAtDestination(true);
    this.setStayTimer(currentDest.stayHours);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è
    const gameTime = timeManager.getGameTime();
    const lastStayTimerUpdate = gameTime.hours * 60 + gameTime.minutes;
    const lastStayTimerDay = gameTime.day;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –≤ –∑–¥–∞–Ω–∏–∏
    if (showBuildingAvatar) {
      showBuildingAvatar(currentDest.location);
    }

    // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏–∑ –º–∞—à–∏–Ω–∫–∏
    if (this.avatar) {
      this.avatar.visible = false;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (this.onStateChange) {
      this.onStateChange('arrived', {
        destination: currentDest,
        stayTimer: this.stayTimer
      });
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  setOnStateChange(callback) {
    this.onStateChange = callback;
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è –ø—Ä–∏–±—ã—Ç–∏—è
   * @param {Function} callback - —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  setOnArrival(callback) {
    this.onArrival = callback;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
   */
  getDebugInfo() {
    return {
      position: this.position,
      rotation: this.rotation,
      speed: this.speed,
      isMoving: this.isMoving,
      pathLength: this.path.length,
      currentSegment: this.currentSegment,
      progress: this.progress,
      isAtDestination: this._isAtDestination,
      stayTimer: this.stayTimer,
      currentRouteIndex: this.currentRouteIndex,
      hasSavedState: !!this.savedState
    };
  }
}

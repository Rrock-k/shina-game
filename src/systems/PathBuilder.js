/**
 * –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–µ–π –¥–ª—è –∏–≥—Ä—ã "–ö–∞—Ä—Ç–∞ –®–∏–Ω—ã"
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
 */

import { 
  indexOfClosest, 
  getIntersectionCoord, 
  getNearestIntersectionIJ, 
  computeBuildingStop, 
  buildIntersectionPath, 
  buildGraphPathToBuilding 
} from '../utils/geometry.js';

export class PathBuilder {
  constructor(verticalRoadXs, horizontalRoadYs, config = null) {
    this.verticalRoadXs = verticalRoadXs;
    this.horizontalRoadYs = horizontalRoadYs;
    this.config = config;
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ –∫ –∑–¥–∞–Ω–∏—é
   * @param {Object} startIJ - –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ {i, j}
   * @param {Object} buildingPos - –ø–æ–∑–∏—Ü–∏—è –∑–¥–∞–Ω–∏—è {x, y}
   * @returns {Array} - –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏ –≤–∫–ª—é—á–∞—è —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è
   */
  buildPathToBuilding(startIJ, buildingPos) {
    return buildGraphPathToBuilding(
      startIJ, 
      buildingPos, 
      this.verticalRoadXs, 
      this.horizontalRoadYs
    );
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞–º (BFS)
   * @param {Object} fromIJ - –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ {i, j}
   * @param {Object} toIJ - –∫–æ–Ω–µ—á–Ω—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ {i, j}
   * @returns {Array} - –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤ {x, y}
   */
  buildIntersectionPath(fromIJ, toIJ) {
    return buildIntersectionPath(
      fromIJ, 
      toIJ, 
      this.verticalRoadXs, 
      this.horizontalRoadYs
    );
  }

  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å —Ç–æ—á–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É –∑–¥–∞–Ω–∏—è
   * @param {Object} buildingPos - –ø–æ–∑–∏—Ü–∏—è –∑–¥–∞–Ω–∏—è {x, y}
   * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å —Ç–æ—á–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∏–∂–∞–π—à–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
   */
  computeBuildingStop(buildingPos) {
    return computeBuildingStop(
      buildingPos, 
      this.verticalRoadXs, 
      this.horizontalRoadYs
    );
  }

  /**
   * –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –∫ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
   * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ {i, j}
   */
  getNearestIntersectionIJ(x, y) {
    return getNearestIntersectionIJ(x, y, this.verticalRoadXs, this.horizontalRoadYs);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
   * @param {number} i - –∏–Ω–¥–µ–∫—Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–≥–∏
   * @param {number} j - –∏–Ω–¥–µ–∫—Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –¥–æ—Ä–æ–≥–∏
   * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   */
  getIntersectionCoord(i, j) {
    return getIntersectionCoord(i, j, this.verticalRoadXs, this.horizontalRoadYs);
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –º–∞—à–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   * @param {Object} carEntity - –æ–±—ä–µ–∫—Ç –º–∞—à–∏–Ω—ã
   * @param {number} currentRouteIndex - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {Object} savedCarState - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
   * @param {Function} getDestinationCenter - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param {Function} debugLogAlways - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
   * @returns {Array} - –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ –ø—É—Ç–∏
   */
  buildCarPath(carEntity, currentRouteIndex, savedCarState, getDestinationCenter, debugLogAlways) {
    const currentDestination = this.config?.ROUTE_SCHEDULE?.[currentRouteIndex];
    if (!currentDestination) return [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–æ–∫
    let startIJ;
    if (carEntity && carEntity.getPosition() && (carEntity.getPosition().x !== 0 || carEntity.getPosition().y !== 0)) {
      // –ú–∞—à–∏–Ω–∞ –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏—é (–Ω–µ (0,0)) - –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
      const carPos = carEntity.getPosition();
      startIJ = this.getNearestIntersectionIJ(carPos.x, carPos.y);
    } else {
      // –ú–∞—à–∏–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ (0,0) –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥–æ–º–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
      const housePos = getDestinationCenter('house');
      startIJ = this.getNearestIntersectionIJ(housePos.x, housePos.y);
    }

    const destCenter = getDestinationCenter(currentDestination.location);
    const graphPath = this.buildPathToBuilding(startIJ, destCenter);

    // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
    const startIntersection = this.getIntersectionCoord(startIJ.i, startIJ.j);
    let path;
    
    if (carEntity && carEntity.getPosition() && (carEntity.getPosition().x !== 0 || carEntity.getPosition().y !== 0)) {
      // –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ –∏–º–µ–µ—Ç –ø–æ–∑–∏—Ü–∏—é (–Ω–µ (0,0)), –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
      const carPos = carEntity.getPosition();
      const needsPrefix = Math.abs(carPos.x - startIntersection.x) > 1 || Math.abs(carPos.y - startIntersection.y) > 1;
      
      if (needsPrefix) {
        // –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
        path = [{ x: carPos.x, y: carPos.y }, startIntersection, ...graphPath];
      } else {
        // –ú–∞—à–∏–Ω–∞ —É–∂–µ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
        path = [startIntersection, ...graphPath];
      }
    } else {
      // –ú–∞—à–∏–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
      path = [startIntersection, ...graphPath];
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω—ã,
    // –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
    const needsPrefix = carEntity && carEntity.getPosition() && (Math.abs(carEntity.getPosition().x - startIntersection.x) > 1 || Math.abs(carEntity.getPosition().y - startIntersection.y) > 1);
    if (needsPrefix && savedCarState && savedCarState.direction !== 0 && path.length >= 2) {
      const currentPos = path[0];
      const nextPos = path[1];
      const dx = nextPos.x - currentPos.x;
      const dy = nextPos.y - currentPos.y;
      const currentLength = Math.hypot(dx, dy);

      // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      const currentSegmentAngle = Math.atan2(dy, dx);
      const angleDifference = Math.abs(currentSegmentAngle - savedCarState.direction);

      // –ï—Å–ª–∏ —É–≥–ª—ã —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è (–±–æ–ª—å—à–µ 30 –≥—Ä–∞–¥—É—Å–æ–≤), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
      if (angleDifference > Math.PI / 6 || currentLength < 50) {
        const directionX = Math.cos(savedCarState.direction);
        const directionY = Math.sin(savedCarState.direction);

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
        const intermediateDistance = Math.min(60, currentLength * 0.3);
        const intermediatePoint = {
          x: currentPos.x + directionX * intermediateDistance,
          y: currentPos.y + directionY * intermediateDistance
        };

        path.splice(1, 0, intermediatePoint);
        if (debugLogAlways) {
          debugLogAlways(`üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: —É–≥–æ–ª —Ä–∞–∑–Ω–æ—Å—Ç–∏ ${(angleDifference * 180 / Math.PI).toFixed(1)}¬∞, –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ ${currentLength.toFixed(1)}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${intermediateDistance.toFixed(1)}`);
        }
      }
    }

    if (debugLogAlways) {
      debugLogAlways(`üó∫Ô∏è Graph path to ${currentDestination.name}:`, path.map(p => `(${p.x.toFixed(0)},${p.y.toFixed(0)})`).join(' -> '));
      debugLogAlways(`üöó Car will start from segment 0: (${path[0]?.x?.toFixed(0) || 'N/A'},${path[0]?.y?.toFixed(0) || 'N/A'}) to (${path[1]?.x?.toFixed(0) || 'N/A'},${path[1]?.y?.toFixed(0) || 'N/A'})`);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      if (savedCarState) {
        debugLogAlways(`üíæ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`, {
          hasNextIntersection: !!savedCarState.nextIntersection,
          nextIntersection: savedCarState.nextIntersection,
          direction: savedCarState.direction,
          directionDegrees: (savedCarState.direction * 180 / Math.PI).toFixed(1),
          nextDestination: savedCarState.nextDestination?.name,
          currentPosition: savedCarState.currentPosition
        });
      }
    }

    return path;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–æ—Ä–æ–≥
   * @param {number[]} verticalRoadXs - –º–∞—Å—Å–∏–≤ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
   * @param {number[]} horizontalRoadYs - –º–∞—Å—Å–∏–≤ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥
   */
  updateRoads(verticalRoadXs, horizontalRoadYs) {
    this.verticalRoadXs = verticalRoadXs;
    this.horizontalRoadYs = horizontalRoadYs;
  }
}

// –ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç:
// - CarTrafficController - –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º —Å —É—á–µ—Ç–æ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤

import { getDirectionForSegment, Direction } from './trafficLights.js';

export class CarTrafficController {
  constructor() {
    this.isWaitingAtTrafficLight = false;
    this.waitingAtPosition = null;
    this.lastCheckedIntersection = null;
    this.intersectionThreshold = 50; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    // –ò–ó–ú–ï–ù–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
    this.minStopDistance = 35; // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞.
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
   * @param {Object} carPosition - —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –º–∞—à–∏–Ω—ã {x, y}
   * @param {Object} targetIntersection - —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ {x, y}
   * @param {Map} intersectionMap - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   * @param {Array} roadPositions - –ø–æ–∑–∏—Ü–∏–∏ –¥–æ—Ä–æ–≥ {verticalRoadXs, horizontalRoadYs}
   * @returns {Object} - {canMove: boolean, shouldStop: boolean, stopPosition?: Object}
   */
  checkTrafficLights(carPosition, targetIntersection, intersectionMap, roadPositions) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
    const dx = targetIntersection.x - carPosition.x;
    const dy = targetIntersection.y - carPosition.y;
    const direction = getDirectionForSegment(dx, dy);

    // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
    const roundedX = Math.round(targetIntersection.x);
    const roundedY = Math.round(targetIntersection.y);
    const intersectionKey = `${roundedX},${roundedY}`;
    
    // –ò—â–µ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä
    let trafficLight = intersectionMap.get(intersectionKey);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
    if (!trafficLight) {
      const tolerance = 1;
      for (const [key, lightData] of intersectionMap) {
        const [keyX, keyY] = key.split(',').map(Number);
        if (Math.abs(keyX - roundedX) <= tolerance && Math.abs(keyY - roundedY) <= tolerance) {
          trafficLight = lightData;
          break;
        }
      }
    }

    if (!trafficLight) {
      // –ù–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ - –º–æ–∂–µ–º –µ—Ö–∞—Ç—å
      this.clearWaitingState();
      return { canMove: true, shouldStop: false };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã {logic, renderer}
    const trafficLightLogic = trafficLight.logic || trafficLight;
    const isPassAllowed = trafficLightLogic.isPassAllowed(direction);

    // –ï—Å–ª–∏ —É–∂–µ –∂–¥–µ–º –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
    if (this.isWaitingAtTrafficLight && this.lastCheckedIntersection === intersectionKey) {
      if (isPassAllowed) {
        // –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç - –º–æ–∂–µ–º –µ—Ö–∞—Ç—å
        this.clearWaitingState();
        return { canMove: true, shouldStop: false };
      } else {
        // –í—Å–µ –µ—â–µ –∫—Ä–∞—Å–Ω—ã–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
        return { canMove: false, shouldStop: true, stopPosition: this.waitingAtPosition };
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –∂–¥–µ–º –∏ –∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç
    if (!isPassAllowed && !this.isWaitingAtTrafficLight) {
      // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å
      const stopPosition = this.calculateStopPosition(carPosition, targetIntersection, direction);
      this.setWaitingState(stopPosition, intersectionKey);
      return { 
        canMove: false, 
        shouldStop: true, 
        stopPosition,
        intersection: targetIntersection,
        direction 
      };
    }

    // –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç - –º–æ–∂–µ–º –µ—Ö–∞—Ç—å
    return { canMove: true, shouldStop: false };
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
   */
  findNextIntersection(carPosition, targetPosition, verticalRoadXs, horizontalRoadYs) {
    const dx = targetPosition.x - carPosition.x;
    const dy = targetPosition.y - carPosition.y;
    
    if (Math.abs(dx) < 0.1 && Math.abs(dy) < 0.1) {
      return null; // –ù–µ –¥–≤–∏–≥–∞–µ–º—Å—è
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–≤–∏–∂–µ–º—Å—è –ª–∏ –º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    const isHorizontalMovement = Math.abs(dx) > Math.abs(dy);
    let candidateIntersections = [];

    if (isHorizontalMovement) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –∏—â–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏ –Ω–∞ —Ç–æ–π –∂–µ –¥–æ—Ä–æ–≥–µ (Y) –≤–ø–µ—Ä–µ–¥–∏
      const currentRoadY = this.findNearestRoadY(carPosition.y, horizontalRoadYs);
      
      for (const roadX of verticalRoadXs) {
        const isAhead = (dx > 0 && roadX > carPosition.x) || (dx < 0 && roadX < carPosition.x);
        
        if (isAhead) {
          const distance = Math.abs(roadX - carPosition.x);
          // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
          const roundedX = Math.round(roadX);
          const roundedY = Math.round(currentRoadY);
          candidateIntersections.push({ x: roundedX, y: roundedY, distance });
        }
      }
    } else {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –∏—â–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏ –Ω–∞ —Ç–æ–π –∂–µ –¥–æ—Ä–æ–≥–µ (X) –≤–ø–µ—Ä–µ–¥–∏
      const currentRoadX = this.findNearestRoadX(carPosition.x, verticalRoadXs);
      
      for (const roadY of horizontalRoadYs) {
        const isAhead = (dy > 0 && roadY > carPosition.y) || (dy < 0 && roadY < carPosition.y);
        
        if (isAhead) {
          const distance = Math.abs(roadY - carPosition.y);
          // –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–ª—é—á–∞–º–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
          const roundedX = Math.round(currentRoadX);
          const roundedY = Math.round(roadY);
          candidateIntersections.push({ x: roundedX, y: roundedY, distance });
        }
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
    if (candidateIntersections.length === 0) {
      return null;
    }
    
    candidateIntersections.sort((a, b) => a.distance - b.distance);
    return candidateIntersections[0];
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–≥—É (Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
   */
  findNearestRoadY(y, horizontalRoadYs) {
    if (horizontalRoadYs.length === 0) return y;
    
    let nearestY = horizontalRoadYs[0];
    let minDistance = Math.abs(y - nearestY);
    
    for (const roadY of horizontalRoadYs) {
      const distance = Math.abs(y - roadY);
      if (distance < minDistance) {
        minDistance = distance;
        nearestY = roadY;
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ª—é–±–æ–π –¥–æ—Ä–æ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    if (minDistance > 100) {
      console.log(`üîç findNearestRoadY: –ú–∞—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ—Ä–æ–≥ (distance=${minDistance.toFixed(1)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é Y=${y}`);
      return y;
    }
    
    return nearestY;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–≥—É (X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
   */
  findNearestRoadX(x, verticalRoadXs) {
    if (verticalRoadXs.length === 0) return x;
    
    let nearestX = verticalRoadXs[0];
    let minDistance = Math.abs(x - nearestX);
    
    for (const roadX of verticalRoadXs) {
      const distance = Math.abs(x - roadX);
      if (distance < minDistance) {
        minDistance = distance;
        nearestX = roadX;
      }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ª—é–±–æ–π –¥–æ—Ä–æ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
    if (minDistance > 100) {
      console.log(`üîç findNearestRoadX: –ú–∞—à–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ—Ä–æ–≥ (distance=${minDistance.toFixed(1)}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é X=${x}`);
      return x;
    }
    
    return nearestX;
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–º.
   * –õ–æ–≥–∏–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —è—Å–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
   */
  calculateStopPosition(carPosition, intersection, direction) {
    const stopDistance = this.minStopDistance; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const carLength = 120; // –î–ª–∏–Ω–∞ –º–∞—à–∏–Ω—ã

    // carPosition - —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è –ü–ï–†–ï–î–ù–ï–ô —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã.
    // –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∏—Ü–∏—é –¶–ï–ù–¢–†–ê –º–∞—à–∏–Ω—ã.
    
    let stopLineX = intersection.x;
    let stopLineY = intersection.y;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è.
    if (direction === Direction.EW) {
        // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        if (carPosition.x < intersection.x) {
            // –ü–æ–¥—ä–µ–∑–∂–∞–µ–º —Å –∑–∞–ø–∞–¥–∞ (—Å–ª–µ–≤–∞), —Å—Ç–æ–ø-–ª–∏–Ω–∏—è —Å–ª–µ–≤–∞ –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
            stopLineX = intersection.x - stopDistance;
        } else {
            // –ü–æ–¥—ä–µ–∑–∂–∞–µ–º —Å –≤–æ—Å—Ç–æ–∫–∞ (—Å–ø—Ä–∞–≤–∞), —Å—Ç–æ–ø-–ª–∏–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
            stopLineX = intersection.x + stopDistance;
        }
    } else { // Direction.NS
        // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        if (carPosition.y < intersection.y) {
            // –ü–æ–¥—ä–µ–∑–∂–∞–µ–º —Å —Å–µ–≤–µ—Ä–∞ (—Å–≤–µ—Ä—Ö—É), —Å—Ç–æ–ø-–ª–∏–Ω–∏—è —Å–≤–µ—Ä—Ö—É –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
            stopLineY = intersection.y - stopDistance;
        } else {
            // –ü–æ–¥—ä–µ–∑–∂–∞–µ–º —Å —é–≥–∞ (—Å–Ω–∏–∑—É), —Å—Ç–æ–ø-–ª–∏–Ω–∏—è —Å–Ω–∏–∑—É –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
            stopLineY = intersection.y + stopDistance;
        }
    }

    // `stopLineX`, `stopLineY` - —ç—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –ü–ï–†–ï–î–ù–ï–ô —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã.
    // –¢–µ–ø–µ—Ä—å –≤—ã—á–∏—Å–ª–∏–º –ø–æ–∑–∏—Ü–∏—é –¶–ï–ù–¢–†–ê –º–∞—à–∏–Ω—ã.
    // –í–µ–∫—Ç–æ—Ä –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –º–∞—à–∏–Ω—ã (–æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫ –ø–µ—Ä–µ–¥—É) –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–µ–Ω –≤–µ–∫—Ç–æ—Ä—É –æ—Ç –º–∞—à–∏–Ω—ã –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É.
    const dx = intersection.x - carPosition.x;
    const dy = intersection.y - carPosition.y;
    const distance = Math.hypot(dx, dy);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –º–∞—à–∏–Ω—ã)
    const normDx = distance > 0 ? dx / distance : 0;
    const normDy = distance > 0 ? dy / distance : 0;

    // –¶–µ–Ω—Ç—Ä –º–∞—à–∏–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–ª–∫–æ—Ä–ø—É—Å–∞ –ø–æ–∑–∞–¥–∏ –µ–µ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏.
    const centerX = stopLineX - normDx * (carLength / 2);
    const centerY = stopLineY - normDy * (carLength / 2);

    return { x: centerX, y: centerY };
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–µ
   */
  setWaitingState(position, intersectionKey) {
    this.isWaitingAtTrafficLight = true;
    this.waitingAtPosition = { x: position.x, y: position.y };
    this.lastCheckedIntersection = intersectionKey;
    console.log(`Car waiting at traffic light: ${intersectionKey}, position: (${position.x.toFixed(1)}, ${position.y.toFixed(1)})`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
   */
  clearWaitingState() {
    if (this.isWaitingAtTrafficLight) {
      console.log(`Car resuming movement from: ${this.lastCheckedIntersection}`);
    }
    this.isWaitingAtTrafficLight = false;
    this.waitingAtPosition = null;
    this.lastCheckedIntersection = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–¥–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–µ
   */
  isWaiting() {
    return this.isWaitingAtTrafficLight;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
   */
  getWaitingPosition() {
    return this.waitingAtPosition;
  }
}

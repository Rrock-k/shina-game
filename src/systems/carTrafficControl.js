// –ú–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç:
// - CarTrafficController - –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–µ–º —Å —É—á–µ—Ç–æ–º —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤

import { getDirectionForSegment, Direction } from './trafficLights.js';

export class CarTrafficController {
  constructor() {
    this.isWaitingAtTrafficLight = false;
    this.waitingAtPosition = null;
    this.lastCheckedIntersection = null;
    this.intersectionThreshold = 50; // —É–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
   * @param {Object} carPosition - —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –º–∞—à–∏–Ω—ã {x, y}
   * @param {Object} targetIntersection - —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ {x, y}
   * @param {Map} intersectionMap - –∫–∞—Ä—Ç–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤
   * @param {Array} roadPositions - –ø–æ–∑–∏—Ü–∏–∏ –¥–æ—Ä–æ–≥ {verticalRoadXs, horizontalRoadYs}
   * @returns {Object} - {canMove: boolean, shouldStop: boolean, stopPosition?: Object}
   */
  checkTrafficLights(carPosition, targetIntersection, intersectionMap, roadPositions) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
    const dx = targetIntersection.x - carPosition.x;
    const dy = targetIntersection.y - carPosition.y;
    const direction = getDirectionForSegment(dx, dy);

    const intersectionKey = `${targetIntersection.x},${targetIntersection.y}`;
    const trafficLight = intersectionMap.get(intersectionKey);

    if (!trafficLight) {
      // –ù–µ—Ç —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ - –º–æ–∂–µ–º –µ—Ö–∞—Ç—å
      this.clearWaitingState();
      return { canMove: true, shouldStop: false };
    }

    const isPassAllowed = trafficLight.isPassAllowed(direction);
    const distanceToIntersection = Math.hypot(
      carPosition.x - targetIntersection.x,
      carPosition.y - targetIntersection.y
    );

    // console.log(`üö¶ Traffic check: distance=${distanceToIntersection.toFixed(1)}, direction=${direction}, allowed=${isPassAllowed}, intersection=${intersectionKey}, phase=${trafficLight.phase || 'unknown'}`);

    // –ï—Å–ª–∏ —É–∂–µ –∂–¥–µ–º –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ
    if (this.isWaitingAtTrafficLight && this.lastCheckedIntersection === intersectionKey) {
      if (isPassAllowed) {
        // –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç - –º–æ–∂–µ–º –µ—Ö–∞—Ç—å
        this.clearWaitingState();
        return { canMove: true, shouldStop: false };
      } else {
        // –í—Å–µ –µ—â–µ –∫—Ä–∞—Å–Ω—ã–π - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
        return { canMove: false, shouldStop: true, stopPosition: this.waitingAtPosition };
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –∂–¥–µ–º –∏ –ø—Ä–∏–±–ª–∏–∂–∞–µ–º—Å—è –∫ –∫—Ä–∞—Å–Ω–æ–º—É —Å–≤–µ—Ç—É
    if (!isPassAllowed && !this.isWaitingAtTrafficLight) {
      // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ–º –∂–¥–∞—Ç—å
      const stopPosition = this.calculateStopPosition(carPosition, targetIntersection, direction);
      this.setWaitingState(stopPosition, intersectionKey);
      return { 
        canMove: false, 
        shouldStop: true, 
        stopPosition,
        intersection: targetIntersection,
        direction 
      };
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–µ–º –µ—Ö–∞—Ç—å (–∑–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç –∏–ª–∏ –Ω–µ –∂–¥–µ–º)
    return { canMove: true, shouldStop: false };
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
   */
  findNextIntersection(carPosition, targetPosition, verticalRoadXs, horizontalRoadYs) {
    const dx = targetPosition.x - carPosition.x;
    const dy = targetPosition.y - carPosition.y;
    
    if (Math.abs(dx) < 0.1 && Math.abs(dy) < 0.1) {
      return null; // –ù–µ –¥–≤–∏–≥–∞–µ–º—Å—è
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–≤–∏–∂–µ–º—Å—è –ª–∏ –º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    const isHorizontalMovement = Math.abs(dx) > Math.abs(dy);
    let candidateIntersections = [];

    if (isHorizontalMovement) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –∏—â–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏ –Ω–∞ —Ç–æ–π –∂–µ –¥–æ—Ä–æ–≥–µ (Y) –≤–ø–µ—Ä–µ–¥–∏
      const currentRoadY = this.findNearestRoadY(carPosition.y, horizontalRoadYs);
      
      for (const roadX of verticalRoadXs) {
        const isAhead = (dx > 0 && roadX > carPosition.x) || (dx < 0 && roadX < carPosition.x);
        
        if (isAhead) {
          const distance = Math.abs(roadX - carPosition.x);
          candidateIntersections.push({ x: roadX, y: currentRoadY, distance });
        }
      }
    } else {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –∏—â–µ–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∏ –Ω–∞ —Ç–æ–π –∂–µ –¥–æ—Ä–æ–≥–µ (X) –≤–ø–µ—Ä–µ–¥–∏
      const currentRoadX = this.findNearestRoadX(carPosition.x, verticalRoadXs);
      
      for (const roadY of horizontalRoadYs) {
        const isAhead = (dy > 0 && roadY > carPosition.y) || (dy < 0 && roadY < carPosition.y);
        
        if (isAhead) {
          const distance = Math.abs(roadY - carPosition.y);
          candidateIntersections.push({ x: currentRoadX, y: roadY, distance });
        }
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
    if (candidateIntersections.length === 0) return null;
    
    candidateIntersections.sort((a, b) => a.distance - b.distance);
    return candidateIntersections[0];
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–≥—É (Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
   */
  findNearestRoadY(y, horizontalRoadYs) {
    let nearestY = horizontalRoadYs[0];
    let minDistance = Math.abs(y - nearestY);
    
    for (const roadY of horizontalRoadYs) {
      const distance = Math.abs(y - roadY);
      if (distance < minDistance) {
        minDistance = distance;
        nearestY = roadY;
      }
    }
    
    return nearestY;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –¥–æ—Ä–æ–≥—É (X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞)
   */
  findNearestRoadX(x, verticalRoadXs) {
    let nearestX = verticalRoadXs[0];
    let minDistance = Math.abs(x - nearestX);
    
    for (const roadX of verticalRoadXs) {
      const distance = Math.abs(x - roadX);
      if (distance < minDistance) {
        minDistance = distance;
        nearestX = roadX;
      }
    }
    
    return nearestX;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–º
   */
  calculateStopPosition(carPosition, intersection, direction) {
    const stopDistance = 35; // —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ª–∏–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const carLength = 120; // –¥–ª–∏–Ω–∞ –º–∞—à–∏–Ω—ã
    
    const dx = intersection.x - carPosition.x;
    const dy = intersection.y - carPosition.y;
    const distance = Math.hypot(dx, dy);
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ carPosition —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç—å –º–∞—à–∏–Ω—ã
    // –ù—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å –±—ã–ª–∞ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ stopDistance –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
    const totalStopDistance = stopDistance;
    
    if (distance <= totalStopDistance) {
      // –£–∂–µ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫—É
      return { x: carPosition.x, y: carPosition.y };
    }
    
    // –ü–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ totalStopDistance –æ—Ç –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞
    const normalizedDx = dx / distance;
    const normalizedDy = dy / distance;
    
    return {
      x: intersection.x - normalizedDx * totalStopDistance,
      y: intersection.y - normalizedDy * totalStopDistance
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–µ
   */
  setWaitingState(position, intersectionKey) {
    this.isWaitingAtTrafficLight = true;
    this.waitingAtPosition = { x: position.x, y: position.y };
    this.lastCheckedIntersection = intersectionKey;
    console.log(`Car waiting at traffic light: ${intersectionKey}, position: (${position.x.toFixed(1)}, ${position.y.toFixed(1)})`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
   */
  clearWaitingState() {
    if (this.isWaitingAtTrafficLight) {
      console.log(`Car resuming movement from: ${this.lastCheckedIntersection}`);
    }
    this.isWaitingAtTrafficLight = false;
    this.waitingAtPosition = null;
    this.lastCheckedIntersection = null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–¥–µ—Ç –ª–∏ –º–∞—à–∏–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–µ
   */
  isWaiting() {
    return this.isWaitingAtTrafficLight;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
   */
  getWaitingPosition() {
    return this.waitingAtPosition;
  }
}

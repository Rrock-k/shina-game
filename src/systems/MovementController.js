/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω—ã
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–∞—à–∏–Ω—ã –ø–æ –ø—É—Ç–∏
 */
export class MovementController {
  constructor(carEntity, config = {}) {
    this.car = carEntity;
    this.config = {
      BASE_CAR_SPEED: 200,
      ...config
    };
    
    // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // –í–ê–ñ–ù–û: –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω–µ –ø—É—Ç–∏ (–Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤).
    // –ï—Å–ª–∏ –ø—É—Ç—å –º—É—Ç–∏—Ä—É–µ—Ç (–¥–æ–±–∞–≤–ª—è—é—Ç—Å—è/—É–¥–∞–ª—è—é—Ç—Å—è —Ç–æ—á–∫–∏), –∫—ç—à –ù–ï –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω!
    this._segmentCache = new Map(); // –∫—ç—à –¥–ª–∏–Ω —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    this._lastPathHash = null; // —Ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—É—Ç–∏ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
  }


  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏–Ω—É —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * @param {number} segmentIndex - –∏–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞
   * @param {Object} p1 - –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞
   * @param {Object} p2 - –≤—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞
   * @returns {number} - –¥–ª–∏–Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
   * @private
   */
  _getSegmentLength(segmentIndex, p1, p2) {
    const cacheKey = `${segmentIndex}_${p1.x}_${p1.y}_${p2.x}_${p2.y}`;
    
    if (this._segmentCache.has(cacheKey)) {
      return this._segmentCache.get(cacheKey);
    }
    
    const dx = p2.x - p1.x;
    const dy = p2.y - p1.y;
    const length = Math.hypot(dx, dy);
    
    this._segmentCache.set(cacheKey, length);
    return length;
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏
   * @private
   */
  _invalidateCache() {
    this._segmentCache.clear();
    this._lastPathHash = null;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞—à–∏–Ω—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
   * @param {number} delta - –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–∞–¥—Ä–∞
   * @param {Object} options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  update(delta, options = {}) {
    const {
      checkArrival,
      debugLog,
      debugLogAlways,
      carTrafficController,
      intersectionKeyToTL,
      getVerticalRoadXs,
      getHorizontalRoadYs,
      buildCarPath,
      updateLightBeams,
      debugInfo
    } = options;

    if (debugInfo) {
      debugInfo.frameCount++;
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—à–∏–Ω—É
    if (this.car.pauseManager.isPaused()) {
      debugLog('üöó –ò–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ, –º–∞—à–∏–Ω–∞ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      return;
    }

    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è
    if (this.car._isAtDestination) {
      debugLog('üöó –ú–∞—à–∏–Ω–∞ –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è');
      if (checkArrival) checkArrival(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      return;
    }

    const speed = this.config.BASE_CAR_SPEED * this.car.pauseManager.getSpeedMultiplier() * delta;
    debugLog('üöó –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã', {
      speed: speed.toFixed(2),
      delta: delta.toFixed(3),
      position: `(${this.car.position.x.toFixed(1)}, ${this.car.position.y.toFixed(1)})`,
      rotation: `${(this.car.rotation * 180 / Math.PI).toFixed(1)}¬∞`,
      segment: `${this.car.currentSegment}/${this.car.path.length - 1}`,
      isAtDestination: this.car._isAtDestination
    });

    if (this.car.path.length < 2) {
      console.log('No valid path, rebuilding...');
      if (buildCarPath) {
        this.car.setPath(buildCarPath());
      }
      return;
    }

    if (this.car.currentSegment >= this.car.path.length) {
      console.log('Invalid segment, rebuilding path...');
      if (buildCarPath) {
        this.car.setPath(buildCarPath());
      }
      return;
    }

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentSegment –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (this.car.currentSegment >= this.car.path.length - 1) {
      // –î–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
      this._finishPath();
      if (checkArrival) checkArrival();
      return;
    }

    const currentPathHash = this.car.path ? this.car.path.length + '_' + this.car.path[0]?.x + '_' + this.car.path[0]?.y : 'null';
    if (this._lastPathHash !== currentPathHash) {
      this._invalidateCache();
      this._lastPathHash = currentPathHash;
    }

    let p1 = this.car.path[this.car.currentSegment];
    let p2 = this.car.path[this.car.currentSegment + 1];
    let dx = p2.x - p1.x;
    let dy = p2.y - p1.y;
    let segLen = this._getSegmentLength(this.car.currentSegment, p1, p2);

    // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if (segLen < 0.1) {
      this.car.currentSegment++;
      this.car.progress = 0;
      return;
    }

    // üö¶ –ü–†–û–í–ï–†–ö–ê –°–í–ï–¢–û–§–û–†–ê –ü–ï–†–ï–î –ü–†–ò–ë–õ–ò–ñ–ï–ù–ò–ï–ú –ö –ü–ï–†–ï–ö–†–ï–°–¢–ö–£ üö¶
    if (carTrafficController && getVerticalRoadXs && getHorizontalRoadYs) {
      const canMove = this._checkTrafficLights(p1, p2, {
        carTrafficController,
        intersectionKeyToTL,
        getVerticalRoadXs,
        getHorizontalRoadYs,
        debugLogAlways
      });

      if (!canMove) {
        return; // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º progress - –º–∞—à–∏–Ω–∞ —Å—Ç–æ–∏—Ç
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
    this.car.progress += speed;
    debugLog('üöó –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É', {
      segment: this.car.currentSegment,
      progress: this.car.progress.toFixed(1),
      segLen: segLen.toFixed(1),
      speed: speed.toFixed(2)
    });

    if (this.car.progress >= segLen) {
      debugLogAlways('üöó –ó–∞–≤–µ—Ä—à–µ–Ω —Å–µ–≥–º–µ–Ω—Ç', {
        segment: this.car.currentSegment,
        progress: this.car.progress.toFixed(1),
        segLen: segLen.toFixed(1)
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
      this.car.progress = this.car.progress - segLen; // –æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
      this.car.currentSegment++;

      if (this.car.currentSegment >= this.car.path.length - 1) {
        this._finishPath();
        if (checkArrival) checkArrival();
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
      p1 = this.car.path[this.car.currentSegment];
      p2 = this.car.path[this.car.currentSegment + 1];
      dx = p2.x - p1.x;
      dy = p2.y - p1.y;
      segLen = this._getSegmentLength(this.car.currentSegment, p1, p2);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–µ
    const t = segLen > 0 ? Math.min(1, this.car.progress / segLen) : 0;
    const newX = p1.x + dx * t;
    const newY = p1.y + dy * t;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    this._updateRotation(dx, dy, updateLightBeams, debugLogAlways);

    this._updatePosition(newX, newY);
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—É—Ç–∏ - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   * @private
   */
  _finishPath() {
    const finalX = this.car.path[this.car.path.length - 1].x;
    const finalY = this.car.path[this.car.path.length - 1].y;
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(this.car.rotation);
    const offsetY = -carLength / 2 * Math.sin(this.car.rotation);
    this.car.position = { x: finalX + offsetX, y: finalY + offsetY };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–º
   * @param {Object} p1 - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
   * @param {Object} p2 - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
   * @param {Object} options - –æ–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} –º–æ–∂–Ω–æ –ª–∏ –¥–≤–∏–≥–∞—Ç—å—Å—è
   * @private
   */
  _checkTrafficLights(p1, p2, options) {
    const {
      carTrafficController,
      intersectionKeyToTL,
      getVerticalRoadXs,
      getHorizontalRoadYs,
      debugLogAlways
    } = options;

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –º–∞—à–∏–Ω—ã
    const carLength = 120;
    const offsetX = carLength / 2 * Math.cos(this.car.rotation);
    const offsetY = carLength / 2 * Math.sin(this.car.rotation);
    const currentPos = {
      x: this.car.position.x + offsetX,
      y: this.car.position.y + offsetY
    };
    const targetIntersection = { x: p2.x, y: p2.y }; // —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫
    const roadPositions = { 
      verticalRoadXs: getVerticalRoadXs(), 
      horizontalRoadYs: getHorizontalRoadYs() 
    };

    const distanceToIntersection = Math.hypot(currentPos.x - targetIntersection.x, currentPos.y - targetIntersection.y);

    // –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–≤–∏–∂–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å–µ–∫—É–Ω–¥—ã)
    if (this.car.currentSegment === 0 && this.car.progress < 20) {
      console.log(`üöó DEBUG: segment=${this.car.currentSegment}, progress=${this.car.progress.toFixed(1)}, distance=${distanceToIntersection.toFixed(1)}, carPos=(${this.car.position.x.toFixed(0)},${this.car.position.y.toFixed(0)}), frontPos=(${currentPos.x.toFixed(0)},${currentPos.y.toFixed(0)}) to=(${targetIntersection.x},${targetIntersection.y})`);
    }

    // 1. –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∑–æ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (30-60 –ø–∏–∫—Å–µ–ª–µ–π –¥–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞)
    // 2. –ò –ù–ï —Å—Ç–æ–∏–º –ø—Ä—è–º–æ –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ —Å—Ç–∞—Ä—Ç–∞ 
    if (distanceToIntersection <= 60 && distanceToIntersection > 15) { // –∑–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞
      const trafficCheck = carTrafficController.checkTrafficLights(
        currentPos,
        targetIntersection,
        intersectionKeyToTL,
        roadPositions
      );

      if (!trafficCheck.canMove) {
        // –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
        debugLogAlways(`üö¶ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∞—Å–Ω—ã–º —Å–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–µ (${targetIntersection.x}, ${targetIntersection.y}), distance=${distanceToIntersection.toFixed(1)}`);
        return false; // –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º progress - –º–∞—à–∏–Ω–∞ —Å—Ç–æ–∏—Ç
      }
    }

    return true;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –º–∞—à–∏–Ω—ã
   * @param {number} dx - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ X
   * @param {number} dy - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ Y
   * @param {Function} updateLightBeams - —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—É—á–µ–π —Å–≤–µ—Ç–∞
   * @param {Function} debugLogAlways - —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
   * @private
   */
  _updateRotation(dx, dy, updateLightBeams, debugLogAlways) {
    if (Math.abs(dx) > 0.1 || Math.abs(dy) > 0.1) {
      const targetRotation = Math.atan2(dy, dx);
      const oldRotation = this.car.rotation;
      this.car.rotation = targetRotation;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á–∏ —Å–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ
      if (updateLightBeams && typeof updateLightBeams === 'function') {
        updateLightBeams();
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π
      const rotationDiff = Math.abs(targetRotation - oldRotation);
      if (rotationDiff > 0.1) {
        debugLogAlways('üöó –ü–æ–≤–æ—Ä–æ—Ç –º–∞—à–∏–Ω—ã', {
          oldRotation: (oldRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          newRotation: (targetRotation * 180 / Math.PI).toFixed(1) + '¬∞',
          diff: (rotationDiff * 180 / Math.PI).toFixed(1) + '¬∞'
        });
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—à–∏–Ω—ã
   * @param {number} newX - –Ω–æ–≤–∞—è X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   * @param {number} newY - –Ω–æ–≤–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
   * @private
   */
  _updatePosition(newX, newY) {
    const carLength = 120;
    const offsetX = -carLength / 2 * Math.cos(this.car.rotation);
    const offsetY = -carLength / 2 * Math.sin(this.car.rotation);
    this.car.position = { x: newX + offsetX, y: newY + offsetY };

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.car.sprite) {
      this.car.sprite.position.set(this.car.position.x, this.car.position.y);
      this.car.sprite.rotation = this.car.rotation;
    }
  }
}
